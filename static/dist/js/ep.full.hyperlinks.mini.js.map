{"version":3,"sources":["validUrl.js","copyPasteEvents.js","linkBoxes.js","newLink.js","preLinkMark.js","shared.js"],"names":["exports","moduleList","randomString","require","_","validUrl","splitUri","uri","match","is_iri","value","test","splitted","scheme","authority","path","query","fragment","out","length","toLowerCase","is_http_iri","allowHttps","port","replace","is_https_iri","is_web_iri","is_uri","is_http_uri","is_https_uri","is_web_uri","isUri","isHttpUri","isHttpsUri","isWebUri","events","replaceLinkIdsWithFakeIds","linksData","html","linkIdToFakeId","each","link","fakeLinkId","linkId","data","originalLinkId","buildLinkIdToFakeIdMap","$","find","removeClass","addClass","getHtml","buildLinksData","links","originalLinkIds","getLinkIds","generateFakeLinkId","allSpans","linkIds","span","cls","attr","classLinkId","exec","push","uniq","createHiddenDiv","range","content","cloneContents","div","document","createElement","hiddenDiv","selectionHasOnlyText","rawHtml","htmlDecode","text","buildHtmlToCopyWhenSelectionHasOnlyText","htmlWithSpans","buildHtmlWithTwoSpanTags","buildHtmlWithFormattingTagsOfSelection","parseHTML","htmlOfParentNode","commonAncestorContainer","parentNode","tags","getTagsInSelection","buildOpenTags","buildCloseTags","slice","openTags","forEach","tag","closeTags","reverse","htmlObject","hasOwnProperty","localName","prop","stylingTagRegex","parent","saveLink","linksToSave","padId","clientVars","mapOriginalLinksId","pad","plugins","ep_full_hyperlinks","mapFakeLinks","buildLinkData","newLinkId","shared","generateLinkId","saveLinkWithoutSelection","linkData","input","e","innerHTML","childNodes","nodeValue","hasLinkOnMultipleLineSelection","firstLineOfSelection","lastLineOfSelection","rep","attributeManager","foundLineWithLink","line","firstColumn","getFirstColumnOfSelection","lastColumn","getLastColumnOfSelection","hasLinkOnLine","selStart","lastColumnOfSelection","getLength","selEnd","lineNumber","foundLinkOnLine","column","undefined","object","getAttributesOnPosition","hasMultipleLineSelected","nextLine","startLineOffset","lines","offsetOfIndex","addTextOnClipboard","ace","padInner","removeSelection","linkIdOnFirstPositionSelected","hasLinkOnSelection","callWithAce","ace_getLinkIdOnFirstPositionSelected","ace_hasLinkOnSelection","contents","getSelection","getRangeAt","textSelected","textContent","htmlToCopy","JSON","stringify","originalEvent","clipboardData","setData","preventDefault","execCommand","getLinkIdOnFirstPositionSelected","this","documentAttributeManager","hasLink","saveLinks","getData","parse","pastedData","window","pastedDataHtml","pastedHtmlHolderElemenet","allLinksElement","getElementsByTagName","allLinksData","eachElemenet","tempHyperLink","href","tempHyperLinkText","className","id","author","timestamp","Date","getTime","hyperlink","headerId","date","formattedDate","append","clone","RegExp","expression","matches","allLinks","result","startsAt","indexOf","openTag","closeTag","join","endsAt","filter","linkBoxes","padOuter","getPadOuter","getLinksContainer","hideAllLinks","hide","showLink","show","hideLink","showLinkModal","linkObj","socket","linkModalAppended","linkModal","tmpl","targetLeft","clientX","offset","left","targetTop","target","top","parseInt","css","split","width","loaded","val","title","dividedUrl","console","log","URL","error","ep_hyperlink_img","ep_hyperlink_title","card_loading_hyperlink","ep_hyperlink_description","changeMetaView","image","on","fadeOut","fadeIn","data-loaded","metaResolverCallBack","metadata","editedHyperlink","hostname","last","emit","shouldNotCloseLink","closest","internalLinkClick","event","stopPropagation","url","internalPathIs","location","origin","pathname","incomeURL","doesPInURL","padName","padMainPathname","substring","ep_singlePad","active","isLinkInternal","targetPath","search","filters","currentPathname","padNameIndex","splice","doesLinkHaveFilter","history","pushState","type","open","newLink","hideNewLinkPopup","blur","preLinkMarker","unmarkSelectedText","insertNewLinkPopupIfDontExist","callback","remove","newLinkPopup","appendTo","form","oldText","buildLinkFrom","submitNewLink","showNewLinkPopup","markSelectedText","setTimeout","focus","select","preLinkMark","MARK_CLASS","self","highlightSelectedText","prototype","doNothing","performNonUnduableEvent","eventType","callstack","action","startNewEvent","handleMarkText","context","editorInfo","removeMarks","addMark","handleUnmarkText","editEvent","ace_setAttributeOnSelection","userId","originalSelStart","originalSelEnd","repArr","ace_getRepFromSelector","index","ace_performSelectionChange","init","hook","fakeLink","cc","doAttrib","state","getMapfakeLinks"],"mappings":"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","file":"ep.full.hyperlinks.mini.js","sourcesContent":["// https://github.com/ogt/valid-url\n\nconst validUrl = (function () {\n  'use strict';\n\n  // private function\n  // internal URI spitter method - direct from RFC 3986\n  const splitUri = function (uri) {\n    const splitted = uri.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n    return splitted;\n  };\n\n  function is_iri(value) {\n    if (!value) {\n      return;\n    }\n\n    // check for illegal characters\n    if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\n\n    // check for hex escapes that aren't complete\n    if (/%[^0-9a-f]/i.test(value)) return;\n    if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\n\n    let splitted = [];\n    let scheme = '';\n    let authority = '';\n    let path = '';\n    let query = '';\n    let fragment = '';\n    let out = '';\n\n    // from RFC 3986\n    splitted = splitUri(value);\n    scheme = splitted[1];\n    authority = splitted[2];\n    path = splitted[3];\n    query = splitted[4];\n    fragment = splitted[5];\n\n    // scheme and path are required, though the path can be empty\n    if (!(scheme && scheme.length && path.length >= 0)) return;\n\n    // if authority is present, the path must be empty or begin with a /\n    if (authority && authority.length) {\n      if (!(path.length === 0 || /^\\//.test(path))) return;\n    } else {\n      // if authority is not present, the path must not start with //\n      if (/^\\/\\//.test(path)) return;\n    }\n\n    // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n    if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return;\n\n    // re-assemble the URL per section 5.3 in RFC 3986\n    out += `${scheme}:`;\n    if (authority && authority.length) {\n      out += `//${authority}`;\n    }\n\n    out += path;\n\n    if (query && query.length) {\n      out += `?${query}`;\n    }\n\n    if (fragment && fragment.length) {\n      out += `#${fragment}`;\n    }\n\n    return out;\n  }\n\n  function is_http_iri(value, allowHttps) {\n    if (!is_iri(value)) {\n      return;\n    }\n\n    let splitted = [];\n    let scheme = '';\n    let authority = '';\n    let path = '';\n    let port = '';\n    let query = '';\n    let fragment = '';\n    let out = '';\n\n    // from RFC 3986\n    splitted = splitUri(value);\n    scheme = splitted[1];\n    authority = splitted[2];\n    path = splitted[3];\n    query = splitted[4];\n    fragment = splitted[5];\n\n    if (!scheme) return;\n\n    if (allowHttps) {\n      if (scheme.toLowerCase() != 'https') return;\n    } else if (scheme.toLowerCase() != 'http') { return; }\n\n    // fully-qualified URIs must have an authority section that is\n    // a valid host\n    if (!authority) {\n      return;\n    }\n\n    // enable port component\n    if (/:(\\d+)$/.test(authority)) {\n      port = authority.match(/:(\\d+)$/)[0];\n      authority = authority.replace(/:\\d+$/, '');\n    }\n\n    out += `${scheme}:`;\n    out += `//${authority}`;\n\n    if (port) {\n      out += port;\n    }\n\n    out += path;\n\n    if (query && query.length) {\n      out += `?${query}`;\n    }\n\n    if (fragment && fragment.length) {\n      out += `#${fragment}`;\n    }\n\n    return out;\n  }\n\n  function is_https_iri(value) {\n    return is_http_iri(value, true);\n  }\n\n  function is_web_iri(value) {\n    return (is_http_iri(value) || is_https_iri(value));\n  }\n\n  return {\n    is_uri: is_iri,\n    is_http_uri: is_http_iri,\n    is_https_uri: is_https_iri,\n    is_web_uri: is_web_iri,\n    isUri: is_iri,\n    isHttpUri: is_http_iri,\n    isHttpsUri: is_https_iri,\n    isWebUri: is_web_iri,\n  };\n})();\n","'use strict';\n\nconst events = (() => {\n  const addTextOnClipboard = (e, ace, padInner, removeSelection, links) => {\n    let linkIdOnFirstPositionSelected;\n    let hasLinkOnSelection;\n    ace.callWithAce((ace) => {\n      linkIdOnFirstPositionSelected =\n\t\t\t\tace.ace_getLinkIdOnFirstPositionSelected();\n      hasLinkOnSelection = ace.ace_hasLinkOnSelection();\n    });\n\n    if (hasLinkOnSelection) {\n      let linksData;\n      const range = padInner.contents()[0].getSelection().getRangeAt(0);\n      const rawHtml = createHiddenDiv(range);\n      let html = rawHtml;\n      const onlyTextIsSelected = selectionHasOnlyText(rawHtml);\n\n      // when the range selection is fully inside a tag, 'rawHtml' will have no HTML tag, so we have to\n      // build it. Ex: if we have '<span>ab<b>cdef</b>gh</span>\" and user selects 'de', the value of\n      // 'rawHtml' will be 'de', not '<b>de</b>'. As it is not possible to have two links in the same text\n      // linkIdOnFirstPositionSelected is the linkId in this partial selection\n      if (onlyTextIsSelected) {\n        const textSelected = rawHtml[0].textContent;\n        html = buildHtmlToCopyWhenSelectionHasOnlyText(\n            textSelected,\n            range,\n            linkIdOnFirstPositionSelected\n        );\n      }\n      const linkIds = getLinkIds(html);\n      linksData = buildLinksData(html, links);\n      const htmlToCopy = replaceLinkIdsWithFakeIds(linksData, html);\n      linksData = JSON.stringify(linksData);\n      e.originalEvent.clipboardData.setData('text/objectLink', linksData);\n      // here we override the default copy behavior\n      e.originalEvent.clipboardData.setData('text/html', htmlToCopy);\n      e.preventDefault();\n\n      // if it is a cut event we have to remove the selection\n      if (removeSelection) {\n        padInner.contents()[0].execCommand('delete');\n      }\n    }\n  };\n\n  const buildLinkIdToFakeIdMap = (linksData) => {\n    const linkIdToFakeId = {};\n    _.each(linksData, (link, fakeLinkId) => {\n      const linkId = link.data.originalLinkId;\n      linkIdToFakeId[linkId] = fakeLinkId;\n    });\n    return linkIdToFakeId;\n  };\n\n  const replaceLinkIdsWithFakeIds = (linksData, html) => {\n    const linkIdToFakeId = buildLinkIdToFakeIdMap(linksData);\n    _.each(linkIdToFakeId, (fakeLinkId, linkId) => {\n      $(html).find(`.${linkId}`).removeClass(linkId).addClass(fakeLinkId);\n    });\n    const htmlWithFakeLinkIds = getHtml(html);\n    return htmlWithFakeLinkIds;\n  };\n\n  const buildLinksData = (html, links) => {\n    const linksData = {};\n    const originalLinkIds = getLinkIds(html);\n    _.each(originalLinkIds, (originalLinkId) => {\n      const fakeLinkId = generateFakeLinkId();\n      const link = links[originalLinkId];\n      link.data.originalLinkId = originalLinkId;\n      linksData[fakeLinkId] = link;\n    });\n    return linksData;\n  };\n\n  const generateFakeLinkId = () => `fakelink-${randomString(16)}`;\n\n  const getLinkIds = (html) => {\n    const allSpans = $(html).find('span');\n    const linkIds = [];\n    _.each(allSpans, (span) => {\n      const cls = $(span).attr('class');\n      const classLinkId = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(cls);\n      const linkId = classLinkId ? classLinkId[1] : false;\n      if (linkId) {\n        linkIds.push(linkId);\n      }\n    });\n    const uniqueLinkIds = _.uniq(linkIds);\n    return uniqueLinkIds;\n  };\n\n  const createHiddenDiv = (range) => {\n    const content = range.cloneContents();\n    const div = document.createElement('div');\n    const hiddenDiv = $(div).html(content);\n    return hiddenDiv;\n  };\n\n  const getHtml = (hiddenDiv) => $(hiddenDiv).html();\n\n  const selectionHasOnlyText = (rawHtml) => {\n    const html = getHtml(rawHtml);\n    const htmlDecoded = htmlDecode(html);\n    const text = $(rawHtml).text();\n    return htmlDecoded === text;\n  };\n\n  const buildHtmlToCopyWhenSelectionHasOnlyText = (text, range, linkId) => {\n    const htmlWithSpans = buildHtmlWithTwoSpanTags(text, linkId);\n    const html = buildHtmlWithFormattingTagsOfSelection(htmlWithSpans, range);\n\n    const htmlToCopy = $.parseHTML(`<div>${html}</div>`);\n    return htmlToCopy;\n  };\n\n  const buildHtmlWithFormattingTagsOfSelection = (html, range) => {\n    const htmlOfParentNode = range.commonAncestorContainer.parentNode;\n    const tags = getTagsInSelection(htmlOfParentNode);\n\n    // this case happens when we got a selection with one or more styling (bold, italic, underline, strikethrough)\n    // applied in all selection in the same range. For example, <b><i><u>text</u></i></b>\n    if (tags) {\n      html = buildOpenTags(tags) + html + buildCloseTags(tags);\n    }\n\n    return html;\n  };\n\n  // FIXME - Allow to copy a link when user copies only one char\n  // This is a hack to preserve the link classes when user pastes a link. When user pastes a span like this\n  // <span class='link c-124'>thing</span>, chrome removes the classes and keeps only the style of the class. With links\n  // chrome keeps the background-color. To avoid this we create two spans. The first one, <span class='link c-124'>thi</span>\n  // has the text until the last but one character and second one with the last character <span class='link c-124'>g</span>.\n  // Etherpad does a good job joining the two spans into one after the paste is triggered.\n  const buildHtmlWithTwoSpanTags = (text, linkId) => {\n    const firstSpan = `<span class=\"link ${linkId}\">${text.slice(\n        0,\n        -1\n    )}</span>`; // text until before last char\n    const secondSpan = `<span class=\"link ${linkId}\">${text.slice(-1)}</span>`; // last char\n\n    return firstSpan + secondSpan;\n  };\n\n  const buildOpenTags = (tags) => {\n    let openTags = '';\n    tags.forEach((tag) => {\n      openTags += `<${tag}>`;\n    });\n    return openTags;\n  };\n\n  const buildCloseTags = (tags) => {\n    let closeTags = '';\n    var tags = tags.reverse();\n    tags.forEach((tag) => {\n      closeTags += `</${tag}>`;\n    });\n    return closeTags;\n  };\n\n  const getTagsInSelection = (htmlObject) => {\n    const tags = [];\n    let tag;\n    if ($(htmlObject)[0].hasOwnProperty('localName')) {\n      while ($(htmlObject)[0].localName !== 'span') {\n        const html = $(htmlObject).prop('outerHTML');\n        const stylingTagRegex = /<(b|i|u|s)>/.exec(html);\n        tag = stylingTagRegex ? stylingTagRegex[1] : '';\n        tags.push(tag);\n        htmlObject = $(htmlObject).parent();\n      }\n    }\n    return tags;\n  };\n\n  const saveLinks = (e, padInner) => {\n    let links = e.originalEvent.clipboardData.getData('text/objectLink');\n\n    if (links) {\n      links = JSON.parse(links);\n      saveLink(links);\n    } else {\n      let clipboardData, pastedData;\n      let text = '';\n\n      clipboardData = e.originalEvent.clipboardData || window.clipboardData;\n      pastedData = clipboardData.getData('text');\n      const pastedDataHtml = clipboardData.getData('text/html');\n      const range = padInner.contents()[0].getSelection().getRangeAt(0);\n\n      if (!range) return false;\n\n      if (!pastedDataHtml) {\n        if (\n          new RegExp(\n              '([a-zA-Z0-9]+://)?([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?([a-zA-Z0-9.-]+\\\\.[A-Za-z]{2,4})(:[0-9]+)?(/.*)?'\n          ).test(pastedData)\n        ) {\n          const expression =\n\t\t\t\t\t\t/(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/gi;\n          const matches = pastedData.match(expression);\n          const allLinks = {};\n          if (matches) {\n            for (match in matches.reverse()) {\n              // because of characters position need to be fixed and going to add tags from end\n              const result = {};\n              const newLinkId = shared.generateLinkId();\n              result.link = matches[match];\n\n              // allLinks.push(fakeLinkId)\n              allLinks[newLinkId] = {\n                data: {\n                  author: 'empty',\n                  linkId: newLinkId,\n                  timestamp: new Date().getTime(),\n                  text: result.link,\n                  originalLinkId: newLinkId,\n                  hyperlink: result.link,\n                  headerId: null,\n                  date: new Date(),\n                  formattedDate: new Date(),\n                },\n              };\n              result.startsAt = pastedData.indexOf(matches[match]);\n              const openTag = `<span id=\"${newLinkId}\" class=\"${newLinkId}\">`;\n              const closeTag = '</span>';\n              pastedData = [\n                pastedData.slice(0, result.startsAt),\n                openTag,\n                pastedData.slice(result.startsAt),\n              ].join('');\n              result.endsAt =\n\t\t\t\t\t\t\t\tpastedData.indexOf(matches[match]) + matches[match].length;\n              pastedData = [\n                pastedData.slice(0, result.endsAt),\n                closeTag,\n                pastedData.slice(result.endsAt),\n              ].join('');\n            }\n            pastedData = pastedData.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\n            text = $('<div></div>').html(pastedData);\n            padInner\n                .contents()[0]\n                .execCommand(\n                    'insertHTML',\n                    false,\n                    $('<div>').append($(text).clone()).html()\n                );\n            pad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(\n                clientVars.padId,\n                allLinks\n            );\n            e.preventDefault();\n          }\n        }\n      } else {\n        // it means pasted in html\n        e.preventDefault();\n        const pastedHtmlHolderElemenet = document.createElement('div');\n        pastedHtmlHolderElemenet.innerHTML = pastedDataHtml;\n        const allLinksElement =\n\t\t\t\t\tpastedHtmlHolderElemenet.getElementsByTagName('a');\n        const allLinksData = {};\n        _.each(allLinksElement, (eachElemenet) => {\n          const tempHyperLink = eachElemenet.href;\n          const tempHyperLinkText = eachElemenet.innerHTML;\n          const newLinkId = shared.generateLinkId();\n          eachElemenet.className = newLinkId;\n          eachElemenet.id = newLinkId;\n          allLinksData[newLinkId] = {\n            data: {\n              author: 'empty',\n              linkId: newLinkId,\n              timestamp: new Date().getTime(),\n              text: tempHyperLinkText,\n              originalLinkId: newLinkId,\n              hyperlink: tempHyperLink,\n              headerId: null,\n              date: new Date(),\n              formattedDate: new Date(),\n            },\n          };\n        });\n        pad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(\n            clientVars.padId,\n            allLinksData\n        );\n        padInner\n            .contents()[0]\n            .execCommand(\n                'insertHTML',\n                false,\n                $('<div>').append($(pastedHtmlHolderElemenet).clone()).html()\n            );\n      }\n    }\n  };\n\n  const saveLink = (links) => {\n    const linksToSave = {};\n    const padId = clientVars.padId;\n\n    const mapOriginalLinksId =\n\t\t\tpad.plugins.ep_full_hyperlinks.mapOriginalLinksId;\n    const mapFakeLinks = pad.plugins.ep_full_hyperlinks.mapFakeLinks;\n\n    _.each(links, (link, fakeLinkId) => {\n      const linkData = buildLinkData(link, fakeLinkId);\n      const newLinkId = shared.generateLinkId();\n      mapFakeLinks[fakeLinkId] = newLinkId;\n      const originalLinkId = link.data.originalLinkId;\n      mapOriginalLinksId[originalLinkId] = newLinkId;\n      linksToSave[newLinkId] = link;\n    });\n\n    pad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(padId, linksToSave);\n  };\n\n  const buildLinkData = (link, fakeLinkId) => {\n    const linkData = {};\n    linkData.padId = clientVars.padId;\n    linkData.link = link.data;\n    linkData.link.linkId = fakeLinkId;\n    return linkData;\n  };\n\n  // copied from https://css-tricks.com/snippets/javascript/unescape-html-in-js/\n  const htmlDecode = (input) => {\n    const e = document.createElement('div');\n    e.innerHTML = input;\n    return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue;\n  };\n\n  // here we find the link id on a position [line, column]. This function is used to get the link id\n  // of one line when there is ONLY text selected. E.g In the line with link, <span class='link...'>something</span>,\n  // and user copies the text 'omethin'. The span tags are not copied only the text. So as the link is\n  // applied on the selection we get the linkId using the first position selected of the line.\n  // P.S: It's not possible to have two or more links when there is only text selected, because for each link\n  // created it's generated a <span> and to copy only the text it MUST NOT HAVE any tag on the selection\n  const getLinkIdOnFirstPositionSelected = function () {\n    const attributeManager = this.documentAttributeManager;\n    const rep = this.rep;\n    const linkId = _.object(\n        attributeManager.getAttributesOnPosition(rep.selStart[0], rep.selStart[1])\n    ).link;\n    return linkId;\n  };\n\n  const hasLinkOnSelection = function () {\n    let hasLink;\n    const attributeManager = this.documentAttributeManager;\n    const rep = this.rep;\n    const firstLineOfSelection = rep.selStart[0];\n    const firstColumn = rep.selStart[1];\n    const lastColumn = rep.selEnd[1];\n    const lastLineOfSelection = rep.selEnd[0];\n    const selectionOfMultipleLine = hasMultipleLineSelected(\n        firstLineOfSelection,\n        lastLineOfSelection\n    );\n\n    if (selectionOfMultipleLine) {\n      hasLink = hasLinkOnMultipleLineSelection(\n          firstLineOfSelection,\n          lastLineOfSelection,\n          rep,\n          attributeManager\n      );\n    } else {\n      hasLink = hasLinkOnLine(\n          firstLineOfSelection,\n          firstColumn,\n          lastColumn,\n          attributeManager\n      );\n    }\n    return hasLink;\n  };\n\n  const hasLinkOnMultipleLineSelection = (\n      firstLineOfSelection,\n      lastLineOfSelection,\n      rep,\n      attributeManager\n  ) => {\n    let foundLineWithLink = false;\n    for (\n      let line = firstLineOfSelection;\n      line <= lastLineOfSelection && !foundLineWithLink;\n      line++\n    ) {\n      const firstColumn = getFirstColumnOfSelection(\n          line,\n          rep,\n          firstLineOfSelection\n      );\n      const lastColumn = getLastColumnOfSelection(\n          line,\n          rep,\n          lastLineOfSelection\n      );\n      const hasLink = hasLinkOnLine(\n          line,\n          firstColumn,\n          lastColumn,\n          attributeManager\n      );\n      if (hasLink) {\n        foundLineWithLink = true;\n      }\n    }\n    return foundLineWithLink;\n  };\n\n  const getFirstColumnOfSelection = (line, rep, firstLineOfSelection) => line !== firstLineOfSelection ? 0 : rep.selStart[1];\n\n  const getLastColumnOfSelection = (line, rep, lastLineOfSelection) => {\n    let lastColumnOfSelection;\n    if (line !== lastLineOfSelection) {\n      lastColumnOfSelection = getLength(line, rep); // length of line\n    } else {\n      lastColumnOfSelection = rep.selEnd[1] - 1; // position of last character selected\n    }\n    return lastColumnOfSelection;\n  };\n\n  const hasLinkOnLine = (\n      lineNumber,\n      firstColumn,\n      lastColumn,\n      attributeManager\n  ) => {\n    let foundLinkOnLine = false;\n    for (\n      let column = firstColumn;\n      column <= lastColumn && !foundLinkOnLine;\n      column++\n    ) {\n      const linkId = _.object(\n          attributeManager.getAttributesOnPosition(lineNumber, column)\n      ).link;\n      if (linkId !== undefined) {\n        foundLinkOnLine = true;\n      }\n    }\n    return foundLinkOnLine;\n  };\n\n  const hasMultipleLineSelected = (firstLineOfSelection, lastLineOfSelection) => firstLineOfSelection !== lastLineOfSelection;\n\n  const getLength = (line, rep) => {\n    const nextLine = line + 1;\n    const startLineOffset = rep.lines.offsetOfIndex(line);\n    const endLineOffset = rep.lines.offsetOfIndex(nextLine);\n\n    // lineLength without \\n\n    const lineLength = endLineOffset - startLineOffset - 1;\n\n    return lineLength;\n  };\n\n  return {\n    addTextOnClipboard,\n    getLinkIdOnFirstPositionSelected,\n    hasLinkOnSelection,\n    saveLinks,\n  };\n})();\n","'use strict'\r\n\r\nconst { filter } = require(\"ep_etherpad-lite/static/js/underscore\");\r\n\r\nconst linkBoxes = (() => {\r\n\tlet padOuter;\r\n\tconst getPadOuter = () =>\r\n\t\t(padOuter = padOuter || $('iframe[name=\"ace_outer\"]').contents());\r\n\r\n\tconst getLinksContainer = () => getPadOuter().find(\"#linkBoxWrapper\");\r\n\r\n\t/* ***** Public methods: ***** */\r\n\r\n\tconst showLink = (linkId) => getLinksContainer().find(`#${linkId}`).show();\r\n\r\n\tconst hideLink = (linkId) => {\r\n\t\tgetLinksContainer().find(`#${linkId}`).hide();\r\n\t\tpadOuter.find(`#show-form-${linkId}`).show();\r\n\t\tpadOuter.find(`#edit-form-${linkId}`).hide();\r\n\t};\r\n\r\n\tconst hideAllLinks = () => getLinksContainer().find(`.link-container`).hide();\r\n\r\n\tconst showLinkModal = (e, linkObj, socket) => {\r\n\t\tconst padOuter = $('iframe[name=\"ace_outer\"]').contents();\r\n\t\tconst padInner = getPadOuter().find('iframe[name=\"ace_inner\"]');\r\n\t\tconst linkId = linkObj.linkId;\r\n\t\tconst linkModalAppended =\r\n\t\t\tgetLinksContainer().find(`#${linkId}`).length === 0 ? false : true;\r\n\r\n\t\thideAllLinks();\r\n\r\n\t\t// find link modal, if does not exist create a link modal\r\n\t\tlet linkModal = getLinksContainer().find(`#${linkId}`);\r\n\t\tif (!linkModalAppended)\r\n\t\t\tlinkModal = $(\"#linkBoxTemplate\").tmpl({ ...linkObj });\r\n\r\n\t\t// apppend modal position! where it want appear\r\n\t\tlet targetLeft = e.clientX;\r\n\t\ttargetLeft += padInner.offset().left;\r\n\t\tlet targetTop = $(e.target).offset().top;\r\n\t\ttargetTop += parseInt(padInner.css(\"padding-top\").split(\"px\")[0]);\r\n\t\ttargetTop += parseInt(\r\n\t\t\tpadOuter.find(\"#outerdocbody\").css(\"padding-top\").split(\"px\")[0]\r\n\t\t);\r\n\r\n\t\tlinkModal.css({ width: \"324px\" }); // because of need to determine exact size for putting best area\r\n\t\tlinkModal.css({ left: `${parseInt(targetLeft)}px` });\r\n\t\tlinkModal.css({ top: `${parseInt(targetTop) + 35}px` });\r\n\t\tlinkModal.addClass(\"hyperlink-display\");\r\n\r\n\t\tconst loaded = linkModal.attr(\"data-loaded\");\r\n\r\n\t\t// if the linkModal was not appended, create a modal and append it to #linkBoxWrapper\r\n\t\tif (!linkModalAppended) {\r\n\t\t\tpadOuter.find(\"#linkBoxWrapper\").append(linkModal);\r\n\t\t} else {\r\n\t\t\t// if the modal was exist update text and hypertext\r\n\t\t\tlinkModal.show();\r\n\t\t\t// if the old hyperlink was not same as new hyperlink\r\n\t\t\tif (linkObj.hyperlink !== linkModal.find(\"a.ep_hyperlink_title\").attr(\"href\")) {\r\n\t\t\t\tlinkModal.attr(\"data-loaded\", \"false\");\r\n\t\t\t}\r\n\r\n\t\t\tlinkModal.attr(\"data-hyperlink\", linkObj.hyperlink);\r\n\t\t\tlinkModal.find(\"input#hyperlink-url\").val(linkObj.hyperlink);\r\n\r\n\t\t\tlinkModal.find(\"a.ep_hyperlink_title\").attr({\r\n\t\t\t\ttitle: linkObj.hyperlink,\r\n\t\t\t\thref: linkObj.hyperlink,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// If the text we saved has changed and is different from the contents of the pad\r\n\t\tconst text = padInner.contents().find(`.${linkId}`).text()\r\n\t\tlinkModal.find(\"input#hyperlink-text-hidden\").val(text);\r\n\t\tlinkModal.find(\"input#hyperlink-text\").val(text);\r\n\r\n\t\t// TODO: 1/ hyperlink for social and\r\n\t\t// TODO: 2/ inside link\r\n\t\tif (loaded != \"true\") {\r\n\t\t\tlet hyperlink = linkObj.hyperlink || linkModal.attr(\"data-hyperlink\");\r\n\t\t\tconsole.log(hyperlink)\r\n\t\t\tlet dividedUrl;\r\n\t\t\ttry {\r\n\t\t\t\tdividedUrl = new URL(hyperlink);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`[hyperlink]: ${error}`);\r\n\t\t\t\tlinkBoxes.hideLink(linkId);\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tconst ep_hyperlink_img = linkModal.find(\"#ep_hyperlink_img\");\r\n\t\t\tconst ep_hyperlink_title = linkModal.find(\"a.ep_hyperlink_title\");\r\n\t\t\tconst card_loading_hyperlink = linkModal.find(\"#card_loading_hyperlink\");\r\n\t\t\tconst ep_hyperlink_description = linkModal.find(\r\n\t\t\t\t\"#ep_hyperlink_description\"\r\n\t\t\t);\r\n\r\n\t\t\tep_hyperlink_description.text(\"\");\r\n\t\t\tep_hyperlink_title.text(hyperlink);\r\n\r\n\t\t\tep_hyperlink_img.hide();\r\n\t\t\tep_hyperlink_title.show();\r\n\t\t\tcard_loading_hyperlink.show();\r\n\r\n\t\t\t// raise for og:title resolving\r\n\r\n\t\t\tif (!/^http:\\/\\//.test(hyperlink) && !/^https:\\/\\//.test(hyperlink)) {\r\n\t\t\t\thyperlink = `https://${hyperlink}`;\r\n\t\t\t}\r\n\r\n\t\t\tconst changeMetaView = function (hyperlink, title, image) {\r\n\t\t\t\tep_hyperlink_img.attr(\"src\", image);\r\n\t\t\t\tep_hyperlink_img.on(\"load\", () => {\r\n\t\t\t\t\tcard_loading_hyperlink.fadeOut(500, () => {\r\n\t\t\t\t\t\tep_hyperlink_img.fadeIn();\r\n\t\t\t\t\t\tep_hyperlink_title.text(\r\n\t\t\t\t\t\t\ttitle.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, \"\")\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tep_hyperlink_description.text(\r\n\t\t\t\t\t\t\thyperlink.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, \"\")\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tlinkModal.attr({ \"data-loaded\": true });\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif (!validUrl.isUri(hyperlink)) {\r\n\t\t\t\tconst img =\r\n\t\t\t\t\t\"../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png\";\r\n\t\t\t\tchangeMetaView(hyperlink, hyperlink, img);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// ........\r\n\t\t\tconst metaResolverCallBack = function (result) {\r\n\r\n\t\t\t\tif (result.metadata.image && result.metadata.title) {\r\n\t\t\t\t\tchangeMetaView(\r\n\t\t\t\t\t\thyperlink,\r\n\t\t\t\t\t\tresult.metadata.title,\r\n\t\t\t\t\t\tresult.metadata.image\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar editedHyperlink = `https://${dividedUrl.hostname}`;\r\n\t\t\t\t\tif (result.last !== true) {\r\n\t\t\t\t\t\tsocket.emit(\r\n\t\t\t\t\t\t\t\"metaResolver\",\r\n\t\t\t\t\t\t\t{ padId: clientVars.padId, editedHyperlink, last: true },\r\n\t\t\t\t\t\t\tmetaResolverCallBack\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchangeMetaView(\r\n\t\t\t\t\t\t\thyperlink,\r\n\t\t\t\t\t\t\tresult.metadata.title || hyperlink,\r\n\t\t\t\t\t\t\t\"../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t// ........\r\n\t\t\tswitch (dividedUrl.hostname) {\r\n\t\t\t\tcase \"twitter.com\":\r\n\t\t\t\t\tchangeMetaView(\r\n\t\t\t\t\t\thyperlink,\r\n\t\t\t\t\t\thyperlink,\r\n\t\t\t\t\t\t\"../static/plugins/ep_full_hyperlinks/static/dist/img/twitter.png\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tsocket.emit(\r\n\t\t\t\t\t\t\"metaResolver\",\r\n\t\t\t\t\t\t{ padId: clientVars.padId, hyperlink, last: false },\r\n\t\t\t\t\t\tmetaResolverCallBack\r\n\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// Indicates if event was on one of the elements that does not close link\r\n\tconst shouldNotCloseLink = function (e) {\r\n\t\t// a link box\r\n\t\tif (\r\n\t\t\t$(e.target).closest(\".link\").length ||\r\n\t\t\t$(e.target).closest(\".link-modal\").length ||\r\n\t\t\t$(e.target).closest(\".ep_hyperlink_docs_bubble_button_edit\").length ||\r\n\t\t\t$(e.target).closest(\".ep_hyperlink_docs_bubble_button_delete\").length ||\r\n\t\t\t$(e.target).closest(\".ep_hyperlink_docs_bubble_button_copy\").length ||\r\n\t\t\t$(e.target).closest(\".full-display-link\").length ||\r\n\t\t\t$(e.target).closest(\".link-title-wrapper\").length ||\r\n\t\t\t$(e.target).closest(\".link-edit-form\").length ||\r\n\t\t\t$(e.target).closest(\".link-text-text\").length ||\r\n\t\t\t$(e.target).closest(\".link-text-hyperlink\").length\r\n\t\t) {\r\n\t\t\t// the link modal\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tconst isLinkInternal = (url) => {\r\n\t\tconst internalPathIs = `${location.origin}${location.pathname}`;\r\n\t\tconst incomeURL = new URL(url);\r\n\t\tconst incomPath = `${incomeURL.origin}${incomeURL.pathname}`;\r\n\r\n\t\tlet result = internalPathIs === incomPath ? true : false;\r\n\r\n\t\t// check if the income url related to filter url\r\n\r\n\t\tif(incomeURL.origin === location.origin){\r\n\t\t\t// does have p\r\n\t\t\tconst doesPInURL = location.pathname.split('/').indexOf('p') > 0;\r\n\t\t\tconst padName = clientVars.padId;\r\n\t\t\tconst padMainPathname = doesPInURL ? `/p/${padName}` : `/${padName}`;\r\n\t\t\t// check if the income url pad name is the same current pad name\r\n\t\t\tif(location.pathname.substring(0, padMainPathname.length) === padMainPathname) result = true\r\n\t\t}\r\n\r\n\t\t// does single pad active\r\n\t\tif(clientVars.ep_singlePad.active) result = true\r\n\r\n\t\treturn result\r\n\t}\r\n\r\n\tconst doesLinkHaveFilter = (url) => {\r\n\t\tconst result = [];\r\n\t\tconst padName = clientVars.padId;\r\n\r\n\t\tconst currentPathname = url.pathname.split(\"/\");\r\n\r\n\t\tlet padNameIndex = currentPathname.indexOf(padName) + 1;\r\n\r\n\t\tif(clientVars.ep_singlePad.active) padNameIndex = 0;\r\n\r\n\t\tconst filters = [...currentPathname].splice(padNameIndex, currentPathname.length - 1);\r\n\r\n\t\tresult.push(...filters);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// internal link\r\n\t// other plugin must listen for pushstate to get new data and excute they part.\r\n\tconst internalLinkClick = function (event) {\r\n\t\tevent.preventDefault();\r\n\t\tevent.stopPropagation();\r\n\t\tconst href = $(this).attr('href');\r\n\r\n\t\tif(isLinkInternal(href)){\r\n\t\t\tconst incomeURL = new URL(href);\r\n\t\t\tlet targetPath = `${incomeURL.search}`\r\n\t\t\tconst filters = doesLinkHaveFilter(incomeURL);\r\n\r\n\t\t\tif(filters.length>0){\r\n\t\t\t\tconst doesPInURL = location.pathname.split('/').indexOf('p') > 0;\r\n\t\t\t\ttargetPath = doesPInURL ? '/p': '';\r\n\t\t\t\tif(!clientVars.ep_singlePad.active) targetPath += `/${clientVars.padId}`;\r\n\t\t\t\ttargetPath += `/${filters.join('/')}${incomeURL.search}`;\r\n\t\t\t}\r\n\r\n\t\t\tif(incomeURL.search.length===0) targetPath = href;\r\n\t\t\r\n\t\t\twindow.history.pushState({type: \"hyperLink\", href}, document.title, targetPath);\r\n\t\t}else {\r\n\t\t\twindow.open(href, '_blank');\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn {\r\n\t\tshowLink,\r\n\t\thideLink,\r\n\t\thideAllLinks,\r\n\t\tshowLinkModal,\r\n\t\tgetLinksContainer,\r\n\t\tshouldNotCloseLink,\r\n\t\tinternalLinkClick,\r\n\t};\r\n})();\r\n","'use strict';\n\nconst newLink = (() => {\n  // Create a link object with data filled on the given form\n  const buildLinkFrom = (form) => {\n    const text = form.find('#hyperlink-text').val();\n    const oldText = form.find('#hyperlink-text-hidden').val();\n    let hyperlink = form.find('#hyperlink-url').val();\n\n    return {\n      text,\n      oldText,\n      hyperlink,\n    };\n  };\n\n  // Callback for new link Cancel\n  const cancelNewLink = () => hideNewLinkPopup();\n\n  // Callback for new link Submit\n  const submitNewLink = function (callback) {\n    const index = 0;\n    const form = $(document).find('#newLink');\n    const link = buildLinkFrom(form);\n    if (link.text.length > 0 && validUrl.isUri(link.hyperlink)) {\n      form.find('#hyperlink-text, #hyperlink-url').removeClass('error');\n      hideNewLinkPopup();\n      callback(link, index);\n    } else {\n      if (link.text.length === 0) form.find('#hyperlink-text').addClass('error');\n      if (!validUrl.isUri(link.hyperlink)) form.find('#hyperlink-url').addClass('error');\n    }\n    return false;\n  };\n\n  /* ***** Public methods: ***** */\n\n  // Insert new Link Form\n  const insertNewLinkPopupIfDontExist = (link, callback) => {\n    $('#newLink').remove();\n    link.linkId = '';\n    const newLinkPopup = $('#newLinkTemplate').tmpl(link);\n    newLinkPopup.appendTo($('#editorcontainerbox'));\n\n    // Cancel btn\n    $('#newLink #link-cancel-btn').on('click', (e) => cancelNewLink());\n\n    // Create btn // link-create-btn\n    $('#newLink #link-create-btn').on('click', (e) => submitNewLink(callback));\n\n    return newLinkPopup;\n  };\n\n  const showNewLinkPopup = () => {\n    // position below link icon\n    $('#newLink').css('left', $('.toolbar .addLink').offset().left);\n\n    // Reset form to make sure it is all clear\n    $('#newLink').find('textarea').val('');\n    $('#newLink').find('.link-content, .to-value').removeClass('error');\n\n    // Show popup\n    $('#newLink').addClass('popup-show');\n\n    // mark selected text, so it is clear to user which text range the link is being applied to\n    pad.plugins.ep_full_hyperlinks.preLinkMarker.markSelectedText();\n\n    // focus on hyperlink input\n\n    setTimeout(() => {\n      $('#newLink').find('.link-content').focus().select();\n    }, 500);\n  };\n\n  const hideNewLinkPopup = () => {\n    $('#newLink').removeClass('popup-show');\n\n    // force focus to be lost, so virtual keyboard is hidden on mobile devices\n    $('#newLink').find(':focus').blur();\n\n    // unmark selected text, as now there is no text being linked\n    pad.plugins.ep_full_hyperlinks.preLinkMarker.unmarkSelectedText();\n  };\n\n  return {\n    // localizenewLinkPopup,\n    insertNewLinkPopupIfDontExist,\n    showNewLinkPopup,\n    hideNewLinkPopup,\n  };\n})();\n","'use strict';\n\nconst preLinkMark = (() => {\n  const MARK_CLASS = 'pre-selected-link';\n\n  const preLinkMarker = function (ace) {\n    this.ace = ace;\n    const self = this;\n\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    // remove any existing marks, as there is no link being added on plugin initialization\n    // (we need the timeout to let the plugin be fully initialized before starting to remove\n    // marked texts)\n    setTimeout(() => {\n      self.unmarkSelectedText();\n    }, 0);\n  };\n\n  // Indicates if Etherpad is configured to highlight text\n  preLinkMarker.prototype.highlightSelectedText = function () {\n    return clientVars.highlightSelectedText;\n  };\n\n  preLinkMarker.prototype.markSelectedText = function () {\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    this.ace.callWithAce(doNothing, 'markPreSelectedTextToLink', true);\n  };\n\n  preLinkMarker.prototype.unmarkSelectedText = function () {\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    this.ace.callWithAce(doNothing, 'unmarkPreSelectedTextToLink', true);\n  };\n\n  preLinkMarker.prototype.performNonUnduableEvent = function (eventType, callstack, action) {\n    callstack.startNewEvent('nonundoable');\n    action();\n    callstack.startNewEvent(eventType);\n  };\n\n  preLinkMarker.prototype.handleMarkText = function (context) {\n    const editorInfo = context.editorInfo;\n    const rep = context.rep;\n    const callstack = context.callstack;\n\n    // first we need to unmark any existing text, otherwise we'll have 2 text ranges marked\n    this.removeMarks(editorInfo, rep, callstack);\n\n    this.addMark(editorInfo, callstack);\n  };\n\n  preLinkMarker.prototype.handleUnmarkText = function (context) {\n    const editorInfo = context.editorInfo;\n    const rep = context.rep;\n    const callstack = context.callstack;\n\n    this.removeMarks(editorInfo, rep, callstack);\n  };\n\n  preLinkMarker.prototype.addMark = function (editorInfo, callstack) {\n    const eventType = callstack.editEvent.eventType;\n\n    // we don't want the text marking to be undoable\n    this.performNonUnduableEvent(eventType, callstack, () => {\n      editorInfo.ace_setAttributeOnSelection(MARK_CLASS, clientVars.userId);\n    });\n  };\n\n  preLinkMarker.prototype.removeMarks = function (editorInfo, rep, callstack) {\n    const eventType = callstack.editEvent.eventType;\n    const originalSelStart = rep.selStart;\n    const originalSelEnd = rep.selEnd;\n\n    // we don't want the text marking to be undoable\n    this.performNonUnduableEvent(eventType, callstack, () => {\n      // remove marked text\n      const padInner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\n      const selector = `.${MARK_CLASS}`;\n      const repArr = editorInfo.ace_getRepFromSelector(selector, padInner);\n      // repArr is an array of reps\n      $.each(repArr, (index, rep) => {\n        editorInfo.ace_performSelectionChange(rep[0], rep[1], true);\n        editorInfo.ace_setAttributeOnSelection(MARK_CLASS, false);\n      });\n\n      // make sure selected text is back to original value\n      editorInfo.ace_performSelectionChange(originalSelStart, originalSelEnd, true);\n    });\n  };\n\n  // we do nothing on callWithAce; actions will be handled on aceEditEvent\n  const doNothing = () => {};\n\n  const init = (ace) => new preLinkMarker(ace);\n\n  return {\n    MARK_CLASS,\n    init,\n  };\n})();\n","const shared = (() => {\n  const collectContentPre = (hook, context) => {\n    const link = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(context.cls);\n    const fakeLink = /(?:^| )(fakelink-[A-Za-z0-9]*)/.exec(context.cls);\n\n    if (link && link[1]) {\n      context.cc.doAttrib(context.state, `link::${link[1]}`);\n    }\n\n    // a fake link is a link copied from this or another pad. To avoid conflicts\n    // with existing links, a fake linkId is used, so then we generate a new one\n    // when the link is saved\n    if (fakeLink) {\n      const mapFakeLinks = pad.plugins.ep_full_hyperlinks.getMapfakeLinks();\n      const fakeLinkId = fakeLink[1];\n      const linkId = mapFakeLinks[fakeLinkId];\n      context.cc.doAttrib(context.state, `link::${linkId}`);\n    }\n\n    return [];\n  };\n\n  const generateLinkId = function () {\n    const linkId = `lc-${randomString(16)}`;\n    return linkId;\n  };\n\n  return {\n    collectContentPre,\n    generateLinkId,\n  };\n})();\n"]}