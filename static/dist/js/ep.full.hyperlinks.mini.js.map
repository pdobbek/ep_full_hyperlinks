{"version":3,"sources":["copyPasteEvents.js","linkBoxes.js","linkIcons.js","linkL10n.js","newLink.js","preLinkMark.js","timeFormat.js","shared.js"],"names":["exports","moduleList","randomString","require","_","events","getReplyData","replies","linkIds","replyData","each","linkId","extend","getRepliesFromLinkId","repliesFromLinkID","reply","replyId","replaceLinkIdsWithFakeIds","linksData","html","linkIdToFakeId","link","fakeLinkId","data","originalLinkId","buildLinkIdToFakeIdMap","$","find","removeClass","addClass","getHtml","buildLinksData","links","originalLinkIds","getLinkIds","generateFakeLinkId","allSpans","span","cls","attr","classLinkId","exec","push","uniq","createHiddenDiv","range","content","cloneContents","div","document","createElement","hiddenDiv","selectionHasOnlyText","rawHtml","htmlDecode","text","buildHtmlToCopyWhenSelectionHasOnlyText","htmlWithSpans","buildHtmlWithTwoSpanTags","buildHtmlWithFormattingTagsOfSelection","parseHTML","htmlOfParentNode","commonAncestorContainer","parentNode","tags","getTagsInSelection","buildOpenTags","buildCloseTags","slice","openTags","forEach","tag","closeTags","reverse","htmlObject","hasOwnProperty","localName","prop","stylingTagRegex","parent","saveLinks","console","log","linksToSave","padId","clientVars","mapOriginalLinksId","pad","plugins","ep_full_hyperlinks","mapFakeLinks","buildLinkData","newLinkId","shared","generateLinkId","saveLinkWithoutSelection","saveReplies","repliesToSave","saveLinkReplies","linkData","input","e","innerHTML","childNodes","length","nodeValue","hasLinkOnMultipleLineSelection","firstLineOfSelection","lastLineOfSelection","rep","attributeManager","foundLineWithLink","line","firstColumn","getFirstColumnOfSelection","lastColumn","getLastColumnOfSelection","hasLinkOnLine","selStart","lastColumnOfSelection","getLength","selEnd","lineNumber","foundLinkOnLine","column","undefined","object","getAttributesOnPosition","hasMultipleLineSelected","nextLine","startLineOffset","lines","offsetOfIndex","addTextOnClipboard","ace","padInner","removeSelection","linkIdOnFirstPositionSelected","hasLinkOnSelection","callWithAce","ace_getLinkIdOnFirstPositionSelected","ace_hasLinkOnSelection","contents","getSelection","getRangeAt","textSelected","textContent","htmlToCopy","JSON","stringify","originalEvent","clipboardData","setData","preventDefault","execCommand","saveLinksAndReplies","getData","parse","pastedData","window","pastedDataHtml","pastedHtmlHolderElemenet","allLinksElement","getElementsByTagName","allLinksData","eachElemenet","tempHyperLink","href","tempHyperLinkText","className","id","author","timestamp","Date","getTime","hyperlink","headerId","date","formattedDate","append","clone","RegExp","test","matches","match","allLinks","result","indexOf","openTag","join","replace","getLinkIdOnFirstPositionSelected","this","documentAttributeManager","hasLink","linkBoxes","padOuter","getPadOuter","getLinksContainer","highlightLink","editorLink","socket","container","linkElm","inner","remove","hasClass","hide","show","css","top","parseInt","split","width","loaded","targetLeft","clientX","offset","left","targetTop","target","dividedUrl","URL","ep_hyperlink_title","ep_hyperlink_img","ep_hyperlink_description","card_loading_hyperlink","changeMetaView","title","image","on","fadeOut","fadeIn","data-loaded","str","metaResolverCallBack","metadata","editedHyperlink","hostname","last","emit","showLink","hideLink","hideLinkTitle","hideAllLinks","adjustTopOf","baseTop","linkElement","isOnTop","expectedTop","shouldNotCloseLink","closest","linkIcons","displayIcons","displayLinkAsIcon","getPadInner","getOrCreateIconsContainerAt","iconContainer","iconClass","iconsAtLine","targetLinkIdOf","currentTarget","getAttribute","removeHighlightTargetText","toggleActiveLinkIcon","toggleClass","addListenersToLinkIcons","highlightTargetTextOf","allActiveIcons","closeOpenedLinkIfNotOnSelectedElements","openedLink","findOpenedLink","get","insertContainer","after","addIcon","offsetTop","tmpl","appendTo","hideIcons","children","icon","isLinkOpenedByClickOnIcon","linkHasReply","shouldShow","sidebarComent","shouldShowLink","linkL10n","localize","element","html10n","translateElement","translations","newLink","validURL","localizenewLinkPopup","newLinkPopup","insertNewLinkPopupIfDontExist","callback","change","toggle","is","hideNewLinkPopup","form","val","oldText","changeFrom","changeTo","buildLinkFrom","submitNewLink","showNewLinkPopup","trigger","preLinkMarker","markSelectedText","setTimeout","focus","select","blur","unmarkSelectedText","preLinkMark","MARK_CLASS","self","highlightSelectedText","prototype","doNothing","performNonUnduableEvent","eventType","callstack","action","startNewEvent","handleMarkText","context","editorInfo","removeMarks","addMark","handleUnmarkText","editEvent","ace_setAttributeOnSelection","userId","originalSelStart","originalSelEnd","repArr","ace_getRepFromSelector","index","ace_performSelectionChange","init","timeFormat","localizable","l10nKeys","seconds","1 minute ago","minutes","1 hour ago","hours","yesterday","days","last week","weeks","last month","months","last year","years","last century","centuries","time_formats","prettyDate","time","token","list_choice","l10n_appendix","Math","abs","format","i","count","floor","formatted_time","key","collectContentPre","hook","fakeLink","cc","doAttrib","state","getMapfakeLinks"],"mappings":"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","file":"ep.full.hyperlinks.mini.js","sourcesContent":["const events = (() => {\n\n\tconst addTextOnClipboard = function (e, ace, padInner, removeSelection, links, replies) {\n\t\tlet linkIdOnFirstPositionSelected;\n\t\tlet hasLinkOnSelection;\n\t\tace.callWithAce((ace) => {\n\t\t\tlinkIdOnFirstPositionSelected = ace.ace_getLinkIdOnFirstPositionSelected();\n\t\t\thasLinkOnSelection = ace.ace_hasLinkOnSelection();\n\t\t});\n\t\n\t\tif (hasLinkOnSelection) {\n\t\t\tlet linksData;\n\t\t\tconst range = padInner.contents()[0].getSelection().getRangeAt(0);\n\t\t\tconst rawHtml = createHiddenDiv(range);\n\t\t\tlet html = rawHtml;\n\t\t\tconst onlyTextIsSelected = selectionHasOnlyText(rawHtml);\n\t\n\t\t\t// when the range selection is fully inside a tag, 'rawHtml' will have no HTML tag, so we have to\n\t\t\t// build it. Ex: if we have '<span>ab<b>cdef</b>gh</span>\" and user selects 'de', the value of\n\t\t\t// 'rawHtml' will be 'de', not '<b>de</b>'. As it is not possible to have two links in the same text\n\t\t\t// linkIdOnFirstPositionSelected is the linkId in this partial selection\n\t\t\tif (onlyTextIsSelected) {\n\t\t\t\tconst textSelected = rawHtml[0].textContent;\n\t\t\t\thtml = buildHtmlToCopyWhenSelectionHasOnlyText(textSelected, range, linkIdOnFirstPositionSelected);\n\t\t\t}\n\t\t\tconst linkIds = getLinkIds(html);\n\t\t\tlinksData = buildLinksData(html, links);\n\t\t\tconst htmlToCopy = replaceLinkIdsWithFakeIds(linksData, html);\n\t\t\tlinksData = JSON.stringify(linksData);\n\t\t\tlet replyData = getReplyData(replies, linkIds);\n\t\t\treplyData = JSON.stringify(replyData);\n\t\t\te.originalEvent.clipboardData.setData('text/objectReply', replyData);\n\t\t\te.originalEvent.clipboardData.setData('text/objectLink', linksData);\n\t\t\t// here we override the default copy behavior\n\t\t\te.originalEvent.clipboardData.setData('text/html', htmlToCopy);\n\t\t\te.preventDefault();\n\t\n\t\t\t// if it is a cut event we have to remove the selection\n\t\t\tif (removeSelection) {\n\t\t\t\tpadInner.contents()[0].execCommand('delete');\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvar getReplyData = function (replies, linkIds) {\n\t\tlet replyData = {};\n\t\t_.each(linkIds, (linkId) => {\n\t\t\treplyData = _.extend(getRepliesFromLinkId(replies, linkId), replyData);\n\t\t});\n\t\treturn replyData;\n\t};\n\t\n\tvar getRepliesFromLinkId = function (replies, linkId) {\n\t\tconst repliesFromLinkID = {};\n\t\t_.each(replies, (reply, replyId) => {\n\t\t\tif (reply.linkId === linkId) {\n\t\t\t\trepliesFromLinkID[replyId] = reply;\n\t\t\t}\n\t\t});\n\t\treturn repliesFromLinkID;\n\t};\n\t\n\tvar buildLinkIdToFakeIdMap = function (linksData) {\n\t\tconst linkIdToFakeId = {};\n\t\t_.each(linksData, (link, fakeLinkId) => {\n\t\t\tconst linkId = link.data.originalLinkId;\n\t\t\tlinkIdToFakeId[linkId] = fakeLinkId;\n\t\t});\n\t\treturn linkIdToFakeId;\n\t};\n\t\n\tvar replaceLinkIdsWithFakeIds = function (linksData, html) {\n\t\tconst linkIdToFakeId = buildLinkIdToFakeIdMap(linksData);\n\t\t_.each(linkIdToFakeId, (fakeLinkId, linkId) => {\n\t\t\t$(html).find(`.${linkId}`).removeClass(linkId).addClass(fakeLinkId);\n\t\t});\n\t\tconst htmlWithFakeLinkIds = getHtml(html);\n\t\treturn htmlWithFakeLinkIds;\n\t};\n\t\n\tvar buildLinksData = function (html, links) {\n\t\tconst linksData = {};\n\t\tconst originalLinkIds = getLinkIds(html);\n\t\t_.each(originalLinkIds, (originalLinkId) => {\n\t\t\tconst fakeLinkId = generateFakeLinkId();\n\t\t\tconst link = links[originalLinkId];\n\t\t\tlink.data.originalLinkId = originalLinkId;\n\t\t\tlinksData[fakeLinkId] = link;\n\t\t});\n\t\treturn linksData;\n\t};\n\t\n\tvar generateFakeLinkId = function () {\n\t\tconst linkId = `fakelink-${randomString(16)}`;\n\t\treturn linkId;\n\t};\n\n\tvar getLinkIds = function (html) {\n\t\tconst allSpans = $(html).find('span');\n\t\tconst linkIds = [];\n\t\t_.each(allSpans, (span) => {\n\t\t\tconst cls = $(span).attr('class');\n\t\t\tconst classLinkId = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(cls);\n\t\t\tconst linkId = (classLinkId) ? classLinkId[1] : false;\n\t\t\tif (linkId) {\n\t\t\t\tlinkIds.push(linkId);\n\t\t\t}\n\t\t});\n\t\tconst uniqueLinkIds = _.uniq(linkIds);\n\t\treturn uniqueLinkIds;\n\t};\n\tvar getLinkIdsFromA = function (html) {\n\t\tconst allElem = $(html).find('a');\n\t\tconst linkIds = [];\n\t\t_.each(allElem, (a) => {\n\t\t\tconst cls = $(a).attr('class');\n\t\t\tconst classLinkId = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(cls);\n\t\t\tconst linkId = (classLinkId) ? classLinkId[1] : false;\n\t\t\tif (linkId) {\n\t\t\t\tlinkIds.push(linkId);\n\t\t\t}\n\t\t});\n\t\tconst uniqueLinkIds = _.uniq(linkIds);\n\t\treturn uniqueLinkIds;\n\t};\n\t\n\tvar createHiddenDiv = function (range) {\n\t\tconst content = range.cloneContents();\n\t\tconst div = document.createElement('div');\n\t\tconst hiddenDiv = $(div).html(content);\n\t\treturn hiddenDiv;\n\t};\n\t\n\tvar getHtml = function (hiddenDiv) {\n\t\treturn $(hiddenDiv).html();\n\t};\n\t\n\tvar selectionHasOnlyText = function (rawHtml) {\n\t\tconst html = getHtml(rawHtml);\n\t\tconst htmlDecoded = htmlDecode(html);\n\t\tconst text = $(rawHtml).text();\n\t\treturn htmlDecoded === text;\n\t};\n\t\n\tvar buildHtmlToCopyWhenSelectionHasOnlyText = function (text, range, linkId) {\n\t\tconst htmlWithSpans = buildHtmlWithTwoSpanTags(text, linkId);\n\t\tconst html = buildHtmlWithFormattingTagsOfSelection(htmlWithSpans, range);\n\t\n\t\tconst htmlToCopy = $.parseHTML(`<div>${html}</div>`);\n\t\treturn htmlToCopy;\n\t};\n\t\n\tvar buildHtmlWithFormattingTagsOfSelection = function (html, range) {\n\t\tconst htmlOfParentNode = range.commonAncestorContainer.parentNode;\n\t\tconst tags = getTagsInSelection(htmlOfParentNode);\n\t\n\t\t// this case happens when we got a selection with one or more styling (bold, italic, underline, strikethrough)\n\t\t// applied in all selection in the same range. For example, <b><i><u>text</u></i></b>\n\t\tif (tags) {\n\t\t\thtml = buildOpenTags(tags) + html + buildCloseTags(tags);\n\t\t}\n\t\n\t\treturn html;\n\t};\n\t\n\t// FIXME - Allow to copy a link when user copies only one char\n\t// This is a hack to preserve the link classes when user pastes a link. When user pastes a span like this\n\t// <span class='link c-124'>thing</span>, chrome removes the classes and keeps only the style of the class. With links\n\t// chrome keeps the background-color. To avoid this we create two spans. The first one, <span class='link c-124'>thi</span>\n\t// has the text until the last but one character and second one with the last character <span class='link c-124'>g</span>.\n\t// Etherpad does a good job joining the two spans into one after the paste is triggered.\n\tvar buildHtmlWithTwoSpanTags = function (text, linkId) {\n\t\tconst firstSpan = `<span class=\"link ${linkId}\">${text.slice(0, -1)}</span>`; // text until before last char\n\t\tconst secondSpan = `<span class=\"link ${linkId}\">${text.slice(-1)}</span>`; // last char\n\t\n\t\treturn firstSpan + secondSpan;\n\t};\n\t\n\tvar buildOpenTags = function (tags) {\n\t\tlet openTags = '';\n\t\ttags.forEach((tag) => {\n\t\t\topenTags += `<${tag}>`;\n\t\t});\n\t\treturn openTags;\n\t};\n\t\n\tvar buildCloseTags = function (tags) {\n\t\tlet closeTags = '';\n\t\tvar tags = tags.reverse();\n\t\ttags.forEach((tag) => {\n\t\t\tcloseTags += `</${tag}>`;\n\t\t});\n\t\treturn closeTags;\n\t};\n\t\n\tvar getTagsInSelection = function (htmlObject) {\n\t\tconst tags = [];\n\t\tlet tag;\n\t\tif ($(htmlObject)[0].hasOwnProperty('localName')) {\n\t\t\twhile ($(htmlObject)[0].localName !== 'span') {\n\t\t\t\tconst html = $(htmlObject).prop('outerHTML');\n\t\t\t\tconst stylingTagRegex = /<(b|i|u|s)>/.exec(html);\n\t\t\t\ttag = stylingTagRegex ? stylingTagRegex[1] : '';\n\t\t\t\ttags.push(tag);\n\t\t\t\thtmlObject = $(htmlObject).parent();\n\t\t\t}\n\t\t}\n\t\treturn tags;\n\t};\n\t\n\tconst saveLinksAndReplies = function (e,padInner) {\n\t\n\n\t\t\n\t\tlet links = e.originalEvent.clipboardData.getData('text/objectLink');\n\t\tlet replies = e.originalEvent.clipboardData.getData('text/objectReply');\n\t\t\n\t\tif (links && replies) {\n\t\t\tlinks = JSON.parse(links);\n\t\t\tconsole.log(links,\"links\")\n\t\t\treplies = JSON.parse(replies);\n\t\t\tsaveLinks(links);\n\t\t\tsaveReplies(replies);\n\t\t}else{\n\n\t\n\t\t\tvar clipboardData, pastedData;\n\t\t\tvar text = '';\n\n\t\t\tclipboardData = e.originalEvent.clipboardData || window.clipboardData;\n\t\t\tpastedData = clipboardData.getData('text');\n\t\t\tvar pastedDataHtml = clipboardData.getData('text/html');\n\t\t\tconst range = padInner.contents()[0].getSelection().getRangeAt(0);\n\n\t\t\tif (!range) return false;\n\n\t\t\tif (!pastedDataHtml){\n\t\t\t\tif(new RegExp(\"([a-zA-Z0-9]+://)?([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?([a-zA-Z0-9.-]+\\\\.[A-Za-z]{2,4})(:[0-9]+)?(/.*)?\").test(pastedData)) {\n\t\t\t\t\tvar expression = /(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/gi;\n\t\t\t\t\tvar matches = pastedData.match(expression);\n\t\t\t\t\tvar allLinks ={};\n\t\t\t\t\tif(matches){\n\t\t\t\t\t\tfor(match in matches.reverse()){ // because of characters position need to be fixed and going to add tags from end\n\t\t\t\t\t\t\tvar result = {};\n\t\t\t\t\t\t\tvar newLinkId = shared.generateLinkId();\n\t\t\t\t\t\t\tresult['link'] = matches[match];\n\t\t\n\t\t\t\t\t\t\t// allLinks.push(fakeLinkId)\n\t\t\t\t\t\t\tallLinks[newLinkId] ={\n\t\t\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\t\t\tauthor : \"empty\",\n\t\t\t\t\t\t\t\t\tlinkId : newLinkId,\n\t\t\t\t\t\t\t\t\treply : false ,\n\t\t\t\t\t\t\t\t\ttimestamp : new Date().getTime(),\n\t\t\t\t\t\t\t\t\ttext :  result['link'] ,\n\t\t\t\t\t\t\t\t\toriginalLinkId : newLinkId ,\n\t\t\t\t\t\t\t\t\thyperlink : result['link'] ,\n\t\t\t\t\t\t\t\t\theaderId : null,\n\t\t\t\t\t\t\t\t\tdate : new Date(),\n\t\t\t\t\t\t\t\t\tformattedDate : new Date(),\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tresult['startsAt'] = pastedData.indexOf(matches[match]);\n\t\t\t\t\t\t\tvar openTag = '<span id=\"'+newLinkId+'\" class=\"'+newLinkId+'\">' ;\n\t\t\t\t\t\t\tvar closeTag = '</span>'\n\t\t\t\t\t\t\tpastedData = [pastedData.slice(0, result['startsAt']), openTag, pastedData.slice(result['startsAt'])].join('');\n\t\t\t\t\t\t\tresult['endsAt'] = \tpastedData.indexOf(matches[match]) + matches[match].length;\n\t\t\t\t\t\t\tpastedData = [pastedData.slice(0, result['endsAt']), closeTag, pastedData.slice(result['endsAt'])].join('');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpastedData = pastedData.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\n\t\t\t\t\t\ttext = $('<div></div>').html(pastedData);\n\t\t\t\t\t\tpadInner.contents()[0].execCommand('insertHTML',false,$('<div>').append($(text).clone()).html());\n\t\t\t\t\t\tpad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(clientVars.padId, allLinks);\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t}\n\t\t\t}else{ // it means pasted in html \n\t\t\t\te.preventDefault();\n\t\t\t\tvar pastedHtmlHolderElemenet = document.createElement( 'div' );\n\t\t\t\tpastedHtmlHolderElemenet.innerHTML = pastedDataHtml;\n\t\t\t\tvar allLinksElement=pastedHtmlHolderElemenet.getElementsByTagName( 'a' );\n\t\t\t\tvar allLinksData ={};\n\t\t\t\t_.each(allLinksElement , (eachElemenet)=>{\n\t\t\t\t\tvar tempHyperLink =  eachElemenet.href ;\n\t\t\t\t\tvar tempHyperLinkText =  eachElemenet.innerHTML ;\n\t\t\t\t\tvar newLinkId = shared.generateLinkId();\n\t\t\t\t\teachElemenet.className = newLinkId\n\t\t\t\t\teachElemenet.id = newLinkId ;\n\t\t\t\t\tallLinksData[newLinkId] ={\n\t\t\t\t\t\tdata : {\n\t\t\t\t\t\t\tauthor : \"empty\",\n\t\t\t\t\t\t\tlinkId : newLinkId,\n\t\t\t\t\t\t\treply : false ,\n\t\t\t\t\t\t\ttimestamp : new Date().getTime(),\n\t\t\t\t\t\t\ttext :  tempHyperLinkText ,\n\t\t\t\t\t\t\toriginalLinkId : newLinkId ,\n\t\t\t\t\t\t\thyperlink : tempHyperLink ,\n\t\t\t\t\t\t\theaderId : null,\n\t\t\t\t\t\t\tdate : new Date(),\n\t\t\t\t\t\t\tformattedDate : new Date(),\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t})  \n\t\t\t\tpad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(clientVars.padId, allLinksData);\n\t\t\t\tpadInner.contents()[0].execCommand('insertHTML',false,$('<div>').append($(pastedHtmlHolderElemenet).clone()).html());\n\t\t\t}\n\t\t}\n\t};\n\t\n\tvar saveLinks = function (links) {\n\t\tconsole.log(\"saveLinks1\",links)\n\n\t\tconst linksToSave = {};\n\t\tconst padId = clientVars.padId;\n\t\n\t\tconst mapOriginalLinksId = pad.plugins.ep_full_hyperlinks.mapOriginalLinksId;\n\t\tconst mapFakeLinks = pad.plugins.ep_full_hyperlinks.mapFakeLinks;\n\t\n\t\t_.each(links, (link, fakeLinkId) => {\n\t\t\tconst linkData = buildLinkData(link, fakeLinkId);\n\t\t\tconst newLinkId = shared.generateLinkId();\n\t\t\tmapFakeLinks[fakeLinkId] = newLinkId;\n\t\t\tconst originalLinkId = link.data.originalLinkId;\n\t\t\tmapOriginalLinksId[originalLinkId] = newLinkId;\n\t\t\tlinksToSave[newLinkId] = link;\n\t\t});\n\t\tconsole.log(\"saveLinks2\",padId, linksToSave)\n\n\t\tpad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(padId, linksToSave);\n\t};\n\t\n\tvar saveReplies = function (replies) {\n\t\tconst repliesToSave = {};\n\t\tconst padId = clientVars.padId;\n\t\tconst mapOriginalLinksId = pad.plugins.ep_full_hyperlinks.mapOriginalLinksId;\n\t\t_.each(replies, (reply, replyId) => {\n\t\t\tconst originalLinkId = reply.linkId;\n\t\t\t// as the link copied has got a new linkId, we set this id in the reply as well\n\t\t\treply.linkId = mapOriginalLinksId[originalLinkId];\n\t\t\trepliesToSave[replyId] = reply;\n\t\t});\n\t\tpad.plugins.ep_full_hyperlinks.saveLinkReplies(padId, repliesToSave);\n\t};\n\t\n\tvar buildLinkData = function (link, fakeLinkId) {\n\t\tconst linkData = {};\n\t\tlinkData.padId = clientVars.padId;\n\t\tlinkData.link = link.data;\n\t\tlinkData.link.linkId = fakeLinkId;\n\t\treturn linkData;\n\t};\n\t\n\t// copied from https://css-tricks.com/snippets/javascript/unescape-html-in-js/\n\tvar htmlDecode = function (input) {\n\t\tconst e = document.createElement('div');\n\t\te.innerHTML = input;\n\t\treturn e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue;\n\t};\n\t\n\t// here we find the link id on a position [line, column]. This function is used to get the link id\n\t// of one line when there is ONLY text selected. E.g In the line with link, <span class='link...'>something</span>,\n\t// and user copies the text 'omethin'. The span tags are not copied only the text. So as the link is\n\t// applied on the selection we get the linkId using the first position selected of the line.\n\t// P.S: It's not possible to have two or more links when there is only text selected, because for each link\n\t// created it's generated a <span> and to copy only the text it MUST NOT HAVE any tag on the selection\n\tconst getLinkIdOnFirstPositionSelected = function () {\n\t\tconst attributeManager = this.documentAttributeManager;\n\t\tconst rep = this.rep;\n\t\tconst linkId = _.object(attributeManager.getAttributesOnPosition(rep.selStart[0], rep.selStart[1])).link;\n\t\treturn linkId;\n\t};\n\t\n\tconst hasLinkOnSelection = function () {\n\t\tlet hasLink;\n\t\tconst attributeManager = this.documentAttributeManager;\n\t\tconst rep = this.rep;\n\t\tconst firstLineOfSelection = rep.selStart[0];\n\t\tconst firstColumn = rep.selStart[1];\n\t\tconst lastColumn = rep.selEnd[1];\n\t\tconst lastLineOfSelection = rep.selEnd[0];\n\t\tconst selectionOfMultipleLine = hasMultipleLineSelected(firstLineOfSelection, lastLineOfSelection);\n\t\n\t\tif (selectionOfMultipleLine) {\n\t\t\thasLink = hasLinkOnMultipleLineSelection(firstLineOfSelection, lastLineOfSelection, rep, attributeManager);\n\t\t} else {\n\t\t\thasLink = hasLinkOnLine(firstLineOfSelection, firstColumn, lastColumn, attributeManager);\n\t\t}\n\t\treturn hasLink;\n\t};\n\t\n\tvar hasLinkOnMultipleLineSelection = function (firstLineOfSelection, lastLineOfSelection, rep, attributeManager) {\n\t\tlet foundLineWithLink = false;\n\t\tfor (let line = firstLineOfSelection; line <= lastLineOfSelection && !foundLineWithLink; line++) {\n\t\t\tconst firstColumn = getFirstColumnOfSelection(line, rep, firstLineOfSelection);\n\t\t\tconst lastColumn = getLastColumnOfSelection(line, rep, lastLineOfSelection);\n\t\t\tconst hasLink = hasLinkOnLine(line, firstColumn, lastColumn, attributeManager);\n\t\t\tif (hasLink) {\n\t\t\t\tfoundLineWithLink = true;\n\t\t\t}\n\t\t}\n\t\treturn foundLineWithLink;\n\t};\n\t\n\tvar getFirstColumnOfSelection = function (line, rep, firstLineOfSelection) {\n\t\treturn line !== firstLineOfSelection ? 0 : rep.selStart[1];\n\t};\n\t\n\tvar getLastColumnOfSelection = function (line, rep, lastLineOfSelection) {\n\t\tlet lastColumnOfSelection;\n\t\tif (line !== lastLineOfSelection) {\n\t\t\tlastColumnOfSelection = getLength(line, rep); // length of line\n\t\t} else {\n\t\t\tlastColumnOfSelection = rep.selEnd[1] - 1; // position of last character selected\n\t\t}\n\t\treturn lastColumnOfSelection;\n\t};\n\t\n\tvar hasLinkOnLine = function (lineNumber, firstColumn, lastColumn, attributeManager) {\n\t\tlet foundLinkOnLine = false;\n\t\tfor (let column = firstColumn; column <= lastColumn && !foundLinkOnLine; column++) {\n\t\t\tconst linkId = _.object(attributeManager.getAttributesOnPosition(lineNumber, column)).link;\n\t\t\tif (linkId !== undefined) {\n\t\t\t\tfoundLinkOnLine = true;\n\t\t\t}\n\t\t}\n\t\treturn foundLinkOnLine;\n\t};\n\t\n\tvar hasMultipleLineSelected = function (firstLineOfSelection, lastLineOfSelection) {\n\t\treturn firstLineOfSelection !== lastLineOfSelection;\n\t};\n\t\n\tvar getLength = function (line, rep) {\n\t\tconst nextLine = line + 1;\n\t\tconst startLineOffset = rep.lines.offsetOfIndex(line);\n\t\tconst endLineOffset = rep.lines.offsetOfIndex(nextLine);\n\t\n\t\t// lineLength without \\n\n\t\tconst lineLength = endLineOffset - startLineOffset - 1;\n\t\n\t\treturn lineLength;\n\t};\n\n\treturn {\n\t\taddTextOnClipboard,\n\t\tsaveLinksAndReplies,\n\t\tgetLinkIdOnFirstPositionSelected,\n\t\thasLinkOnSelection,\n\n\t}\n})();\n","const linkBoxes = (() => {\n\n\n\tlet padOuter;\n\tconst getPadOuter = function() {\n\t\tpadOuter = padOuter || $('iframe[name=\"ace_outer\"]').contents();\n\t\treturn padOuter;\n\t}\n\n  const getLinksContainer = () => getPadOuter().find('#links');\n\n  /* ***** Public methods: ***** */\n\n  const showLink = function (linkId, e) {\n    const linkElm = getLinksContainer().find(`#${linkId}`);\n    linkElm.show();\n\n    highlightLink(linkId, e);\n  };\n\n  const hideLink = function (linkId, hideLinkTitle) {\n    const linkElm = getLinksContainer().find(`#${linkId}`);\n    if (linkElm.hasClass('hyperlink-display')) {\n      // linkElm.css({top:  parseInt(linkElm.css(\"top\").split('px')[0]) - 35 + \"px\"  })\n      linkElm.css({top: `${linkElm.attr('data-basetop')}px`});\n      linkElm.removeClass('hyperlink-display');\n      linkElm.css({width: '324px'});\n      padOuter.find(`#edit-form-${linkId}`).hide();\n      padOuter.find(`#show-form-${linkId}`).show();\n    }\n\n\n    // hide even the link title\n    // if (hideLinkTitle) linkElm.fadeOut();\n\n    const inner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\n    inner.contents().find('head .link-style').remove();\n\n    getPadOuter().find('.link-modal').removeClass('popup-show');\n  };\n\n  const hideAllLinks = function () {\n    // getLinksContainer().find('.sidebar-link').removeClass('full-display');\n    // getPadOuter().find('.link-modal').removeClass('popup-show');\n    const container = getLinksContainer();\n    const inner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\n\n    container.find('.sidebar-link').each(function () {\n      inner.contents().find('head .link-style').remove();\n      if ($(this).hasClass('hyperlink-display')) {\n        $(this).removeClass('hyperlink-display');\n        $(this).css({width: '324px'});\n        padOuter.find(`#edit-form-${$(this).attr('data-linkid')}`).hide();\n        padOuter.find(`#show-form-${$(this).attr('data-linkid')}`).show();\n        // $(this).css({top:  parseInt($(this).css(\"top\").split('px')[0]) - 35 + \"px\"  })\n\n        $(this).css({top: `${$(this).attr('data-basetop')}px`});\n      }\n    });\n  };\n  var validURL = function (str) {\n    var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n      '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n    return !!pattern.test(str);\n  };\n\n  var highlightLink = function (linkId, e, editorLink, socket, padId) {\n    const container = getLinksContainer();\n    const linkElm = container.find(`#${linkId}`);\n    var inner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\n    if (!linkElm.length) return ;\n    //if (container.is(':visible')) {\n      // hide all other links\n      container.find('.sidebar-link').each(function () {\n        inner.contents().find('head .link-style').remove();\n        if ($(this).attr('data-linkid') != linkId) {\n          if ($(this).hasClass('hyperlink-display')) {\n            $(this).removeClass('hyperlink-display');\n\n            // back to default showing\n            padOuter.find(`#edit-form-${$(this).attr('data-linkid')}`).hide();\n            padOuter.find(`#show-form-${$(this).attr('data-linkid')}`).show();\n\n            $(this).css({top:  parseInt($(this).css(\"top\").split('px')[0]) - 35 + \"px\"  })\n\n            $(this).css({top: `${linkElm.attr('data-basetop')}px`});\n          }\n        }\n      });\n\n      if (!linkElm.hasClass('hyperlink-display')) {\n        linkElm.css({width: '324px'}); // because of need to determine exact size for putting best area\n        const loaded = linkElm.attr('data-loaded');\n  \n        const padInner = getPadOuter().find('iframe[name=\"ace_inner\"]');\n        let targetLeft = e.clientX;\n        targetLeft += padInner.offset().left;\n        let targetTop = $(e.target).offset().top;\n        targetTop += parseInt(padInner.css('padding-top').split('px')[0]);\n        targetTop += parseInt(padOuter.find('#outerdocbody').css('padding-top').split('px')[0]);\n  \n        linkElm.css({left: `${parseInt(targetLeft) }px`});\n        linkElm.css({top: `${parseInt(targetTop) + 35}px`});\n        linkElm.addClass('hyperlink-display');\n          // linkElm.css({left: `${parseInt(editorLink.position().left) + parseInt(linkElm.css('width').split('px')[0])}px`});\n          // linkElm.css({top: `${parseInt(linkElm.css('top').split('px')[0]) + 35}px`});\n  \n        if (loaded != 'true') {\n          var hyperlink = linkElm.attr('data-hyperlink');\n          const dividedUrl = new URL(hyperlink);\n\n          const ep_hyperlink_title = linkElm.find('#ep_hyperlink_title');\n          ep_hyperlink_title.text(hyperlink);\n          const ep_hyperlink_img = linkElm.find('#ep_hyperlink_img');\n          const ep_hyperlink_description = linkElm.find('#ep_hyperlink_description');\n          ep_hyperlink_description.text('');\n  \n          const card_loading_hyperlink = linkElm.find('#card_loading_hyperlink');\n  \n          ep_hyperlink_img.hide();\n          ep_hyperlink_title.show();\n          card_loading_hyperlink.show();\n  \n  \n          // raise for og:title resolving\n  \n          \n          if (!(/^http:\\/\\//.test(hyperlink)) && !(/^https:\\/\\//.test(hyperlink))) {\n            hyperlink = `https://${hyperlink}`;\n          }\n\n          const changeMetaView = function(hyperlink,title,image){\n            ep_hyperlink_img.attr('src', image);\n            ep_hyperlink_img.on('load', () => {\n              card_loading_hyperlink.fadeOut(500, () => {\n                ep_hyperlink_img.fadeIn();\n                ep_hyperlink_title.text(title.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, ''));\n                ep_hyperlink_description.text(hyperlink.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, ''));\n                linkElm.attr({'data-loaded': true});\n              });\n            });\n          }\n\n\n          if(!validURL(hyperlink))\n          {\n            changeMetaView(hyperlink,hyperlink,'../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png')\n            return false;\n          }\n\n\n          // ........\n          const metaResolverCallBack = function (result) {\n            //ep_hyperlink_title.attr('href', hyperlink);\n  \n            if (result.metadata.image && result.metadata.title) {\n              changeMetaView(hyperlink,result.metadata.title,result.metadata.image)\n            } else {\n              var editedHyperlink = `https://${dividedUrl.hostname}`;\n              if (result.last !== true) {\n                socket.emit('metaResolver', {padId, editedHyperlink, last: true}, metaResolverCallBack);\n              } else {\n                changeMetaView(hyperlink,result.metadata.title || hyperlink,'../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png')\n              }\n            }\n  \n            \n          };\n          // ........\n\n\n          switch(dividedUrl.hostname) {\n            case \"twitter.com\":\n              changeMetaView(hyperlink,hyperlink,'../static/plugins/ep_full_hyperlinks/static/dist/img/twitter.png')\n              break;\n            default:\n              socket.emit('metaResolver', {padId, hyperlink, last: false}, metaResolverCallBack);\n\n          }\n        }\n      }\n\n     \n      // else{\n      //   linkElm.removeClass('hyperlink-display');\n      //   linkElm.css({top:  parseInt(linkElm.css(\"top\").split('px')[0]) - 40 + \"px\"  })\n\n      // }\n      // Then highlight new link\n\n      // now if we apply a class such as mouseover to the editor it will go shitty\n      // so what we need to do is add CSS for the specific ID to the document...\n      // It's fucked up but that's how we do it..\n      var inner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\n      inner.contents().find('head').append(`<style class='link-style'>.${linkId}{ color: #a7680c !important }</style>`);\n    // } else {\n    //   // make a full copy of the html, including listeners\n    //   const linkElmCloned = linkElm.clone(true, true);\n\n    //   // before of appending clear the css (like top positionning)\n    //   linkElmCloned.attr('style', '');\n    //   // fix checkbox, because as we are duplicating the sidebar-link, we lose unique input names\n    //   linkElmCloned.find('.label-suggestion-checkbox').click(function () {\n    //     $(this).siblings('input[type=\"checkbox\"]').click();\n    //   });\n\n    //   // hovering link view\n    //   getPadOuter().find('.link-modal-link').html('').append(linkElmCloned);\n    //   const padInner = getPadOuter().find('iframe[name=\"ace_inner\"]');\n    //   // get modal position\n    //   const containerWidth = getPadOuter().find('#outerdocbody').outerWidth(true);\n    //   const modalWitdh = getPadOuter().find('.link-modal').outerWidth(true);\n    //   var targetLeft = e.clientX;\n    //   let targetTop = $(e.target).offset().top;\n    //   if (editorLink) {\n    //     targetLeft += padInner.offset().left;\n    //     targetTop += parseInt(padInner.css('padding-top').split('px')[0]);\n    //     targetTop += parseInt(padOuter.find('#outerdocbody').css('padding-top').split('px')[0]);\n    //   } else {\n    //     // mean we are clicking from a link Icon\n    //     var targetLeft = $(e.target).offset().left - 20;\n    //   }\n\n    //   // if positioning modal on target left will make part of the modal to be\n    //   // out of screen, we place it closer to the middle of the screen\n    //   if (targetLeft + modalWitdh > containerWidth) {\n    //     targetLeft = containerWidth - modalWitdh - 25;\n    //   }\n    //   const editorLinkHeight = editorLink ? editorLink.outerHeight(true) : 30;\n    //   getPadOuter().find('.link-modal').addClass('popup-show').css({\n    //     left: `${targetLeft}px`,\n    //     top: `${targetTop + editorLinkHeight}px`,\n    //   });\n    // }\n\n\n\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n  };\n\n  // Adjust position of the link detail on the container, to be on the same\n  // height of the pad text associated to the link, and return the affected element\n  const adjustTopOf = function (linkId, baseTop) {\n    const linkElement = getPadOuter().find(`#${linkId}`);\n    linkElement.css('top', `${baseTop}px`);\n    linkElement.attr('data-basetop', baseTop);\n\n    return linkElement;\n  };\n\n  // Indicates if link is on the expected position (baseTop-5)\n  const isOnTop = function (linkId, baseTop) {\n    const linkElement = getPadOuter().find(`#${linkId}`);\n    const expectedTop = `${baseTop}px`;\n    return linkElement.css('top') === expectedTop;\n  };\n\n  // Indicates if event was on one of the elements that does not close link\n  const shouldNotCloseLink = function (e) {\n    // a link box\n    if (\n\t\t\t$(e.target).closest('.link').length || $(e.target).closest('.link-modal').length ||\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_edit').length ||\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_delete').length ||\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_copy').length ||\n\t\t\t$(e.target).closest('.full-display-link').length ||\n\t\t\t$(e.target).closest('.link-title-wrapper').length ||\n\t\t\t$(e.target).closest('.link-edit-form').length ||\n\t\t\t$(e.target).closest('.link-text-text').length ||\n\t\t\t$(e.target).closest('.link-text-hyperlink').length\n    ) { // the link modal\n      return true;\n    }\n    return false;\n  };\n\n  return {\n    showLink,\n    hideLink,\n    hideAllLinks,\n    highlightLink,\n    adjustTopOf,\n    isOnTop,\n    shouldNotCloseLink,\n\n  };\n})();\n","const linkIcons = (() => {\n\n\t// Indicates if Etherpad is configured to display icons\n\tvar displayIcons = function () {\n\t\treturn clientVars.displayLinkAsIcon;\n\t};\n\n\t// Easier access to outer pad\n\tvar padOuter;\n\tvar getPadOuter = function () {\n\t\tpadOuter = padOuter || $('iframe[name=\"ace_outer\"]').contents();\n\t\treturn padOuter;\n\t};\n\n\t// Easier access to inner pad\n\tvar padInner;\n\tvar getPadInner = function () {\n\t\tpadInner = padInner || getPadOuter().find('iframe[name=\"ace_inner\"]').contents();\n\t\treturn padInner;\n\t};\n\n\tvar getOrCreateIconsContainerAt = function (top) {\n\t\tconst iconContainer = getPadOuter().find('#linkIcons');\n\t\tconst iconClass = `icon-at-${top}`;\n\n\t\t// is this the 1st link on that line?\n\t\tlet iconsAtLine = iconContainer.find(`.${iconClass}`);\n\t\tconst isFirstIconAtLine = iconsAtLine.length === 0;\n\n\t\t// create container for icons at target line, if it does not exist yet\n\t\tif (isFirstIconAtLine) {\n\t\t\ticonContainer.append(`<div class=\"link-icon-line ${iconClass}\"></div>`);\n\t\t\ticonsAtLine = iconContainer.find(`.${iconClass}`);\n\t\t\ticonsAtLine.css('top', `${top}px`);\n\t\t}\n\n\t\treturn iconsAtLine;\n\t};\n\n\tvar targetLinkIdOf = function (e) {\n\t\treturn e.currentTarget.getAttribute('data-linkid');\n\t};\n\n\tvar highlightTargetTextOf = function (linkId) {\n\t\tgetPadInner().find('head').append(`<style class='link-style'>.${linkId}{ color: #a7680c !important }</style>`);\n\t};\n\n\tvar removeHighlightTargetText = function (linkId) {\n\t\tgetPadInner().find('head .link-style').remove();\n\t};\n\n\tvar toggleActiveLinkIcon = function (target) {\n\t\ttarget.toggleClass('active').toggleClass('inactive');\n\t};\n\n\tvar addListenersToLinkIcons = function () {\n\t\tgetPadOuter().find('#linkIcons').on('mouseover', '.link-icon', (e) => {\n\t\t\tremoveHighlightTargetText();\n\t\t\tconst linkId = targetLinkIdOf(e);\n\t\t\thighlightTargetTextOf(linkId);\n\t\t}).on('mouseout', '.link-icon', (e) => {\n\t\t\tconst linkId = targetLinkIdOf(e);\n\t\t\tremoveHighlightTargetText();\n\t\t}).on('click', '.link-icon.active', function (e) {\n\t\t\ttoggleActiveLinkIcon($(this));\n\n\t\t\tconst linkId = targetLinkIdOf(e);\n\t\t\tlinkBoxes.hideLink(linkId, true);\n\t\t}).on('click', '.link-icon.inactive', function (e) {\n\t\t\t// deactivate/hide other link boxes that are opened, so we have only\n\t\t\t// one link box opened at a time\n\t\t\tlinkBoxes.hideAllLinks();\n\t\t\tconst allActiveIcons = getPadOuter().find('#linkIcons').find('.link-icon.active');\n\t\t\ttoggleActiveLinkIcon(allActiveIcons);\n\n\t\t\t// activate/show only target link\n\t\t\ttoggleActiveLinkIcon($(this));\n\t\t\tconst linkId = targetLinkIdOf(e);\n\t\t\tlinkBoxes.highlightLink(linkId, e);\n\t\t});\n\t};\n\n\t// Listen to clicks on the page to be able to close link when clicking\n\t// outside of it\n\tvar addListenersToCloseOpenedLink = function () {\n\t\t// we need to add listeners to the different iframes of the page\n\t\t$(document).on('touchstart click', (e) => {\n\t\t\tcloseOpenedLinkIfNotOnSelectedElements(e);\n\t\t});\n\t\tgetPadOuter().find('html').on('touchstart click', (e) => {\n\t\t\tcloseOpenedLinkIfNotOnSelectedElements(e);\n\t\t});\n\t\tgetPadInner().find('html').on('touchstart click', (e) => {\n\t\t\tcloseOpenedLinkIfNotOnSelectedElements(e);\n\t\t});\n\t};\n\n\t// Close link if event target was outside of link or on a link icon\n\tvar closeOpenedLinkIfNotOnSelectedElements = function (e) {\n\t\t// Don't do anything if clicked on the following elements:\n\t\t// any of the link icons\n\t\tif (shouldNotCloseLink(e) || linkBoxes.shouldNotCloseLink(e)) { // a link box or the link modal\n\t\t\treturn;\n\t\t}\n\n\t\t// All clear, can close the link\n\t\tconst openedLink = findOpenedLink();\n\t\tif (openedLink) {\n\t\t\ttoggleActiveLinkIcon($(openedLink));\n\n\t\t\tconst linkId = openedLink.getAttribute('data-linkid');\n\t\t\tlinkBoxes.hideLink(linkId, true);\n\t\t}\n\t};\n\n\t// Search on the page for an opened link\n\tvar findOpenedLink = function () {\n\t\treturn getPadOuter().find('#linkIcons .link-icon.active').get(0);\n\t};\n\n\t/* ***** Public methods: ***** */\n\n\t// Create container to hold link icons\n\tvar insertContainer = function () {\n\t\t// we're only doing something if icons will be displayed at all\n\t\tif (!displayIcons()) return;\n\n\t\tgetPadOuter().find('#sidediv').after('<div id=\"linkIcons\"></div>');\n\t\tgetPadOuter().find('#links').addClass('with-icons');\n\t\taddListenersToLinkIcons();\n\t\taddListenersToCloseOpenedLink();\n\t};\n\n\t// Create a new link icon\n\tvar addIcon = function (linkId, link) {\n\t\t// we're only doing something if icons will be displayed at all\n\t\tif (!displayIcons()) return;\n\n\t\tconst inlineLink = getPadInner().find(`.link.${linkId}`);\n\t\tconst top = inlineLink.get(0).offsetTop;\n\t\tconst iconsAtLine = getOrCreateIconsContainerAt(top);\n\t\tconst icon = $('#linkIconTemplate').tmpl(link);\n\n\t\ticon.appendTo(iconsAtLine);\n\t};\n\n\t// Hide link icons from container\n\tvar hideIcons = function () {\n\t\t// we're only doing something if icons will be displayed at all\n\t\tif (!displayIcons()) return;\n\n\t\tgetPadOuter().find('#linkIcons').children().children().each(function () {\n\t\t\t$(this).hide();\n\t\t});\n\t};\n\n\t// Adjust position of the link icon on the container, to be on the same\n\t// height of the pad text associated to the link, and return the affected icon\n\tvar adjustTopOf = function (linkId, baseTop) {\n\t\t// we're only doing something if icons will be displayed at all\n\t\tif (!displayIcons()) return;\n\n\t\tconst icon = getPadOuter().find(`#icon-${linkId}`);\n\t\tconst targetTop = baseTop;\n\t\tconst iconsAtLine = getOrCreateIconsContainerAt(targetTop);\n\n\t\t// move icon from one line to the other\n\t\tif (iconsAtLine != icon.parent()) icon.appendTo(iconsAtLine);\n\n\t\ticon.show();\n\n\t\treturn icon;\n\t};\n\n\t// Indicate if link detail currently opened was shown by a click on\n\t// link icon.\n\tvar isLinkOpenedByClickOnIcon = function () {\n\t\t// we're only doing something if icons will be displayed at all\n\t\tif (!displayIcons()) return false;\n\n\t\tconst iconClicked = getPadOuter().find('#linkIcons').find('.link-icon.active');\n\t\tconst linkOpenedByClickOnIcon = iconClicked.length !== 0;\n\n\t\treturn linkOpenedByClickOnIcon;\n\t};\n\n\t// Mark link as a link-with-reply, so it can be displayed with a\n\t// different icon\n\tvar linkHasReply = function (linkId) {\n\t\t// we're only doing something if icons will be displayed at all\n\t\tif (!displayIcons()) return;\n\n\t\t// change link icon\n\t\tconst iconForLink = getPadOuter().find('#linkIcons').find(`#icon-${linkId}`);\n\t\ticonForLink.addClass('with-reply');\n\t};\n\n\t// Indicate if sidebar link should be shown, checking if it had the characteristics\n\t// of a link that was being displayed on the screen\n\tvar shouldShow = function (sidebarComent) {\n\t\tlet shouldShowLink = false;\n\n\t\tif (!displayIcons()) {\n\t\t\t// if icons are not being displayed, we always show links\n\t\t\tshouldShowLink = true;\n\t\t} else if (sidebarComent.hasClass('mouseover')) {\n\t\t\t// if icons are being displayed, we only show links clicked by user\n\t\t\tshouldShowLink = true;\n\t\t}\n\n\t\treturn shouldShowLink;\n\t};\n\n\t// Indicates if event was on one of the elements that does not close link (any of the link icons)\n\tvar shouldNotCloseLink = function (e) {\n\t\treturn $(e.target).closest('.link-icon').length !== 0;\n\t};\n\n\treturn {\n\t\tinsertContainer,\n\t\taddIcon,\n\t\thideIcons,\n\t\tadjustTopOf,\n\t\tisLinkOpenedByClickOnIcon,\n\t\tlinkHasReply,\n\t\tshouldShow,\n\t\tshouldNotCloseLink,\n\n\t}\n})();\n","const linkL10n = (() => {\n\tvar localize = function (element) {\n\t\thtml10n.translateElement(html10n.translations, element.get(0));\n\t};\n\treturn {\n\t\tlocalize\n\t}\n})();\n","const newLink = (() => {\n\n\t// Create a link object with data filled on the given form\n\tvar buildLinkFrom = function (form) {\n\t\tconst text = form.find('#hyperlink-text').val();\n\t\tconst oldText = form.find('#hyperlink-text-hidden').val();\n\t\tlet hyperlink = form.find('#hyperlink-url').val();\n\t\tconst changeFrom = form.find('.from-value').text();\n\t\tconst changeTo = form.find('.to-value').val() || null;\n\t\tconst link = {};\n\t\tif (!(/^http:\\/\\//.test(hyperlink)) && !(/^https:\\/\\//.test(hyperlink))) {\n\t\t\thyperlink = `https://${hyperlink}`;\n\t\t}\n\t\tlink.text = text;\n\t\tlink.oldText = oldText;\n\t\tlink.hyperlink = hyperlink;\n\n\t\tif (changeTo) {\n\t\t\tlink.changeFrom = changeFrom;\n\t\t\tlink.changeTo = changeTo;\n\t\t}\n\t\treturn link;\n\t};\n\n\t// Callback for new link Cancel\n\tvar cancelNewLink = function () {\n\t\thideNewLinkPopup();\n\t};\n\n\t// Callback for new link Submit\n\tvar submitNewLink = function (callback) {\n\t\tconst index = 0;\n\t\tconst form = $('#newLink');\n\t\tconst link = buildLinkFrom(form);\n\t\tif ((link.text.length > 0 || link.changeTo && link.changeTo.length > 0) && validURL(link.hyperlink)) {\n\t\t\tform.find('.link-content, .to-value').removeClass('error');\n\t\t\thideNewLinkPopup();\n\t\t\tcallback(link, index);\n\t\t} else {\n\t\t\tif (link.text.length == 0) form.find('.link-content').addClass('error');\n\t\t\tif (!validURL(link.hyperlink)) form.find('#hyperlink-url').addClass('error');\n\n\t\t\tif (link.changeTo && link.changeTo.length == 0) form.find('.to-value').addClass('error');\n\t\t}\n\t\treturn false;\n\t};\n\n\tvar validURL = function (str) {\n\t\tvar pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n\t\t  '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n\t\t  '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n\t\t  '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n\t\t  '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n\t\t  '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n\t\treturn !!pattern.test(str);\n\t  };\n\t/* ***** Public methods: ***** */\n\n\tvar localizenewLinkPopup = function () {\n\t\tconst newLinkPopup = $('#newLink');\n\t\tif (newLinkPopup.length !== 0) linkL10n.localize(newLinkPopup);\n\t};\n\n\t// Insert new Link Form\n\tvar insertNewLinkPopupIfDontExist = function (link, callback) {\n\t\t$('#newLink').remove();\n\t\tvar newLinkPopup = $('#newLink');\n\n\t\tlink.linkId = '';\n\t\tvar newLinkPopup = $('#newLinkTemplate').tmpl(link);\n\t\tnewLinkPopup.appendTo($('#editorcontainerbox'));\n\n\t\tlocalizenewLinkPopup();\n\n\t\t// Listen for include suggested change toggle\n\t\t$('#newLink').find('.suggestion-checkbox').change(function () {\n\t\t\t$('#newLink').find('.suggestion').toggle($(this).is(':checked'));\n\t\t});\n\n\t\t// Cancel btn\n\t\tnewLinkPopup.find('#link-reset').on('click', () => {\n\t\t\tcancelNewLink();\n\t\t});\n\t\t// Create btn // link-create-btn\n\t\t$('#newLink').on('submit', (e) => {\n\t\t\te.preventDefault();\n\t\t\treturn submitNewLink(callback);\n\t\t});\n\n\t\treturn newLinkPopup;\n\t};\n\n\tvar showNewLinkPopup = function () {\n\t\t// position below link icon\n\t\t$('#newLink').css('left', $('.toolbar .addLink').offset().left);\n\n\t\t// Reset form to make sure it is all clear\n\t\t$('#newLink').find('.suggestion-checkbox').prop('checked', false).trigger('change');\n\t\t$('#newLink').find('textarea').val('');\n\t\t$('#newLink').find('.link-content, .to-value').removeClass('error');\n\n\t\t// Show popup\n\t\t$('#newLink').addClass('popup-show');\n\n\n\t\t// mark selected text, so it is clear to user which text range the link is being applied to\n\t\tpad.plugins.ep_full_hyperlinks.preLinkMarker.markSelectedText();\n\n\t\t// focus on hyperlink input\n\n\n\t\tsetTimeout(() => { $('#newLink').find('.link-content').focus().select(); }, 500);\n\t};\n\n\tvar hideNewLinkPopup = function () {\n\t\t$('#newLink').removeClass('popup-show');\n\n\t\t// force focus to be lost, so virtual keyboard is hidden on mobile devices\n\t\t$('#newLink').find(':focus').blur();\n\n\t\t// unmark selected text, as now there is no text being linked\n\t\tpad.plugins.ep_full_hyperlinks.preLinkMarker.unmarkSelectedText();\n\t};\n\t\n\treturn {\n\t\tlocalizenewLinkPopup,\n\t\tinsertNewLinkPopupIfDontExist,\n\t\tshowNewLinkPopup,\n\t\thideNewLinkPopup,\n\n\t}\n\n})();\n","const preLinkMark = (() => {\n\t\n\tconst MARK_CLASS = 'pre-selected-link';\n\n\tvar preLinkMarker = function (ace) {\n\t\tthis.ace = ace;\n\t\tconst self = this;\n\n\t\t// do nothing if this feature is not enabled\n\t\tif (!this.highlightSelectedText()) return;\n\n\t\t// remove any existing marks, as there is no link being added on plugin initialization\n\t\t// (we need the timeout to let the plugin be fully initialized before starting to remove\n\t\t// marked texts)\n\t\tsetTimeout(() => {\n\t\t\tself.unmarkSelectedText();\n\t\t}, 0);\n\t};\n\n\t// Indicates if Etherpad is configured to highlight text\n\tpreLinkMarker.prototype.highlightSelectedText = function () {\n\t\treturn clientVars.highlightSelectedText;\n\t};\n\n\tpreLinkMarker.prototype.markSelectedText = function () {\n\t\t// do nothing if this feature is not enabled\n\t\tif (!this.highlightSelectedText()) return;\n\n\t\tthis.ace.callWithAce(doNothing, 'markPreSelectedTextToLink', true);\n\t};\n\n\tpreLinkMarker.prototype.unmarkSelectedText = function () {\n\t\t// do nothing if this feature is not enabled\n\t\tif (!this.highlightSelectedText()) return;\n\n\t\tthis.ace.callWithAce(doNothing, 'unmarkPreSelectedTextToLink', true);\n\t};\n\n\tpreLinkMarker.prototype.performNonUnduableEvent = function (eventType, callstack, action) {\n\t\tcallstack.startNewEvent('nonundoable');\n\t\taction();\n\t\tcallstack.startNewEvent(eventType);\n\t};\n\n\tpreLinkMarker.prototype.handleMarkText = function (context) {\n\t\tconst editorInfo = context.editorInfo;\n\t\tconst rep = context.rep;\n\t\tconst callstack = context.callstack;\n\n\t\t// first we need to unmark any existing text, otherwise we'll have 2 text ranges marked\n\t\tthis.removeMarks(editorInfo, rep, callstack);\n\n\t\tthis.addMark(editorInfo, callstack);\n\t};\n\n\tpreLinkMarker.prototype.handleUnmarkText = function (context) {\n\t\tconst editorInfo = context.editorInfo;\n\t\tconst rep = context.rep;\n\t\tconst callstack = context.callstack;\n\n\t\tthis.removeMarks(editorInfo, rep, callstack);\n\t};\n\n\tpreLinkMarker.prototype.addMark = function (editorInfo, callstack) {\n\t\tconst eventType = callstack.editEvent.eventType;\n\n\t\t// we don't want the text marking to be undoable\n\t\tthis.performNonUnduableEvent(eventType, callstack, () => {\n\t\t\teditorInfo.ace_setAttributeOnSelection(MARK_CLASS, clientVars.userId);\n\t\t});\n\t};\n\n\tpreLinkMarker.prototype.removeMarks = function (editorInfo, rep, callstack) {\n\t\tconst eventType = callstack.editEvent.eventType;\n\t\tconst originalSelStart = rep.selStart;\n\t\tconst originalSelEnd = rep.selEnd;\n\n\t\t// we don't want the text marking to be undoable\n\t\tthis.performNonUnduableEvent(eventType, callstack, () => {\n\t\t\t// remove marked text\n\t\t\tconst padInner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\n\t\t\tconst selector = `.${MARK_CLASS}`;\n\t\t\tconst repArr = editorInfo.ace_getRepFromSelector(selector, padInner);\n\t\t\t// repArr is an array of reps\n\t\t\t$.each(repArr, (index, rep) => {\n\t\t\t\teditorInfo.ace_performSelectionChange(rep[0], rep[1], true);\n\t\t\t\teditorInfo.ace_setAttributeOnSelection(MARK_CLASS, false);\n\t\t\t});\n\n\t\t\t// make sure selected text is back to original value\n\t\t\teditorInfo.ace_performSelectionChange(originalSelStart, originalSelEnd, true);\n\t\t});\n\t};\n\n\t// we do nothing on callWithAce; actions will be handled on aceEditEvent\n\tvar doNothing = function () {};\n\n\tconst init = function (ace) {\n\t\treturn new preLinkMarker(ace);\n\t};\n\n\treturn {\n\t\tMARK_CLASS,\n\t\tinit\n\t}\n\n})();\n","const timeFormat = (() => {\n\n\tvar localizable = typeof html10n !== 'undefined';\n\n\tl10nKeys = {\n\t\t'seconds': 'ep_full_hyperlinks.time.seconds',\n\t\t'1 minute ago': 'ep_full_hyperlinks.time.one_minute',\n\t\t'minutes': 'ep_full_hyperlinks.time.minutes',\n\t\t'1 hour ago': 'ep_full_hyperlinks.time.one_hour',\n\t\t'hours': 'ep_full_hyperlinks.time.hours',\n\t\t'yesterday': 'ep_full_hyperlinks.time.one_day',\n\t\t'days': 'ep_full_hyperlinks.time.days',\n\t\t'last week': 'ep_full_hyperlinks.time.one_week',\n\t\t'weeks': 'ep_full_hyperlinks.time.weeks',\n\t\t'last month': 'ep_full_hyperlinks.time.one_month',\n\t\t'months': 'ep_full_hyperlinks.time.months',\n\t\t'last year': 'ep_full_hyperlinks.time.one_year',\n\t\t'years': 'ep_full_hyperlinks.time.years',\n\t\t'last century': 'ep_full_hyperlinks.time.one_century',\n\t\t'centuries': 'ep_full_hyperlinks.time.centuries',\n\t};\n\t\n\tvar time_formats = [\n\t\t[60, 'seconds', 1], // 60\n\t\t[120, '1 minute ago', '1 minute from now'], // 60*2\n\t\t[3600, 'minutes', 60], // 60*60, 60\n\t\t[7200, '1 hour ago', '1 hour from now'], // 60*60*2\n\t\t[86400, 'hours', 3600], // 60*60*24, 60*60\n\t\t[172800, 'yesterday', 'tomorrow'], // 60*60*24*2\n\t\t[604800, 'days', 86400], // 60*60*24*7, 60*60*24\n\t\t[1209600, 'last week', 'next week'], // 60*60*24*7*4*2\n\t\t[2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\n\t\t[4838400, 'last month', 'next month'], // 60*60*24*7*4*2\n\t\t[29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n\t\t[58060800, 'last year', 'next year'], // 60*60*24*7*4*12*2\n\t\t[2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n\t\t[5806080000, 'last century', 'next century'], // 60*60*24*7*4*12*100*2\n\t\t[58060800000, 'centuries', 2903040000], // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n\t];\n\t\n\tfunction prettyDate(time) {\n\t\t/*\n\t\tvar time = ('' + date_str).replace(/-/g,\"/\").replace(/[TZ]/g,\" \").replace(/^\\s\\s*/ /* rappel   , '').replace(/\\s\\s*$/, '');\n\t\tif(time.substr(time.length-4,1)==\".\") time =time.substr(0,time.length-4);\n\t\t*/\n\t\tlet seconds = (new Date() - new Date(time)) / 1000;\n\t\t// var seconds = new Date() - new Date(time) / 1000;\n\t\tlet token = 'ago';\n\t\tlet list_choice = 1;\n\t\tlet l10n_appendix = '.past';\n\t\n\t\tif (seconds < 0) {\n\t\t\tseconds = Math.abs(seconds);\n\t\t\ttoken = 'from now';\n\t\t\tl10n_appendix = '.future';\n\t\t\tlist_choice = 2;\n\t\t}\n\t\n\t\tlet i = 0; let\n\t\t\tformat;\n\t\twhile (format = time_formats[i++]) {\n\t\t\tif (seconds < format[0]) {\n\t\t\t\tconst count = Math.floor(seconds / format[2]);\n\t\t\t\tvar formatted_time;\n\t\t\t\tif (localizable) {\n\t\t\t\t\tconst key = l10nKeys[format[1]] + l10n_appendix;\n\t\t\t\t\tformatted_time = html10n.get(key, {count});\n\t\t\t\t}\n\t\n\t\t\t\t// Wasn't able to localize properly the date, so use the default:\n\t\t\t\tif (formatted_time === undefined) {\n\t\t\t\t\tif (typeof format[2] === 'string') { formatted_time = format[list_choice]; } else { formatted_time = `${count} ${format[1]} ${token}`; }\n\t\t\t\t}\n\t\t\t\treturn formatted_time;\n\t\t\t}\n\t\t}\n\t\treturn time;\n\t}\n\t\n\treturn {prettyDate}\n})();\n","const shared = (() => {\n\n\tvar collectContentPre = (hook, context) => {\n\t\tconst link = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(context.cls);\n\t\tconst fakeLink = /(?:^| )(fakelink-[A-Za-z0-9]*)/.exec(context.cls);\n\t\n\t\tif (link && link[1]) {\n\t\t\tcontext.cc.doAttrib(context.state, `link::${link[1]}`);\n\t\t}\n\t\n\t\t// a fake link is a link copied from this or another pad. To avoid conflicts\n\t\t// with existing links, a fake linkId is used, so then we generate a new one\n\t\t// when the link is saved\n\t\tif (fakeLink) {\n\t\t\tconsole.log(fakeLink,\"fakeLink\");\n\t\t\tconst mapFakeLinks = pad.plugins.ep_full_hyperlinks.getMapfakeLinks();\n\t\t\tconst fakeLinkId = fakeLink[1];\n\t\t\tconst linkId = mapFakeLinks[fakeLinkId];\n\t\t\tcontext.cc.doAttrib(context.state, `link::${linkId}`);\n\t\t}\n\t\n\t\t// const tname = context.tname;\n\t\t// const state = context.state;\n\t\t// const lineAttributes = state.lineAttributes;\n\t\t// const tagIndex = tname;\n\t\t// const fonts = ['link'];\n\t\t// if (fonts.indexOf(tname) !== -1) {\n\t\t//   context.cc.doAttrib(state, tname);\n\t\t// }\n\t\n\t\treturn [];\n\t};\n\n\tconst generateLinkId = function () {\n\t\tconst linkId = `lc-${randomString(16)}`;\n\t\treturn linkId;\n\t};\n\n\treturn {\n\t\tcollectContentPre,\n\t\tgenerateLinkId,\n\t}\n\t\n})();\n"]}