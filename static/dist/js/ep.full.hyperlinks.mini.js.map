{"version":3,"sources":["validUrl.js","copyPasteEvents.js","linkBoxes.js","newLink.js","preLinkMark.js","shared.js"],"names":["exports","moduleList","randomString","require","validUrl","splitUri","link","splitted","match","uri","scheme","authority","path","query","fragment","is_iri","value","test","out","length","toLowerCase","is_http_iri","allowHttps","port","replace","is_https_iri","is_web_iri","is_uri","is_http_uri","is_https_uri","is_web_uri","isUri","isHttpUri","isHttpsUri","isWebUri","events","addTextOnClipboard","e","padInner","removeSelection","links","preventDefault","getFormatedHrefElements","selection","contentWindow","getSelection","getRangeAt","selectedElements","document","createElement","append","cloneContents","querySelectorAll","forEach","el","cls","getAttribute","lindId","exec","newTag","innerHTML","setAttribute","data","hyperlink","querySelector","replaceWith","error","console","getSelectionFormated","originalEvent","clipboardData","setData","outerHTML","contents","execCommand","saveLinks","pastedDataHtml","getData","pastedHtmlHolderElemenet","allLinksElement","getElementsByTagName","allLinksData","element","tempHyperLink","href","tempHyperLinkText","newLinkId","shared","generateLinkId","className","id","author","linkId","timestamp","Date","getTime","text","originalLinkId","headerId","date","formattedDate","pad","plugins","ep_full_hyperlinks","saveLinkWithoutSelection","clientVars","padId","$","clone","html","makeClipboarRedyForSaveLinks","linkBoxes","padOuter","getPadOuter","getLinksContainer","find","hideAllLinks","hide","setPositionModal","linkModal","clickCoords","posx","posy","window","event","pageX","pageY","clientX","clientY","body","scrollLeft","documentElement","scrollTop","x","y","getPosition","clickCoordsX","clickCoordsY","modalWith","innerWidth","modalHeight","outerHeight","windowWidth","windowHeight","windoPaddingTop","parseInt","css","linkElementTop","target","offset","top","linkElementHeight","newL","left","newT","hasClass","transform","width","margin-left","showLink","show","hideLink","showLinkModal","linkObj","socket","linkModalAppended","tmpl","loaded","attr","val","title","dividedUrl","URL","ep_hyperlink_img","ep_hyperlink_title","card_loading_hyperlink","ep_hyperlink_description","changeMetaView","image","on","fadeOut","fadeIn","data-loaded","metaResolverCallBack","result","metadata","editedHyperlink","hostname","last","emit","addClass","shouldNotCloseLink","closest","internalLinkClick","stopPropagation","this","url","incomeURL","origin","location","doesPInURL","pathname","split","indexOf","padName","padMainPathname","substring","ep_singlePad","active","isLinkInternal","targetPath","search","filters","currentPathname","padNameIndex","splice","push","doesLinkHaveFilter","join","tartge","history","pushState","type","open","newLink","submitNewLink","callback","form","oldText","buildLinkFrom","removeClass","hideNewLinkPopup","blur","preLinkMarker","unmarkSelectedText","insertNewLinkPopupIfDontExist","remove","newLinkPopup","appendTo","showNewLinkPopup","markSelectedText","setTimeout","focus","select","preLinkMark","MARK_CLASS","ace","self","highlightSelectedText","prototype","callWithAce","doNothing","performNonUnduableEvent","eventType","callstack","action","startNewEvent","handleMarkText","context","editorInfo","rep","removeMarks","addMark","handleUnmarkText","editEvent","ace_setAttributeOnSelection","userId","originalSelStart","selStart","originalSelEnd","selEnd","repArr","ace_getRepFromSelector","each","index","ace_performSelectionChange","init","hook","fakeLink","cc","doAttrib","state","getMapfakeLinks"],"mappings":"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","file":"ep.full.hyperlinks.mini.js","sourcesContent":["// https://github.com/ogt/valid-url\r\n\r\nconst validUrl = (function () {\r\n  'use strict';\r\n\r\n  /**\r\n   * URI spitter method - direct from RFC 3986\r\n   * @param {string} link uri e.g. 'https://www.google.com'\r\n   * @returns URI object with properties uri, scheme, authority, path, query, fragment.\r\n   */\r\n  const splitUri = function (link) {\r\n    const splitted = link.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\r\n    let uri = splitted[0];\r\n    let scheme = splitted[1];\r\n    let authority = splitted[2];\r\n    let path = splitted[3];\r\n    let query = splitted[4];\r\n    let fragment = splitted[5];\r\n    return {\r\n      uri,\r\n      scheme,\r\n      authority,\r\n      path,\r\n      query,\r\n      fragment,\r\n    };\r\n  };\r\n\r\n  function is_iri(value) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    // check for illegal characters\r\n    if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\r\n\r\n    // check for hex escapes that aren't complete\r\n    if (/%[^0-9a-f]/i.test(value)) return;\r\n    if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\r\n\r\n    let splitted = [];\r\n    let scheme = '';\r\n    let authority = '';\r\n    let path = '';\r\n    let query = '';\r\n    let fragment = '';\r\n    let out = '';\r\n\r\n    // from RFC 3986\r\n    splitted = splitUri(value);\r\n    scheme = splitted.scheme;\r\n    authority = splitted.authority;\r\n    path = splitted.path;\r\n    query = splitted.query;\r\n    fragment = splitted.fragment;\r\n\r\n    // if authority is present, the path must be empty or begin with a /\r\n    if (authority && authority.length) {\r\n      if (!(path.length === 0 || /^\\//.test(path))) return;\r\n    } else {\r\n      // if authority is not present, the path must not start with //\r\n      if (/^\\/\\//.test(path)) return;\r\n    }\r\n\r\n    if (scheme && scheme.length) {\r\n      // scheme must begin with a letter, then consist of letters, digits, +, ., or -\r\n      if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return;\r\n    }\r\n\r\n    // re-assemble the URL per section 5.3 in RFC 3986\r\n    if (scheme && scheme.length) {\r\n      out += `${scheme}:`;\r\n    }\r\n    if (authority && authority.length) {\r\n      out += `//${authority}`;\r\n    }\r\n\r\n    out += path;\r\n\r\n    if (query && query.length) {\r\n      out += `?${query}`;\r\n    }\r\n\r\n    if (fragment && fragment.length) {\r\n      out += `#${fragment}`;\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  function is_http_iri(value, allowHttps) {\r\n    if (!is_iri(value)) {\r\n      return;\r\n    }\r\n\r\n    let splitted = [];\r\n    let scheme = '';\r\n    let authority = '';\r\n    let path = '';\r\n    let port = '';\r\n    let query = '';\r\n    let fragment = '';\r\n    let out = '';\r\n\r\n    // from RFC 3986\r\n    splitted = splitUri(value);\r\n    scheme = splitted.scheme;\r\n    authority = splitted.authority;\r\n    path = splitted.path;\r\n    query = splitted.query;\r\n    fragment = splitted.fragment;\r\n\r\n    if (!scheme) return;\r\n\r\n    if (allowHttps) {\r\n      if (scheme.toLowerCase() != 'https') return;\r\n    } else if (scheme.toLowerCase() != 'http') { return; }\r\n\r\n    // fully-qualified URIs must have an authority section that is\r\n    // a valid host\r\n    if (!authority) {\r\n      return;\r\n    }\r\n\r\n    // enable port component\r\n    if (/:(\\d+)$/.test(authority)) {\r\n      port = authority.match(/:(\\d+)$/)[0];\r\n      authority = authority.replace(/:\\d+$/, '');\r\n    }\r\n\r\n    out += `${scheme}:`;\r\n    out += `//${authority}`;\r\n\r\n    if (port) {\r\n      out += port;\r\n    }\r\n\r\n    out += path;\r\n\r\n    if (query && query.length) {\r\n      out += `?${query}`;\r\n    }\r\n\r\n    if (fragment && fragment.length) {\r\n      out += `#${fragment}`;\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  function is_https_iri(value) {\r\n    return is_http_iri(value, true);\r\n  }\r\n\r\n  function is_web_iri(value) {\r\n    return (is_http_iri(value) || is_https_iri(value));\r\n  }\r\n\r\n  return {\r\n    is_uri: is_iri,\r\n    is_http_uri: is_http_iri,\r\n    is_https_uri: is_https_iri,\r\n    is_web_uri: is_web_iri,\r\n    isUri: is_iri,\r\n    isHttpUri: is_http_iri,\r\n    isHttpsUri: is_https_iri,\r\n    isWebUri: is_web_iri,\r\n    splitUri: splitUri\r\n  };\r\n})();\r\n","'use strict';\r\n\r\nconst events = (() => {\r\n  const getSelectionFormated = (padInner, links) => {\r\n    const selection = padInner[0].contentWindow.getSelection().getRangeAt(0);\r\n    const selectedElements = document.createElement('div');\r\n\r\n    selectedElements.append(selection.cloneContents());\r\n\r\n    try {\r\n      selectedElements.querySelectorAll('.link').forEach((el) => {\r\n        const cls = el.getAttribute('class');\r\n        const classLinkId = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(cls);\r\n        const lindId = classLinkId[1];\r\n\r\n        let newTag;\r\n\r\n        if (!links[lindId]) {\r\n          newTag = document.createElement('span');\r\n          newTag.innerHTML = el.innerHTML;\r\n        } else {\r\n        // create a tag\r\n          newTag = document.createElement('a');\r\n          newTag.innerHTML = el.innerHTML;\r\n          newTag.setAttribute('href', links[lindId].data.hyperlink);\r\n        }\r\n\r\n        // replace the current node with href node\r\n        const span = selectedElements.querySelector(`.${lindId}`);\r\n        span.replaceWith(newTag);\r\n      });\r\n    } catch (error) {\r\n      console.error('[ep_full_hyperlinks]: copy data has an error', error);\r\n    }\r\n\r\n    return selectedElements;\r\n  };\r\n\r\n  const addTextOnClipboard = (e, padInner, removeSelection, links) => {\r\n    e.preventDefault();\r\n    const getFormatedHrefElements = getSelectionFormated(padInner, links);\r\n\r\n    e.originalEvent.clipboardData.setData('text/html', getFormatedHrefElements.outerHTML);\r\n\r\n    // if it is a cut event we have to remove the selection\r\n    if (removeSelection) {\r\n      padInner.contents()[0].execCommand('delete');\r\n    }\r\n  };\r\n\r\n  const makeClipboarRedyForSaveLinks = (e, padInner) => {\r\n    const clipboardData = e.originalEvent.clipboardData;\r\n    const pastedDataHtml = clipboardData.getData('text/html');\r\n    const range = padInner.contents()[0].getSelection().getRangeAt(0);\r\n\r\n    if (!range) return false;\r\n\r\n    e.preventDefault();\r\n    const pastedHtmlHolderElemenet = document.createElement('div');\r\n    pastedHtmlHolderElemenet.innerHTML = pastedDataHtml;\r\n    const allLinksElement = pastedHtmlHolderElemenet.getElementsByTagName('a');\r\n    const allLinksData = {};\r\n\r\n    for (const element of allLinksElement) {\r\n      const tempHyperLink = element.href;\r\n      const tempHyperLinkText = element.innerHTML;\r\n      const newLinkId = shared.generateLinkId();\r\n      element.className = newLinkId;\r\n      element.id = newLinkId;\r\n      allLinksData[newLinkId] = {\r\n        data: {\r\n          author: 'empty',\r\n          linkId: newLinkId,\r\n          timestamp: new Date().getTime(),\r\n          text: tempHyperLinkText,\r\n          originalLinkId: newLinkId,\r\n          hyperlink: tempHyperLink,\r\n          headerId: null,\r\n          date: new Date(),\r\n          formattedDate: new Date(),\r\n        },\r\n      };\r\n    }\r\n\r\n    pad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(\r\n        clientVars.padId,\r\n        allLinksData\r\n    );\r\n\r\n    padInner\r\n        .contents()[0]\r\n        .execCommand(\r\n            'insertHTML',\r\n            false,\r\n            $('<div>').append($(pastedHtmlHolderElemenet).clone()).html()\r\n        );\r\n  };\r\n\r\n  const saveLinks = (e, padInner) => {\r\n    makeClipboarRedyForSaveLinks(e, padInner);\r\n  };\r\n\r\n  return {\r\n    addTextOnClipboard,\r\n    saveLinks,\r\n  };\r\n})();\r\n","'use strict';\r\n\r\nconst linkBoxes = (() => {\r\n  let padOuter;\r\n  const getPadOuter = () => (padOuter = padOuter || $('iframe[name=\"ace_outer\"]').contents());  // finds the ace_outer iframe and assigns its contents to padOuter, then returns it\r\n\r\n  /**\r\n   * @returns wrapper for all the link modals on the page\r\n   */\r\n  const getLinksContainer = () => getPadOuter().find('#linkBoxWrapper');\r\n\r\n  /* ***** Public methods: ***** */\r\n\r\n  /**\r\n   * Displays the parent div of a specific link modal.\r\n   * @param {string} linkId   ID of a specific link \r\n   */\r\n  const showLink = (linkId) => getLinksContainer().find(`#${linkId}`).show();\r\n\r\n  /**\r\n   * Hides the parent div of a specific link modal.\r\n   * @param {string} linkId   ID of a specific link\r\n   */\r\n  const hideLink = (linkId) => {\r\n    getLinksContainer().find(`#${linkId}`).hide();  // hides the entire modal (highest in hierarchy)\r\n    padOuter.find(`#show-form-${linkId}`).show();  // removes display:none from the link info viewer\r\n    padOuter.find(`#edit-form-${linkId}`).hide();  // adds display:none to link editor (accessed throughh pen icon on show-form-linkId)\r\n  };\r\n\r\n  /**\r\n   * Hides all link modals on the page.\r\n   */\r\n  const hideAllLinks = () => getLinksContainer().find('.link-container').hide();\r\n\r\n\r\n  const getPosition = (e) => {\r\n    let posx = 0;\r\n    let posy = 0;\r\n\r\n    if (!e) e = window.event;\r\n\r\n    if (e.pageX || e.pageY) {\r\n      posx = e.pageX;\r\n      posy = e.pageY;\r\n    } else if (e.clientX || e.clientY) {\r\n      posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\r\n      posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\r\n    }\r\n\r\n    return {x: posx, y: posy};\r\n  };\r\n\r\n\r\n  const setPositionModal = (e, linkModal, padInner) => {\r\n    const clickCoords = getPosition(e);\r\n    const clickCoordsX = clickCoords.x;\r\n    const clickCoordsY = clickCoords.y;\r\n\r\n    const modalWith = linkModal.innerWidth();\r\n    const modalHeight = linkModal.outerHeight(true);\r\n\r\n    const windowWidth = padInner.innerWidth();\r\n    const windowHeight = padInner.outerHeight(true);\r\n\r\n    const windoPaddingTop = parseInt(padInner.css('padding-top'));\r\n    const linkElementTop = parseInt($(e.target).offset().top);\r\n    const linkElementHeight = parseInt($(e.target).outerHeight(true));\r\n\r\n    let newL = e.clientX + padInner.offset().left;\r\n    let newT = linkElementTop + linkElementHeight + (windoPaddingTop / 2);\r\n\r\n    if ((windowWidth - clickCoordsX) < modalWith) {\r\n      newL = windowWidth - modalWith - 16;\r\n    }\r\n\r\n    if ((windowHeight - clickCoordsY) < modalHeight) {\r\n      newT = windowHeight - modalHeight;\r\n    }\r\n\r\n    if (!$('body').hasClass('mobileView')) {\r\n      newT += 35;\r\n    }\r\n\r\n    if ($('body').hasClass('mobileView')) {\r\n      linkModal.css({\r\n        left: '50%',\r\n        top: `${newT}px`,\r\n        transform: 'translateX(-50%)',\r\n        width: '96vw',\r\n      });\r\n      linkModal.find('a.ep_hyperlink_title').css({\r\n        'margin-left': '4px',\r\n      });\r\n\r\n      linkModal.find('.ep_hyperlink_docs_bubble_button_container').css({\r\n        'margin-left': 'auto',\r\n      });\r\n    } else {\r\n      linkModal.css({left: `${newL}px`, top: `${newT}px`});\r\n    }\r\n  };\r\n\r\n\r\n  const showLinkModal = (e, linkObj, socket) => {\r\n    const padOuter = $('iframe[name=\"ace_outer\"]').contents();\r\n    const padInner = getPadOuter().find('iframe[name=\"ace_inner\"]');\r\n    const linkId = linkObj.linkId;\r\n    const linkModalAppended =\r\n\t\t\tgetLinksContainer().find(`#${linkId}`).length === 0 ? false : true;\r\n\r\n    hideAllLinks();\r\n\r\n    if (!linkObj.hyperlink) {\r\n      console.error('[hyperlink]: link does not exist', linkObj);\r\n      return false;\r\n    }\r\n\r\n    // find link modal, if does not exist create a link modal\r\n    let linkModal = getLinksContainer().find(`#${linkId}`);\r\n    if (!linkModalAppended) linkModal = $('#linkBoxTemplate').tmpl({...linkObj});\r\n\r\n    const loaded = linkModal.attr('data-loaded');\r\n\r\n    // if the linkModal was not appended, create a modal and append it to #linkBoxWrapper\r\n    if (!linkModalAppended) {\r\n      padOuter.find('#linkBoxWrapper').append(linkModal);\r\n    } else {\r\n      // if the modal was exist update text and hypertext\r\n      linkModal.show();\r\n      // if the old hyperlink was not same as new hyperlink\r\n      if (linkObj.hyperlink !== linkModal.find('a.ep_hyperlink_title').attr('href')) {\r\n        linkModal.attr('data-loaded', 'false');\r\n      }\r\n\r\n      linkModal.attr('data-hyperlink', linkObj.hyperlink);\r\n      linkModal.find('input#hyperlink-url').val(linkObj.hyperlink);\r\n\r\n      linkModal.find('a.ep_hyperlink_title').attr({\r\n        title: linkObj.hyperlink,\r\n        href: linkObj.hyperlink,\r\n      });\r\n    }\r\n\r\n    // If the text we saved has changed and is different from the contents of the pad\r\n    const text = padInner.contents().find(`.${linkId}`).text();\r\n    linkModal.find('input#hyperlink-text-hidden').val(text);\r\n    linkModal.find('input#hyperlink-text').val(text);\r\n\r\n    // TODO: 1/ hyperlink for social and\r\n    // TODO: 2/ inside link\r\n    if (loaded != 'true') {\r\n      let hyperlink = linkObj.hyperlink || linkModal.attr('data-hyperlink');\r\n      let dividedUrl;\r\n\r\n      try {\r\n        dividedUrl = new URL(hyperlink);\r\n      } catch (error) {\r\n        console.error(`[hyperlink]: ${error}`);\r\n        linkBoxes.hideLink(linkId);\r\n        return;\r\n      }\r\n\r\n      const ep_hyperlink_img = linkModal.find('#ep_hyperlink_img');\r\n      const ep_hyperlink_title = linkModal.find('a.ep_hyperlink_title');\r\n      const card_loading_hyperlink = linkModal.find('#card_loading_hyperlink');\r\n      const ep_hyperlink_description = linkModal.find(\r\n          '#ep_hyperlink_description'\r\n      );\r\n\r\n      ep_hyperlink_description.text('');\r\n      ep_hyperlink_title.text(hyperlink);\r\n\r\n      ep_hyperlink_img.hide();\r\n      ep_hyperlink_title.show();\r\n      card_loading_hyperlink.show();\r\n\r\n      // raise for og:title resolving\r\n\r\n      if (!/^http:\\/\\//.test(hyperlink) && !/^https:\\/\\//.test(hyperlink)) {\r\n        hyperlink = `https://${hyperlink}`;\r\n      }\r\n\r\n      const changeMetaView = function (hyperlink, title, image) {\r\n        ep_hyperlink_img.attr('src', image);\r\n        ep_hyperlink_img.on('load', () => {\r\n          card_loading_hyperlink.fadeOut(500, () => {\r\n            ep_hyperlink_img.fadeIn();\r\n            ep_hyperlink_title.text(\r\n                title.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, '')\r\n            );\r\n            ep_hyperlink_description.text(\r\n                hyperlink.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, '')\r\n            );\r\n            linkModal.attr({'data-loaded': true});\r\n          });\r\n        });\r\n      };\r\n\r\n      if (!validUrl.isUri(hyperlink)) {\r\n        const img =\r\n\t\t\t\t\t'../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png';\r\n        changeMetaView(hyperlink, hyperlink, img);\r\n        return false;\r\n      }\r\n      // ........\r\n      const metaResolverCallBack = function (result) {\r\n        if (result.metadata.image && result.metadata.title) {\r\n          changeMetaView(\r\n              hyperlink,\r\n              result.metadata.title,\r\n              result.metadata.image\r\n          );\r\n        } else {\r\n          const editedHyperlink = `https://${dividedUrl.hostname}`;\r\n          if (result.last !== true) {\r\n            socket.emit(\r\n                'metaResolver',\r\n                {padId: clientVars.padId, editedHyperlink, last: true},\r\n                metaResolverCallBack\r\n            );\r\n          } else {\r\n            changeMetaView(\r\n                hyperlink,\r\n                result.metadata.title || hyperlink,\r\n                '../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png'\r\n            );\r\n          }\r\n        }\r\n      };\r\n      // ........\r\n      switch (dividedUrl.hostname) {\r\n        case 'twitter.com':\r\n          changeMetaView(\r\n              hyperlink,\r\n              hyperlink,\r\n              '../static/plugins/ep_full_hyperlinks/static/dist/img/twitter.png'\r\n          );\r\n          break;\r\n        default:\r\n          socket.emit(\r\n              'metaResolver',\r\n              {padId: clientVars.padId, hyperlink, last: false},\r\n              metaResolverCallBack\r\n          );\r\n      }\r\n    }\r\n\r\n    setPositionModal(e, linkModal, padInner);\r\n    linkModal.addClass('hyperlink-display');\r\n  };\r\n\r\n  // Indicates if event was on one of the elements that does not close link\r\n  const shouldNotCloseLink = function (e) {\r\n    // a link box\r\n    if (\r\n      $(e.target).closest('.link').length ||\r\n\t\t\t$(e.target).closest('.link-modal').length ||\r\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_edit').length ||\r\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_delete').length ||\r\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_copy').length ||\r\n\t\t\t$(e.target).closest('.full-display-link').length ||\r\n\t\t\t$(e.target).closest('.link-title-wrapper').length ||\r\n\t\t\t$(e.target).closest('.link-edit-form').length ||\r\n\t\t\t$(e.target).closest('.link-text-text').length ||\r\n\t\t\t$(e.target).closest('.link-text-hyperlink').length\r\n    ) {\r\n      // the link modal\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const isLinkInternal = (url) => {\r\n    const incomeURL = new URL(url);\r\n    let result = false;\r\n\r\n    // 1/ check the origin\r\n    if (incomeURL.origin !== location.origin) return false;\r\n\r\n\r\n    // 2/ origin the same but diff pad name\r\n    // check if the income url related to filter url\r\n    if (incomeURL.origin === location.origin) {\r\n      // does have p\r\n      const doesPInURL = location.pathname.split('/').indexOf('p') > 0;\r\n      const padName = clientVars.padId;\r\n      const padMainPathname = doesPInURL ? `/p/${padName}` : `/${padName}`;\r\n      // check if the income url pad name is the same current pad name\r\n      if (location.pathname.substring(0, padMainPathname.length) === padMainPathname) result = true;\r\n\r\n      // does single pad active\r\n      if (clientVars.ep_singlePad.active) result = true;\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  const doesLinkHaveFilter = (url) => {\r\n    const result = [];\r\n    const padName = clientVars.padId;\r\n\r\n    const currentPathname = url.pathname.split('/');\r\n\r\n    let padNameIndex = currentPathname.indexOf(padName) + 1;\r\n\r\n    if (clientVars.ep_singlePad.active) padNameIndex = 0;\r\n\r\n    const filters = [...currentPathname].splice(padNameIndex, currentPathname.length - 1);\r\n\r\n    result.push(...filters);\r\n\r\n    return result;\r\n  };\r\n\r\n  // internal link\r\n  // other plugin must listen for pushstate to get new data and excute they part.\r\n  const internalLinkClick = function (event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    const href = $(this).attr('href');\r\n\r\n    if (isLinkInternal(href)) {\r\n      const incomeURL = new URL(href);\r\n      let targetPath = `${incomeURL.search}`;\r\n      const filters = doesLinkHaveFilter(incomeURL);\r\n\r\n      if (filters.length > 0) {\r\n        const doesPInURL = location.pathname.split('/').indexOf('p') > 0;\r\n        targetPath = doesPInURL ? '/p' : '';\r\n        if (!clientVars.ep_singlePad.active) targetPath += `/${clientVars.padId}`;\r\n        targetPath += `/${filters.join('/')}${incomeURL.search}`;\r\n      }\r\n\r\n      if (incomeURL.search.length === 0) targetPath = href;\r\n\r\n      // The Target is which plugin should listen more for more functionality\r\n      // In this example, if we find a slug filter in your URL,\r\n      // the target should be the filter plugin\r\n      const tartge = filters.length > 0 ? 'filter' : 'other';\r\n\r\n      window.history.pushState({type: 'hyperLink', href, target: tartge}, document.title, targetPath);\r\n      // close all link\r\n      hideAllLinks();\r\n    } else {\r\n      window.open(href, '_blank');\r\n    }\r\n    return false;\r\n  };\r\n\r\n  return {\r\n    showLink,\r\n    hideLink,\r\n    hideAllLinks,\r\n    showLinkModal,\r\n    getLinksContainer,\r\n    shouldNotCloseLink,\r\n    internalLinkClick,\r\n  };\r\n})();\r\n","'use strict';\r\n\r\nconst newLink = (() => {\r\n  /**\r\n   * Create a link object with data filled on the given form\r\n   * @param {jQuery} form .link-edit-form\r\n   * @returns link object (vars text, oldText, hyperlink)\r\n   */\r\n  const buildLinkFrom = (form) => {\r\n    const text = form.find('#hyperlink-text').val();\r\n    const oldText = form.find('#hyperlink-text-hidden').val();\r\n    const hyperlink = form.find('#hyperlink-url').val();\r\n\r\n    return {\r\n      text,\r\n      oldText,\r\n      hyperlink,\r\n    };\r\n  };\r\n\r\n  // Callback for new link Cancel\r\n  const cancelNewLink = () => hideNewLinkPopup();\r\n\r\n  // Callback for new link Submit\r\n  const submitNewLink = (callback) => {\r\n    const index = 0;\r\n    const form = $(document).find('#newLink');\r\n    const link = buildLinkFrom(form);\r\n\r\n    // if scheme not present, add \"https://\"\r\n    if (!validUrl.splitUri(link.hyperlink).scheme) {\r\n      link.hyperlink = `https://${link.hyperlink}`;\r\n    }\r\n\r\n    if (link.text.length > 0 && validUrl.isUri(link.hyperlink)) {\r\n      form.find('#hyperlink-text, #hyperlink-url').removeClass('error');\r\n      hideNewLinkPopup();\r\n      callback(link, index);\r\n    } else {\r\n      if (link.text.length === 0) form.find('#hyperlink-text').addClass('error');\r\n      if (!validUrl.isUri(link.hyperlink)) form.find('#hyperlink-url').addClass('error');\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /* ***** Public methods: ***** */\r\n\r\n  // Insert new Link Form\r\n  const insertNewLinkPopupIfDontExist = (link, callback) => {\r\n    $('#newLink').remove();\r\n    link.linkId = '';\r\n    const newLinkPopup = $('#newLinkTemplate').tmpl(link);\r\n    newLinkPopup.appendTo($('#editorcontainerbox'));\r\n\r\n    // Cancel btn\r\n    $('#newLink #link-cancel-btn').on('click', (e) => cancelNewLink());\r\n\r\n    // Create btn // link-create-btn\r\n    $('#newLink #link-create-btn').on('click', (e) => submitNewLink(callback));\r\n\r\n    $(document).on('submit', 'form.link-edit-form', (e) => {\r\n      e.preventDefault();\r\n      submitNewLink(callback);\r\n    });\r\n\r\n    return newLinkPopup;\r\n  };\r\n\r\n  const showNewLinkPopup = () => {\r\n    if (!$('body').hasClass('mobileView')) {\r\n      // position below link icon\r\n      $('#newLink').css('left', $('.toolbar .addLink').offset().left);\r\n    }\r\n\r\n\r\n    // Reset form to make sure it is all clear\r\n    $('#newLink').find('textarea').val('');\r\n    $('#newLink').find('.link-content, .to-value').removeClass('error');\r\n\r\n    // Show popup\r\n    $('#newLink').addClass('popup-show');\r\n\r\n    // mark selected text, so it is clear to user which text range the link is being applied to\r\n    pad.plugins.ep_full_hyperlinks.preLinkMarker.markSelectedText();\r\n\r\n    // focus on hyperlink input\r\n    setTimeout(() => $('#newLink #hyperlink-url').focus().select(), 500);\r\n  };\r\n\r\n  const hideNewLinkPopup = () => {\r\n    $('#newLink').removeClass('popup-show');\r\n\r\n    // force focus to be lost, so virtual keyboard is hidden on mobile devices\r\n    $('#newLink').find(':focus').blur();\r\n\r\n    // unmark selected text, as now there is no text being linked\r\n    pad.plugins.ep_full_hyperlinks.preLinkMarker.unmarkSelectedText();\r\n  };\r\n\r\n  return {\r\n    // localizenewLinkPopup,\r\n    insertNewLinkPopupIfDontExist,\r\n    showNewLinkPopup,\r\n    hideNewLinkPopup,\r\n  };\r\n})();\r\n","'use strict';\r\n\r\nconst preLinkMark = (() => {\r\n  const MARK_CLASS = 'pre-selected-link';\r\n\r\n  const preLinkMarker = function (ace) {\r\n    this.ace = ace;\r\n    const self = this;\r\n\r\n    // do nothing if this feature is not enabled\r\n    if (!this.highlightSelectedText()) return;\r\n\r\n    // remove any existing marks, as there is no link being added on plugin initialization\r\n    // (we need the timeout to let the plugin be fully initialized before starting to remove\r\n    // marked texts)\r\n    setTimeout(() => {\r\n      self.unmarkSelectedText();\r\n    }, 0);\r\n  };\r\n\r\n  // Indicates if Etherpad is configured to highlight text\r\n  preLinkMarker.prototype.highlightSelectedText = function () {\r\n    return clientVars.highlightSelectedText;\r\n  };\r\n\r\n  preLinkMarker.prototype.markSelectedText = function () {\r\n    // do nothing if this feature is not enabled\r\n    if (!this.highlightSelectedText()) return;\r\n\r\n    this.ace.callWithAce(doNothing, 'markPreSelectedTextToLink', true);\r\n  };\r\n\r\n  preLinkMarker.prototype.unmarkSelectedText = function () {\r\n    // do nothing if this feature is not enabled\r\n    if (!this.highlightSelectedText()) return;\r\n\r\n    this.ace.callWithAce(doNothing, 'unmarkPreSelectedTextToLink', true);\r\n  };\r\n\r\n  preLinkMarker.prototype.performNonUnduableEvent = function (eventType, callstack, action) {\r\n    callstack.startNewEvent('nonundoable');\r\n    action();\r\n    callstack.startNewEvent(eventType);\r\n  };\r\n\r\n  preLinkMarker.prototype.handleMarkText = function (context) {\r\n    const editorInfo = context.editorInfo;\r\n    const rep = context.rep;\r\n    const callstack = context.callstack;\r\n\r\n    // first we need to unmark any existing text, otherwise we'll have 2 text ranges marked\r\n    this.removeMarks(editorInfo, rep, callstack);\r\n\r\n    this.addMark(editorInfo, callstack);\r\n  };\r\n\r\n  preLinkMarker.prototype.handleUnmarkText = function (context) {\r\n    const editorInfo = context.editorInfo;\r\n    const rep = context.rep;\r\n    const callstack = context.callstack;\r\n\r\n    this.removeMarks(editorInfo, rep, callstack);\r\n  };\r\n\r\n  preLinkMarker.prototype.addMark = function (editorInfo, callstack) {\r\n    const eventType = callstack.editEvent.eventType;\r\n\r\n    // we don't want the text marking to be undoable\r\n    this.performNonUnduableEvent(eventType, callstack, () => {\r\n      editorInfo.ace_setAttributeOnSelection(MARK_CLASS, clientVars.userId);\r\n    });\r\n  };\r\n\r\n  preLinkMarker.prototype.removeMarks = function (editorInfo, rep, callstack) {\r\n    const eventType = callstack.editEvent.eventType;\r\n    const originalSelStart = rep.selStart;\r\n    const originalSelEnd = rep.selEnd;\r\n\r\n    // we don't want the text marking to be undoable\r\n    this.performNonUnduableEvent(eventType, callstack, () => {\r\n      // remove marked text\r\n      const padInner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\r\n      const selector = `.${MARK_CLASS}`;\r\n      const repArr = editorInfo.ace_getRepFromSelector(selector, padInner);\r\n      // repArr is an array of reps\r\n      $.each(repArr, (index, rep) => {\r\n        editorInfo.ace_performSelectionChange(rep[0], rep[1], true);\r\n        editorInfo.ace_setAttributeOnSelection(MARK_CLASS, false);\r\n      });\r\n\r\n      // make sure selected text is back to original value\r\n      editorInfo.ace_performSelectionChange(originalSelStart, originalSelEnd, true);\r\n    });\r\n  };\r\n\r\n  // we do nothing on callWithAce; actions will be handled on aceEditEvent\r\n  const doNothing = () => {};\r\n\r\n  const init = (ace) => new preLinkMarker(ace);\r\n\r\n  return {\r\n    MARK_CLASS,\r\n    init,\r\n  };\r\n})();\r\n","'use strict';\r\n\r\nconst shared = (() => {\r\n  const collectContentPre = (hook, context) => {\r\n    const link = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(context.cls);\r\n    const fakeLink = /(?:^| )(fakelink-[A-Za-z0-9]*)/.exec(context.cls);\r\n\r\n    if (link && link[1]) {\r\n      context.cc.doAttrib(context.state, `link::${link[1]}`);\r\n    }\r\n\r\n    // a fake link is a link copied from this or another pad. To avoid conflicts\r\n    // with existing links, a fake linkId is used, so then we generate a new one\r\n    // when the link is saved\r\n    if (fakeLink) {\r\n      const mapFakeLinks = pad.plugins.ep_full_hyperlinks.getMapfakeLinks();\r\n      const fakeLinkId = fakeLink[1];\r\n      const linkId = mapFakeLinks[fakeLinkId];\r\n      context.cc.doAttrib(context.state, `link::${linkId}`);\r\n    }\r\n\r\n    return [];\r\n  };\r\n\r\n  const generateLinkId = () => `lc-${randomString(16)}`;\r\n\r\n  return {\r\n    collectContentPre,\r\n    generateLinkId,\r\n  };\r\n})();\r\n"]}