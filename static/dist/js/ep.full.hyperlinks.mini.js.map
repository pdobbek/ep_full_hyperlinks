{"version":3,"sources":["validUrl.js","copyPasteEvents.js","linkBoxes.js","newLink.js","preLinkMark.js","shared.js"],"names":["exports","moduleList","randomString","require","_","validUrl","splitUri","uri","match","is_iri","value","test","splitted","scheme","authority","path","query","fragment","out","length","toLowerCase","is_http_iri","allowHttps","port","replace","is_https_iri","is_web_iri","is_uri","is_http_uri","is_https_uri","is_web_uri","isUri","isHttpUri","isHttpsUri","isWebUri","events","makeClipboarRedyForSaveLinks","e","padInner","pastedData","clipboardData","text","originalEvent","getData","pastedDataHtml","contents","getSelection","getRangeAt","preventDefault","pastedHtmlHolderElemenet","document","createElement","innerHTML","allLinksElement","getElementsByTagName","allLinksData","each","eachElemenet","tempHyperLink","href","tempHyperLinkText","newLinkId","shared","generateLinkId","className","id","data","author","linkId","timestamp","Date","getTime","originalLinkId","hyperlink","headerId","date","formattedDate","pad","plugins","ep_full_hyperlinks","saveLinkWithoutSelection","clientVars","padId","execCommand","$","append","clone","html","RegExp","expression","matches","allLinks","reverse","result","link","startsAt","indexOf","openTag","closeTag","slice","join","endsAt","saveLink","links","linksToSave","mapOriginalLinksId","mapFakeLinks","fakeLinkId","addTextOnClipboard","ace","removeSelection","getFormatedHrefElements","selection","contentWindow","selectedElements","cloneContents","querySelectorAll","forEach","el","cls","getAttribute","lindId","exec","setAttribute","querySelector","replaceWith","getSelectionFormated","setData","outerHTML","saveLinks","JSON","parse","linkBoxes","padOuter","getPadOuter","getLinksContainer","find","hideAllLinks","hide","setPositionModal","linkModal","clickCoords","posx","posy","window","event","pageX","pageY","clientX","clientY","body","scrollLeft","documentElement","scrollTop","x","y","getPosition","clickCoordsX","clickCoordsY","modalWith","innerWidth","modalHeight","innerHeight","windowWidth","windowHeight","newL","offset","left","newT","css","top","parseInt","showLink","show","hideLink","showLinkModal","linkObj","socket","linkModalAppended","console","error","tmpl","loaded","attr","val","title","dividedUrl","URL","ep_hyperlink_img","ep_hyperlink_title","card_loading_hyperlink","ep_hyperlink_description","changeMetaView","image","on","fadeOut","fadeIn","data-loaded","metaResolverCallBack","metadata","editedHyperlink","hostname","last","emit","addClass","shouldNotCloseLink","target","closest","internalLinkClick","stopPropagation","this","url","incomeURL","origin","location","doesPInURL","pathname","split","padName","padMainPathname","substring","ep_singlePad","active","isLinkInternal","targetPath","search","filters","currentPathname","padNameIndex","splice","push","doesLinkHaveFilter","tartge","history","pushState","type","open","newLink","submitNewLink","callback","form","oldText","buildLinkFrom","removeClass","hideNewLinkPopup","blur","preLinkMarker","unmarkSelectedText","insertNewLinkPopupIfDontExist","remove","newLinkPopup","appendTo","showNewLinkPopup","markSelectedText","setTimeout","focus","select","preLinkMark","MARK_CLASS","self","highlightSelectedText","prototype","callWithAce","doNothing","performNonUnduableEvent","eventType","callstack","action","startNewEvent","handleMarkText","context","editorInfo","rep","removeMarks","addMark","handleUnmarkText","editEvent","ace_setAttributeOnSelection","userId","originalSelStart","selStart","originalSelEnd","selEnd","repArr","ace_getRepFromSelector","index","ace_performSelectionChange","init","hook","fakeLink","cc","doAttrib","state","getMapfakeLinks"],"mappings":"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","file":"ep.full.hyperlinks.mini.js","sourcesContent":["// https://github.com/ogt/valid-url\r\n\r\nconst validUrl = (function () {\r\n  'use strict';\r\n\r\n  // private function\r\n  // internal URI spitter method - direct from RFC 3986\r\n  const splitUri = function (uri) {\r\n    const splitted = uri.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\r\n    return splitted;\r\n  };\r\n\r\n  function is_iri(value) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    // check for illegal characters\r\n    if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\r\n\r\n    // check for hex escapes that aren't complete\r\n    if (/%[^0-9a-f]/i.test(value)) return;\r\n    if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\r\n\r\n    let splitted = [];\r\n    let scheme = '';\r\n    let authority = '';\r\n    let path = '';\r\n    let query = '';\r\n    let fragment = '';\r\n    let out = '';\r\n\r\n    // from RFC 3986\r\n    splitted = splitUri(value);\r\n    scheme = splitted[1];\r\n    authority = splitted[2];\r\n    path = splitted[3];\r\n    query = splitted[4];\r\n    fragment = splitted[5];\r\n\r\n    // scheme and path are required, though the path can be empty\r\n    if (!(scheme && scheme.length && path.length >= 0)) return;\r\n\r\n    // if authority is present, the path must be empty or begin with a /\r\n    if (authority && authority.length) {\r\n      if (!(path.length === 0 || /^\\//.test(path))) return;\r\n    } else {\r\n      // if authority is not present, the path must not start with //\r\n      if (/^\\/\\//.test(path)) return;\r\n    }\r\n\r\n    // scheme must begin with a letter, then consist of letters, digits, +, ., or -\r\n    if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return;\r\n\r\n    // re-assemble the URL per section 5.3 in RFC 3986\r\n    out += `${scheme}:`;\r\n    if (authority && authority.length) {\r\n      out += `//${authority}`;\r\n    }\r\n\r\n    out += path;\r\n\r\n    if (query && query.length) {\r\n      out += `?${query}`;\r\n    }\r\n\r\n    if (fragment && fragment.length) {\r\n      out += `#${fragment}`;\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  function is_http_iri(value, allowHttps) {\r\n    if (!is_iri(value)) {\r\n      return;\r\n    }\r\n\r\n    let splitted = [];\r\n    let scheme = '';\r\n    let authority = '';\r\n    let path = '';\r\n    let port = '';\r\n    let query = '';\r\n    let fragment = '';\r\n    let out = '';\r\n\r\n    // from RFC 3986\r\n    splitted = splitUri(value);\r\n    scheme = splitted[1];\r\n    authority = splitted[2];\r\n    path = splitted[3];\r\n    query = splitted[4];\r\n    fragment = splitted[5];\r\n\r\n    if (!scheme) return;\r\n\r\n    if (allowHttps) {\r\n      if (scheme.toLowerCase() != 'https') return;\r\n    } else if (scheme.toLowerCase() != 'http') { return; }\r\n\r\n    // fully-qualified URIs must have an authority section that is\r\n    // a valid host\r\n    if (!authority) {\r\n      return;\r\n    }\r\n\r\n    // enable port component\r\n    if (/:(\\d+)$/.test(authority)) {\r\n      port = authority.match(/:(\\d+)$/)[0];\r\n      authority = authority.replace(/:\\d+$/, '');\r\n    }\r\n\r\n    out += `${scheme}:`;\r\n    out += `//${authority}`;\r\n\r\n    if (port) {\r\n      out += port;\r\n    }\r\n\r\n    out += path;\r\n\r\n    if (query && query.length) {\r\n      out += `?${query}`;\r\n    }\r\n\r\n    if (fragment && fragment.length) {\r\n      out += `#${fragment}`;\r\n    }\r\n\r\n    return out;\r\n  }\r\n\r\n  function is_https_iri(value) {\r\n    return is_http_iri(value, true);\r\n  }\r\n\r\n  function is_web_iri(value) {\r\n    return (is_http_iri(value) || is_https_iri(value));\r\n  }\r\n\r\n  return {\r\n    is_uri: is_iri,\r\n    is_http_uri: is_http_iri,\r\n    is_https_uri: is_https_iri,\r\n    is_web_uri: is_web_iri,\r\n    isUri: is_iri,\r\n    isHttpUri: is_http_iri,\r\n    isHttpsUri: is_https_iri,\r\n    isWebUri: is_web_iri,\r\n  };\r\n})();\r\n","'use strict';\n\nconst events = (() => {\n  const getSelectionFormated = (padInner, links) => {\n    const selection = padInner[0].contentWindow.getSelection().getRangeAt(0);\n    const selectedElements = document.createElement('div');\n\n    selectedElements.append(selection.cloneContents());\n\n    selectedElements.querySelectorAll('.link').forEach((el) => {\n      const cls = el.getAttribute('class');\n      const classLinkId = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(cls);\n      const lindId = classLinkId[1];\n\n      // create a tag\n      const link = document.createElement('a');\n      link.innerHTML = el.innerHTML;\n      link.setAttribute('href', links[lindId].data.hyperlink);\n\n      // replace the current node with href node\n      const span = selectedElements.querySelector(`.${lindId}`);\n      span.replaceWith(link);\n    });\n\n    return selectedElements;\n  };\n\n  const addTextOnClipboard = (e, ace, padInner, removeSelection, links) => {\n    e.preventDefault();\n    const getFormatedHrefElements = getSelectionFormated(padInner, links);\n\n    e.originalEvent.clipboardData.setData('text/html', getFormatedHrefElements.outerHTML);\n\n    // if it is a cut event we have to remove the selection\n    if (removeSelection) {\n      padInner.contents()[0].execCommand('delete');\n    }\n  };\n\n  const saveLinks = (e, padInner) => {\n    let links = e.originalEvent.clipboardData.getData('text/objectLink');\n\n    if (links) {\n      links = JSON.parse(links);\n      saveLink(links);\n    } else {\n      makeClipboarRedyForSaveLinks(e, padInner);\n    }\n  };\n\n  const makeClipboarRedyForSaveLinks = (e, padInner) => {\n    let pastedData, clipboardData;\n    let text = '';\n\n    clipboardData = e.originalEvent.clipboardData;\n    pastedData = clipboardData.getData('text');\n    const pastedDataHtml = clipboardData.getData('text/html');\n    const range = padInner.contents()[0].getSelection().getRangeAt(0);\n\n    if (!range) return false;\n\n    if (!pastedDataHtml) {\n      const test = new RegExp('([a-zA-Z0-9]+://)?([a-zA-Z0-9_]+:[a-zA-Z0-9_]+@)?([a-zA-Z0-9.-]+\\\\.[A-Za-z]{2,4})(:[0-9]+)?(/.*)?').test(pastedData);\n      if (test) {\n        const expression =\n\t\t\t\t\t/(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/gi;\n        const matches = pastedData.match(expression);\n        const allLinks = {};\n        if (matches) {\n          for (match in matches.reverse()) {\n            // because of characters position need to be fixed and going to add tags from end\n            const result = {};\n            const newLinkId = shared.generateLinkId();\n            result.link = matches[match];\n\n            // allLinks.push(fakeLinkId)\n            allLinks[newLinkId] = {\n              data: {\n                author: 'empty',\n                linkId: newLinkId,\n                timestamp: new Date().getTime(),\n                text: result.link,\n                originalLinkId: newLinkId,\n                hyperlink: result.link,\n                headerId: null,\n                date: new Date(),\n                formattedDate: new Date(),\n              },\n            };\n            result.startsAt = pastedData.indexOf(matches[match]);\n            const openTag = `<span id=\"${newLinkId}\" class=\"${newLinkId}\">`;\n            const closeTag = '</span>';\n            pastedData = [\n              pastedData.slice(0, result.startsAt),\n              openTag,\n              pastedData.slice(result.startsAt),\n            ].join('');\n            result.endsAt =\n\t\t\t\t\t\t\tpastedData.indexOf(matches[match]) + matches[match].length;\n            pastedData = [\n              pastedData.slice(0, result.endsAt),\n              closeTag,\n              pastedData.slice(result.endsAt),\n            ].join('');\n          }\n          pastedData = pastedData.replace(/(?:\\r\\n|\\r|\\n)/g, '<br>');\n          text = $('<div></div>').html(pastedData);\n          padInner\n              .contents()[0]\n              .execCommand(\n                  'insertHTML',\n                  false,\n                  $('<div>').append($(text).clone()).html()\n              );\n\n          pad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(\n              clientVars.padId,\n              allLinks\n          );\n          e.preventDefault();\n        }\n      }\n    } else {\n      // it means pasted in html\n      e.preventDefault();\n      const pastedHtmlHolderElemenet = document.createElement('div');\n      pastedHtmlHolderElemenet.innerHTML = pastedDataHtml;\n      const allLinksElement =\n\t\t\t\tpastedHtmlHolderElemenet.getElementsByTagName('a');\n      const allLinksData = {};\n      _.each(allLinksElement, (eachElemenet) => {\n        const tempHyperLink = eachElemenet.href;\n        const tempHyperLinkText = eachElemenet.innerHTML;\n        const newLinkId = shared.generateLinkId();\n        eachElemenet.className = newLinkId;\n        eachElemenet.id = newLinkId;\n        allLinksData[newLinkId] = {\n          data: {\n            author: 'empty',\n            linkId: newLinkId,\n            timestamp: new Date().getTime(),\n            text: tempHyperLinkText,\n            originalLinkId: newLinkId,\n            hyperlink: tempHyperLink,\n            headerId: null,\n            date: new Date(),\n            formattedDate: new Date(),\n          },\n        };\n      });\n      pad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(\n          clientVars.padId,\n          allLinksData\n      );\n      padInner\n          .contents()[0]\n          .execCommand(\n              'insertHTML',\n              false,\n              $('<div>').append($(pastedHtmlHolderElemenet).clone()).html()\n          );\n    }\n  };\n\n  const saveLink = (links) => {\n    const linksToSave = {};\n    const padId = clientVars.padId;\n\n    const mapOriginalLinksId = pad.plugins.ep_full_hyperlinks.mapOriginalLinksId;\n    const mapFakeLinks = pad.plugins.ep_full_hyperlinks.mapFakeLinks;\n\n    _.each(links, (link, fakeLinkId) => {\n      const newLinkId = shared.generateLinkId();\n      mapFakeLinks[fakeLinkId] = newLinkId;\n      const originalLinkId = link.data.originalLinkId;\n      mapOriginalLinksId[originalLinkId] = newLinkId;\n      linksToSave[newLinkId] = link;\n    });\n    pad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(padId, linksToSave);\n  };\n\n  return {\n    addTextOnClipboard,\n    saveLinks,\n  };\n})();\n","'use strict'\r\n\r\n\r\nconst linkBoxes = (() => {\r\n\tlet padOuter;\r\n\tconst getPadOuter = () =>\r\n\t\t(padOuter = padOuter || $('iframe[name=\"ace_outer\"]').contents());\r\n\r\n\tconst getLinksContainer = () => getPadOuter().find(\"#linkBoxWrapper\");\r\n\r\n\t/* ***** Public methods: ***** */\r\n\r\n\tconst showLink = (linkId) => getLinksContainer().find(`#${linkId}`).show();\r\n\r\n\tconst hideLink = (linkId) => {\r\n\t\tgetLinksContainer().find(`#${linkId}`).hide();\r\n\t\tpadOuter.find(`#show-form-${linkId}`).show();\r\n\t\tpadOuter.find(`#edit-form-${linkId}`).hide();\r\n\t};\r\n\r\n\tconst hideAllLinks = () => getLinksContainer().find(`.link-container`).hide();\r\n\r\n\r\n\tconst getPosition = (e) => {\r\n\t\tlet posx = 0;\r\n\t\tlet posy = 0;\r\n\t\r\n\t\tif (!e) e = window.event;\r\n\t\t\r\n\t\tif (e.pageX || e.pageY) {\r\n\t\t\tposx = e.pageX;\r\n\t\t\tposy = e.pageY;\r\n\t\t} else if (e.clientX || e.clientY) {\r\n\t\t\tposx = e.clientX + document.body.scrollLeft + \r\n\t\t\t\t\t\t\t\t\t\t\t\t document.documentElement.scrollLeft;\r\n\t\t\tposy = e.clientY + document.body.scrollTop + \r\n\t\t\t\t\t\t\t\t\t\t\t\t document.documentElement.scrollTop;\r\n\t\t}\r\n\t\r\n\t\treturn { x: posx, y: posy }\r\n\t}\r\n\r\n\r\n\tconst setPositionModal = (e, linkModal, padInner) => {\r\n\t\tconst clickCoords = getPosition(e);\r\n\t\tclickCoordsX = clickCoords.x;\r\n\t\tclickCoordsY = clickCoords.y;\r\n\r\n\t\tconst modalWith = linkModal.innerWidth()\r\n\t\tconst modalHeight = linkModal.innerHeight()\r\n\r\n\t\twindowWidth = padInner.innerWidth();\r\n\t\twindowHeight = padInner.innerHeight();\r\n\r\n\t\tlet newL= `${e.clientX +padInner.offset().left}px`;\r\n\t\tlet newT = `${clickCoordsY}px`;\r\n\r\n\t\tif ((windowWidth - clickCoordsX) < modalWith) {\r\n\t\t\tnewL = `${(windowWidth - modalWith)}px`;\r\n\t\t}\r\n\t\r\n\t\tif ((windowHeight - clickCoordsY) < modalHeight) {\r\n\t\t\tnewT = `${windowHeight - modalHeight}px`;\r\n\t\t} \r\n\r\n\t\tlinkModal.css({ left: newL, top: `${parseInt(newT) + 50}px`  });\r\n\t}\r\n\r\n\r\n\tconst showLinkModal = (e, linkObj, socket) => {\r\n\t\tconst padOuter = $('iframe[name=\"ace_outer\"]').contents();\r\n\t\tconst padInner = getPadOuter().find('iframe[name=\"ace_inner\"]');\r\n\t\tconst linkId = linkObj.linkId;\r\n\t\tconst linkModalAppended =\r\n\t\t\tgetLinksContainer().find(`#${linkId}`).length === 0 ? false : true;\r\n\r\n\t\thideAllLinks();\r\n\r\n\t\tif(!linkObj.hyperlink){\r\n\t\t\tconsole.error(`[hyperlink]: link does not exist`, linkObj)\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t\r\n\t\t// find link modal, if does not exist create a link modal\r\n\t\tlet linkModal = getLinksContainer().find(`#${linkId}`);\r\n\t\tif (!linkModalAppended)\r\n\t\t\tlinkModal = $(\"#linkBoxTemplate\").tmpl({ ...linkObj });\r\n\r\n\t\tconst loaded = linkModal.attr(\"data-loaded\");\r\n\r\n\t\t// if the linkModal was not appended, create a modal and append it to #linkBoxWrapper\r\n\t\tif (!linkModalAppended) {\r\n\t\t\tpadOuter.find(\"#linkBoxWrapper\").append(linkModal);\r\n\t\t} else {\r\n\t\t\t// if the modal was exist update text and hypertext\r\n\t\t\tlinkModal.show();\r\n\t\t\t// if the old hyperlink was not same as new hyperlink\r\n\t\t\tif (linkObj.hyperlink !== linkModal.find(\"a.ep_hyperlink_title\").attr(\"href\")) {\r\n\t\t\t\tlinkModal.attr(\"data-loaded\", \"false\");\r\n\t\t\t}\r\n\r\n\t\t\tlinkModal.attr(\"data-hyperlink\", linkObj.hyperlink);\r\n\t\t\tlinkModal.find(\"input#hyperlink-url\").val(linkObj.hyperlink);\r\n\r\n\t\t\tlinkModal.find(\"a.ep_hyperlink_title\").attr({\r\n\t\t\t\ttitle: linkObj.hyperlink,\r\n\t\t\t\thref: linkObj.hyperlink,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// If the text we saved has changed and is different from the contents of the pad\r\n\t\tconst text = padInner.contents().find(`.${linkId}`).text()\r\n\t\tlinkModal.find(\"input#hyperlink-text-hidden\").val(text);\r\n\t\tlinkModal.find(\"input#hyperlink-text\").val(text);\r\n\r\n\t\t// TODO: 1/ hyperlink for social and\r\n\t\t// TODO: 2/ inside link\r\n\t\tif (loaded != \"true\") {\r\n\t\t\tlet hyperlink = linkObj.hyperlink || linkModal.attr(\"data-hyperlink\");\r\n\t\t\tlet dividedUrl;\r\n\t\t\ttry {\r\n\t\t\t\tdividedUrl = new URL(hyperlink);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error(`[hyperlink]: ${error}`);\r\n\t\t\t\tlinkBoxes.hideLink(linkId);\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tconst ep_hyperlink_img = linkModal.find(\"#ep_hyperlink_img\");\r\n\t\t\tconst ep_hyperlink_title = linkModal.find(\"a.ep_hyperlink_title\");\r\n\t\t\tconst card_loading_hyperlink = linkModal.find(\"#card_loading_hyperlink\");\r\n\t\t\tconst ep_hyperlink_description = linkModal.find(\r\n\t\t\t\t\"#ep_hyperlink_description\"\r\n\t\t\t);\r\n\r\n\t\t\tep_hyperlink_description.text(\"\");\r\n\t\t\tep_hyperlink_title.text(hyperlink);\r\n\r\n\t\t\tep_hyperlink_img.hide();\r\n\t\t\tep_hyperlink_title.show();\r\n\t\t\tcard_loading_hyperlink.show();\r\n\r\n\t\t\t// raise for og:title resolving\r\n\r\n\t\t\tif (!/^http:\\/\\//.test(hyperlink) && !/^https:\\/\\//.test(hyperlink)) {\r\n\t\t\t\thyperlink = `https://${hyperlink}`;\r\n\t\t\t}\r\n\r\n\t\t\tconst changeMetaView = function (hyperlink, title, image) {\r\n\t\t\t\tep_hyperlink_img.attr(\"src\", image);\r\n\t\t\t\tep_hyperlink_img.on(\"load\", () => {\r\n\t\t\t\t\tcard_loading_hyperlink.fadeOut(500, () => {\r\n\t\t\t\t\t\tep_hyperlink_img.fadeIn();\r\n\t\t\t\t\t\tep_hyperlink_title.text(\r\n\t\t\t\t\t\t\ttitle.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, \"\")\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tep_hyperlink_description.text(\r\n\t\t\t\t\t\t\thyperlink.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, \"\")\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tlinkModal.attr({ \"data-loaded\": true });\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif (!validUrl.isUri(hyperlink)) {\r\n\t\t\t\tconst img =\r\n\t\t\t\t\t\"../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png\";\r\n\t\t\t\tchangeMetaView(hyperlink, hyperlink, img);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// ........\r\n\t\t\tconst metaResolverCallBack = function (result) {\r\n\r\n\t\t\t\tif (result.metadata.image && result.metadata.title) {\r\n\t\t\t\t\tchangeMetaView(\r\n\t\t\t\t\t\thyperlink,\r\n\t\t\t\t\t\tresult.metadata.title,\r\n\t\t\t\t\t\tresult.metadata.image\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar editedHyperlink = `https://${dividedUrl.hostname}`;\r\n\t\t\t\t\tif (result.last !== true) {\r\n\t\t\t\t\t\tsocket.emit(\r\n\t\t\t\t\t\t\t\"metaResolver\",\r\n\t\t\t\t\t\t\t{ padId: clientVars.padId, editedHyperlink, last: true },\r\n\t\t\t\t\t\t\tmetaResolverCallBack\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchangeMetaView(\r\n\t\t\t\t\t\t\thyperlink,\r\n\t\t\t\t\t\t\tresult.metadata.title || hyperlink,\r\n\t\t\t\t\t\t\t\"../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t// ........\r\n\t\t\tswitch (dividedUrl.hostname) {\r\n\t\t\t\tcase \"twitter.com\":\r\n\t\t\t\t\tchangeMetaView(\r\n\t\t\t\t\t\thyperlink,\r\n\t\t\t\t\t\thyperlink,\r\n\t\t\t\t\t\t\"../static/plugins/ep_full_hyperlinks/static/dist/img/twitter.png\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tsocket.emit(\r\n\t\t\t\t\t\t\"metaResolver\",\r\n\t\t\t\t\t\t{ padId: clientVars.padId, hyperlink, last: false },\r\n\t\t\t\t\t\tmetaResolverCallBack\r\n\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsetPositionModal(e, linkModal, padInner);\r\n\t\tlinkModal.addClass(\"hyperlink-display\");\r\n\t};\r\n\r\n\t// Indicates if event was on one of the elements that does not close link\r\n\tconst shouldNotCloseLink = function (e) {\r\n\t\t// a link box\r\n\t\tif (\r\n\t\t\t$(e.target).closest(\".link\").length ||\r\n\t\t\t$(e.target).closest(\".link-modal\").length ||\r\n\t\t\t$(e.target).closest(\".ep_hyperlink_docs_bubble_button_edit\").length ||\r\n\t\t\t$(e.target).closest(\".ep_hyperlink_docs_bubble_button_delete\").length ||\r\n\t\t\t$(e.target).closest(\".ep_hyperlink_docs_bubble_button_copy\").length ||\r\n\t\t\t$(e.target).closest(\".full-display-link\").length ||\r\n\t\t\t$(e.target).closest(\".link-title-wrapper\").length ||\r\n\t\t\t$(e.target).closest(\".link-edit-form\").length ||\r\n\t\t\t$(e.target).closest(\".link-text-text\").length ||\r\n\t\t\t$(e.target).closest(\".link-text-hyperlink\").length\r\n\t\t) {\r\n\t\t\t// the link modal\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tconst isLinkInternal = (url) => {\r\n\t\tconst incomeURL = new URL(url);\r\n\t\tlet result = false;\r\n\r\n\t\t// 1/ check the origin\r\n\t\tif(incomeURL.origin !== location.origin) return false;\r\n\r\n\r\n\t\t// 2/ origin the same but diff pad name\r\n\t\t// check if the income url related to filter url\r\n\t\tif(incomeURL.origin === location.origin){\r\n\t\t\t// does have p\r\n\t\t\tconst doesPInURL = location.pathname.split('/').indexOf('p') > 0;\r\n\t\t\tconst padName = clientVars.padId;\r\n\t\t\tconst padMainPathname = doesPInURL ? `/p/${padName}` : `/${padName}`;\r\n\t\t\t// check if the income url pad name is the same current pad name\r\n\t\t\tif(location.pathname.substring(0, padMainPathname.length) === padMainPathname) result = true\r\n\r\n\t\t\t// does single pad active\r\n\t\t\tif(clientVars.ep_singlePad.active) result = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tconst doesLinkHaveFilter = (url) => {\r\n\t\tconst result = [];\r\n\t\tconst padName = clientVars.padId;\r\n\r\n\t\tconst currentPathname = url.pathname.split(\"/\");\r\n\r\n\t\tlet padNameIndex = currentPathname.indexOf(padName) + 1;\r\n\r\n\t\tif(clientVars.ep_singlePad.active) padNameIndex = 0;\r\n\r\n\t\tconst filters = [...currentPathname].splice(padNameIndex, currentPathname.length - 1);\r\n\r\n\t\tresult.push(...filters);\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// internal link\r\n\t// other plugin must listen for pushstate to get new data and excute they part.\r\n\tconst internalLinkClick = function (event) {\r\n\t\tevent.preventDefault();\r\n\t\tevent.stopPropagation();\r\n\t\tconst href = $(this).attr('href');\r\n\r\n\t\tif(isLinkInternal(href)){\r\n\t\t\tconst incomeURL = new URL(href);\r\n\t\t\tlet targetPath = `${incomeURL.search}`\r\n\t\t\tconst filters = doesLinkHaveFilter(incomeURL);\r\n\r\n\t\t\tif(filters.length>0){\r\n\t\t\t\tconst doesPInURL = location.pathname.split('/').indexOf('p') > 0;\r\n\t\t\t\ttargetPath = doesPInURL ? '/p': '';\r\n\t\t\t\tif(!clientVars.ep_singlePad.active) targetPath += `/${clientVars.padId}`;\r\n\t\t\t\ttargetPath += `/${filters.join('/')}${incomeURL.search}`;\r\n\t\t\t}\r\n\r\n\t\t\tif(incomeURL.search.length===0) targetPath = href;\r\n\r\n\t\t\t// The Target is which plugin should listen more for more functionality\r\n\t\t\t// In this example, if we find a slug filter in your URL,\r\n\t\t\t// the target should be the filter plugin\r\n\t\t\tconst tartge = filters.length>0 ? \"filter\" : \"other\";\r\n\t\t\r\n\t\t\twindow.history.pushState({type: \"hyperLink\", href, target: tartge}, document.title, targetPath);\r\n\t\t\t// close all link\r\n\t\t\thideAllLinks();\r\n\t\t}else {\r\n\t\t\twindow.open(href, '_blank');\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn {\r\n\t\tshowLink,\r\n\t\thideLink,\r\n\t\thideAllLinks,\r\n\t\tshowLinkModal,\r\n\t\tgetLinksContainer,\r\n\t\tshouldNotCloseLink,\r\n\t\tinternalLinkClick,\r\n\t};\r\n})();\r\n","'use strict';\n\nconst newLink = (() => {\n  // Create a link object with data filled on the given form\n  const buildLinkFrom = (form) => {\n    const text = form.find('#hyperlink-text').val();\n    const oldText = form.find('#hyperlink-text-hidden').val();\n    const hyperlink = form.find('#hyperlink-url').val();\n\n    return {\n      text,\n      oldText,\n      hyperlink,\n    };\n  };\n\n  // Callback for new link Cancel\n  const cancelNewLink = () => hideNewLinkPopup();\n\n  // Callback for new link Submit\n  const submitNewLink = (callback) => {\n    const index = 0;\n    const form = $(document).find('#newLink');\n    const link = buildLinkFrom(form);\n    if (link.text.length > 0 && validUrl.isUri(link.hyperlink)) {\n      form.find('#hyperlink-text, #hyperlink-url').removeClass('error');\n      hideNewLinkPopup();\n      callback(link, index);\n    } else {\n      if (link.text.length === 0) form.find('#hyperlink-text').addClass('error');\n      if (!validUrl.isUri(link.hyperlink)) form.find('#hyperlink-url').addClass('error');\n    }\n    return false;\n  };\n\n  /* ***** Public methods: ***** */\n\n  // Insert new Link Form\n  const insertNewLinkPopupIfDontExist = (link, callback) => {\n    $('#newLink').remove();\n    link.linkId = '';\n    const newLinkPopup = $('#newLinkTemplate').tmpl(link);\n    newLinkPopup.appendTo($('#editorcontainerbox'));\n\n    // Cancel btn\n    $('#newLink #link-cancel-btn').on('click', (e) => cancelNewLink());\n\n    // Create btn // link-create-btn\n    $('#newLink #link-create-btn').on('click', (e) => submitNewLink(callback));\n\n    $(document).on('submit', 'form.link-edit-form', (e) => {\n      e.preventDefault();\n      submitNewLink(callback);\n    });\n\n    return newLinkPopup;\n  };\n\n  const showNewLinkPopup = () => {\n    // position below link icon\n    $('#newLink').css('left', $('.toolbar .addLink').offset().left);\n\n    // Reset form to make sure it is all clear\n    $('#newLink').find('textarea').val('');\n    $('#newLink').find('.link-content, .to-value').removeClass('error');\n\n    // Show popup\n    $('#newLink').addClass('popup-show');\n\n    // mark selected text, so it is clear to user which text range the link is being applied to\n    pad.plugins.ep_full_hyperlinks.preLinkMarker.markSelectedText();\n\n    // focus on hyperlink input\n    setTimeout(() => $('#newLink #hyperlink-url').focus().select(), 500);\n  };\n\n  const hideNewLinkPopup = () => {\n    $('#newLink').removeClass('popup-show');\n\n    // force focus to be lost, so virtual keyboard is hidden on mobile devices\n    $('#newLink').find(':focus').blur();\n\n    // unmark selected text, as now there is no text being linked\n    pad.plugins.ep_full_hyperlinks.preLinkMarker.unmarkSelectedText();\n  };\n\n  return {\n    // localizenewLinkPopup,\n    insertNewLinkPopupIfDontExist,\n    showNewLinkPopup,\n    hideNewLinkPopup,\n  };\n})();\n","'use strict';\n\nconst preLinkMark = (() => {\n  const MARK_CLASS = 'pre-selected-link';\n\n  const preLinkMarker = function (ace) {\n    this.ace = ace;\n    const self = this;\n\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    // remove any existing marks, as there is no link being added on plugin initialization\n    // (we need the timeout to let the plugin be fully initialized before starting to remove\n    // marked texts)\n    setTimeout(() => {\n      self.unmarkSelectedText();\n    }, 0);\n  };\n\n  // Indicates if Etherpad is configured to highlight text\n  preLinkMarker.prototype.highlightSelectedText = function () {\n    return clientVars.highlightSelectedText;\n  };\n\n  preLinkMarker.prototype.markSelectedText = function () {\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    this.ace.callWithAce(doNothing, 'markPreSelectedTextToLink', true);\n  };\n\n  preLinkMarker.prototype.unmarkSelectedText = function () {\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    this.ace.callWithAce(doNothing, 'unmarkPreSelectedTextToLink', true);\n  };\n\n  preLinkMarker.prototype.performNonUnduableEvent = function (eventType, callstack, action) {\n    callstack.startNewEvent('nonundoable');\n    action();\n    callstack.startNewEvent(eventType);\n  };\n\n  preLinkMarker.prototype.handleMarkText = function (context) {\n    const editorInfo = context.editorInfo;\n    const rep = context.rep;\n    const callstack = context.callstack;\n\n    // first we need to unmark any existing text, otherwise we'll have 2 text ranges marked\n    this.removeMarks(editorInfo, rep, callstack);\n\n    this.addMark(editorInfo, callstack);\n  };\n\n  preLinkMarker.prototype.handleUnmarkText = function (context) {\n    const editorInfo = context.editorInfo;\n    const rep = context.rep;\n    const callstack = context.callstack;\n\n    this.removeMarks(editorInfo, rep, callstack);\n  };\n\n  preLinkMarker.prototype.addMark = function (editorInfo, callstack) {\n    const eventType = callstack.editEvent.eventType;\n\n    // we don't want the text marking to be undoable\n    this.performNonUnduableEvent(eventType, callstack, () => {\n      editorInfo.ace_setAttributeOnSelection(MARK_CLASS, clientVars.userId);\n    });\n  };\n\n  preLinkMarker.prototype.removeMarks = function (editorInfo, rep, callstack) {\n    const eventType = callstack.editEvent.eventType;\n    const originalSelStart = rep.selStart;\n    const originalSelEnd = rep.selEnd;\n\n    // we don't want the text marking to be undoable\n    this.performNonUnduableEvent(eventType, callstack, () => {\n      // remove marked text\n      const padInner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\n      const selector = `.${MARK_CLASS}`;\n      const repArr = editorInfo.ace_getRepFromSelector(selector, padInner);\n      // repArr is an array of reps\n      $.each(repArr, (index, rep) => {\n        editorInfo.ace_performSelectionChange(rep[0], rep[1], true);\n        editorInfo.ace_setAttributeOnSelection(MARK_CLASS, false);\n      });\n\n      // make sure selected text is back to original value\n      editorInfo.ace_performSelectionChange(originalSelStart, originalSelEnd, true);\n    });\n  };\n\n  // we do nothing on callWithAce; actions will be handled on aceEditEvent\n  const doNothing = () => {};\n\n  const init = (ace) => new preLinkMarker(ace);\n\n  return {\n    MARK_CLASS,\n    init,\n  };\n})();\n","'use strict';\n\nconst shared = (() => {\n  const collectContentPre = (hook, context) => {\n    const link = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(context.cls);\n    const fakeLink = /(?:^| )(fakelink-[A-Za-z0-9]*)/.exec(context.cls);\n\n    if (link && link[1]) {\n      context.cc.doAttrib(context.state, `link::${link[1]}`);\n    }\n\n    // a fake link is a link copied from this or another pad. To avoid conflicts\n    // with existing links, a fake linkId is used, so then we generate a new one\n    // when the link is saved\n    if (fakeLink) {\n      const mapFakeLinks = pad.plugins.ep_full_hyperlinks.getMapfakeLinks();\n      const fakeLinkId = fakeLink[1];\n      const linkId = mapFakeLinks[fakeLinkId];\n      context.cc.doAttrib(context.state, `link::${linkId}`);\n    }\n\n    return [];\n  };\n\n  const generateLinkId = () => `lc-${randomString(16)}`;\n\n  return {\n    collectContentPre,\n    generateLinkId,\n  };\n})();\n"]}