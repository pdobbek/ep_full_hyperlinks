{"version":3,"sources":["validUrl.js","copyPasteEvents.js","linkBoxes.js","newLink.js","preLinkMark.js","shared.js"],"names":["exports","moduleList","randomString","require","validUrl","splitUri","link","splitted","match","uri","scheme","authority","path","query","fragment","is_iri","value","test","out","length","toLowerCase","is_http_iri","allowHttps","port","replace","is_https_iri","is_web_iri","is_uri","is_http_uri","is_https_uri","is_web_uri","isUri","isHttpUri","isHttpsUri","isWebUri","events","addTextOnClipboard","e","padInner","removeSelection","links","preventDefault","getFormatedHrefElements","selection","contentWindow","getSelection","getRangeAt","selectedElements","document","createElement","append","cloneContents","querySelectorAll","forEach","el","cls","getAttribute","lindId","exec","newTag","innerHTML","setAttribute","data","hyperlink","querySelector","replaceWith","error","console","getSelectionFormated","originalEvent","clipboardData","setData","outerHTML","contents","execCommand","saveLinks","pastedDataHtml","getData","pastedHtmlHolderElemenet","allLinksElement","getElementsByTagName","allLinksData","element","tempHyperLink","href","tempHyperLinkText","newLinkId","shared","generateLinkId","className","id","author","linkId","timestamp","Date","getTime","text","originalLinkId","headerId","date","formattedDate","pad","plugins","ep_full_hyperlinks","saveLinkWithoutSelection","clientVars","padId","$","clone","html","makeClipboarRedyForSaveLinks","linkBoxes","padOuter","getPadOuter","getLinksContainer","find","hideAllLinks","hide","setPositionModal","linkModal","clickCoords","posx","posy","window","event","pageX","pageY","clientX","clientY","body","scrollLeft","documentElement","scrollTop","x","y","getPosition","clickCoordsX","clickCoordsY","modalWith","innerWidth","modalHeight","outerHeight","windowWidth","windowHeight","windoPaddingTop","parseInt","css","linkElementTop","target","offset","top","linkElementHeight","newL","left","newT","hasClass","transform","width","margin-left","showLink","show","hideLink","showLinkModal","linkObj","socket","linkModalAppended","tmpl","loaded","attr","val","title","dividedUrl","URL","ep_hyperlink_img","ep_hyperlink_title","card_loading_hyperlink","ep_hyperlink_description","changeMetaView","image","on","fadeOut","fadeIn","data-loaded","metaResolverCallBack","result","metadata","editedHyperlink","hostname","last","emit","addClass","shouldNotCloseLink","closest","internalLinkClick","stopPropagation","this","url","incomeURL","origin","location","doesPInURL","pathname","split","indexOf","padName","padMainPathname","substring","ep_singlePad","active","isLinkInternal","targetPath","search","filters","currentPathname","padNameIndex","splice","push","doesLinkHaveFilter","join","tartge","history","pushState","type","open","newLink","submitNewLink","callback","form","oldText","buildLinkFrom","removeClass","hideNewLinkPopup","blur","preLinkMarker","unmarkSelectedText","insertNewLinkPopupIfDontExist","remove","newLinkPopup","appendTo","showNewLinkPopup","markSelectedText","setTimeout","focus","select","preLinkMark","MARK_CLASS","ace","self","highlightSelectedText","prototype","callWithAce","doNothing","performNonUnduableEvent","eventType","callstack","action","startNewEvent","handleMarkText","context","editorInfo","rep","removeMarks","addMark","handleUnmarkText","editEvent","ace_setAttributeOnSelection","userId","originalSelStart","selStart","originalSelEnd","selEnd","repArr","ace_getRepFromSelector","each","index","ace_performSelectionChange","init","hook","fakeLink","cc","doAttrib","state","getMapfakeLinks"],"mappings":"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","file":"ep.full.hyperlinks.mini.js","sourcesContent":["// https://github.com/ogt/valid-url\n\nconst validUrl = (function () {\n  'use strict';\n\n  /**\n   * URI spitter method - direct from RFC 3986\n   * @param {string} link uri e.g. 'https://www.google.com'\n   * @returns URI object with properties uri, scheme, authority, path, query, fragment.\n   */\n  const splitUri = function (link) {\n    const splitted = link.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n    let uri = splitted[0];\n    let scheme = splitted[1];\n    let authority = splitted[2];\n    let path = splitted[3];\n    let query = splitted[4];\n    let fragment = splitted[5];\n    return {\n      uri,\n      scheme,\n      authority,\n      path,\n      query,\n      fragment,\n    };\n  };\n\n  function is_iri(value) {\n    if (!value) {\n      return;\n    }\n\n    // check for illegal characters\n    if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\n\n    // check for hex escapes that aren't complete\n    if (/%[^0-9a-f]/i.test(value)) return;\n    if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\n\n    let splitted = [];\n    let scheme = '';\n    let authority = '';\n    let path = '';\n    let query = '';\n    let fragment = '';\n    let out = '';\n\n    // from RFC 3986\n    splitted = splitUri(value);\n    scheme = splitted.scheme;\n    authority = splitted.authority;\n    path = splitted.path;\n    query = splitted.query;\n    fragment = splitted.fragment;\n\n    // if authority is present, the path must be empty or begin with a /\n    if (authority && authority.length) {\n      if (!(path.length === 0 || /^\\//.test(path))) return;\n    } else {\n      // if authority is not present, the path must not start with //\n      if (/^\\/\\//.test(path)) return;\n    }\n\n    if (scheme && scheme.length) {\n      // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n      if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return;\n    }\n\n    // re-assemble the URL per section 5.3 in RFC 3986\n    if (scheme && scheme.length) {\n      out += `${scheme}:`;\n    }\n    if (authority && authority.length) {\n      out += `//${authority}`;\n    }\n\n    out += path;\n\n    if (query && query.length) {\n      out += `?${query}`;\n    }\n\n    if (fragment && fragment.length) {\n      out += `#${fragment}`;\n    }\n\n    return out;\n  }\n\n  function is_http_iri(value, allowHttps) {\n    if (!is_iri(value)) {\n      return;\n    }\n\n    let splitted = [];\n    let scheme = '';\n    let authority = '';\n    let path = '';\n    let port = '';\n    let query = '';\n    let fragment = '';\n    let out = '';\n\n    // from RFC 3986\n    splitted = splitUri(value);\n    scheme = splitted.scheme;\n    authority = splitted.authority;\n    path = splitted.path;\n    query = splitted.query;\n    fragment = splitted.fragment;\n\n    if (!scheme) return;\n\n    if (allowHttps) {\n      if (scheme.toLowerCase() != 'https') return;\n    } else if (scheme.toLowerCase() != 'http') { return; }\n\n    // fully-qualified URIs must have an authority section that is\n    // a valid host\n    if (!authority) {\n      return;\n    }\n\n    // enable port component\n    if (/:(\\d+)$/.test(authority)) {\n      port = authority.match(/:(\\d+)$/)[0];\n      authority = authority.replace(/:\\d+$/, '');\n    }\n\n    out += `${scheme}:`;\n    out += `//${authority}`;\n\n    if (port) {\n      out += port;\n    }\n\n    out += path;\n\n    if (query && query.length) {\n      out += `?${query}`;\n    }\n\n    if (fragment && fragment.length) {\n      out += `#${fragment}`;\n    }\n\n    return out;\n  }\n\n  function is_https_iri(value) {\n    return is_http_iri(value, true);\n  }\n\n  function is_web_iri(value) {\n    return (is_http_iri(value) || is_https_iri(value));\n  }\n\n  return {\n    is_uri: is_iri,\n    is_http_uri: is_http_iri,\n    is_https_uri: is_https_iri,\n    is_web_uri: is_web_iri,\n    isUri: is_iri,\n    isHttpUri: is_http_iri,\n    isHttpsUri: is_https_iri,\n    isWebUri: is_web_iri,\n    splitUri: splitUri\n  };\n})();\n","'use strict';\n\nconst events = (() => {\n  const getSelectionFormated = (padInner, links) => {\n    const selection = padInner[0].contentWindow.getSelection().getRangeAt(0);\n    const selectedElements = document.createElement('div');\n\n    selectedElements.append(selection.cloneContents());\n\n    try {\n      selectedElements.querySelectorAll('.link').forEach((el) => {\n        const cls = el.getAttribute('class');\n        const classLinkId = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(cls);\n        const lindId = classLinkId[1];\n\n        let newTag;\n\n        if (!links[lindId]) {\n          newTag = document.createElement('span');\n          newTag.innerHTML = el.innerHTML;\n        } else {\n        // create a tag\n          newTag = document.createElement('a');\n          newTag.innerHTML = el.innerHTML;\n          newTag.setAttribute('href', links[lindId].data.hyperlink);\n        }\n\n        // replace the current node with href node\n        const span = selectedElements.querySelector(`.${lindId}`);\n        span.replaceWith(newTag);\n      });\n    } catch (error) {\n      console.error('[ep_full_hyperlinks]: copy data has an error', error);\n    }\n\n    return selectedElements;\n  };\n\n  const addTextOnClipboard = (e, padInner, removeSelection, links) => {\n    e.preventDefault();\n    const getFormatedHrefElements = getSelectionFormated(padInner, links);\n\n    e.originalEvent.clipboardData.setData('text/html', getFormatedHrefElements.outerHTML);\n\n    // if it is a cut event we have to remove the selection\n    if (removeSelection) {\n      padInner.contents()[0].execCommand('delete');\n    }\n  };\n\n  const makeClipboarRedyForSaveLinks = (e, padInner) => {\n    const clipboardData = e.originalEvent.clipboardData;\n    const pastedDataHtml = clipboardData.getData('text/html');\n    const range = padInner.contents()[0].getSelection().getRangeAt(0);\n\n    if (!range) return false;\n\n    e.preventDefault();\n    const pastedHtmlHolderElemenet = document.createElement('div');\n    pastedHtmlHolderElemenet.innerHTML = pastedDataHtml;\n    const allLinksElement = pastedHtmlHolderElemenet.getElementsByTagName('a');\n    const allLinksData = {};\n\n    for (const element of allLinksElement) {\n      const tempHyperLink = element.href;\n      const tempHyperLinkText = element.innerHTML;\n      const newLinkId = shared.generateLinkId();\n      element.className = newLinkId;\n      element.id = newLinkId;\n      allLinksData[newLinkId] = {\n        data: {\n          author: 'empty',\n          linkId: newLinkId,\n          timestamp: new Date().getTime(),\n          text: tempHyperLinkText,\n          originalLinkId: newLinkId,\n          hyperlink: tempHyperLink,\n          headerId: null,\n          date: new Date(),\n          formattedDate: new Date(),\n        },\n      };\n    }\n\n    pad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(\n        clientVars.padId,\n        allLinksData\n    );\n\n    padInner\n        .contents()[0]\n        .execCommand(\n            'insertHTML',\n            false,\n            $('<div>').append($(pastedHtmlHolderElemenet).clone()).html()\n        );\n  };\n\n  const saveLinks = (e, padInner) => {\n    makeClipboarRedyForSaveLinks(e, padInner);\n  };\n\n  return {\n    addTextOnClipboard,\n    saveLinks,\n  };\n})();\n","'use strict';\n\nconst linkBoxes = (() => {\n  let padOuter;\n  const getPadOuter = () => (padOuter = padOuter || $('iframe[name=\"ace_outer\"]').contents());  // finds the ace_outer iframe and assigns its contents to padOuter, then returns it\n\n  /**\n   * @returns wrapper for all the link modals on the page\n   */\n  const getLinksContainer = () => getPadOuter().find('#linkBoxWrapper');\n\n  /* ***** Public methods: ***** */\n\n  /**\n   * Displays the parent div of a specific link modal.\n   * @param {string} linkId   ID of a specific link \n   */\n  const showLink = (linkId) => getLinksContainer().find(`#${linkId}`).show();\n\n  /**\n   * Hides the parent div of a specific link modal.\n   * @param {string} linkId   ID of a specific link\n   */\n  const hideLink = (linkId) => {\n    getLinksContainer().find(`#${linkId}`).hide();  // hides the entire modal (highest in hierarchy)\n    padOuter.find(`#show-form-${linkId}`).show();  // removes display:none from the link info viewer\n    padOuter.find(`#edit-form-${linkId}`).hide();  // adds display:none to link editor (accessed throughh pen icon on show-form-linkId)\n  };\n\n  /**\n   * Hides all link modals on the page.\n   */\n  const hideAllLinks = () => getLinksContainer().find('.link-container').hide();\n\n\n  const getPosition = (e) => {\n    let posx = 0;\n    let posy = 0;\n\n    if (!e) e = window.event;\n\n    if (e.pageX || e.pageY) {\n      posx = e.pageX;\n      posy = e.pageY;\n    } else if (e.clientX || e.clientY) {\n      posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n      posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n    }\n\n    return {x: posx, y: posy};\n  };\n\n\n  const setPositionModal = (e, linkModal, padInner) => {\n    const clickCoords = getPosition(e);\n    const clickCoordsX = clickCoords.x;\n    const clickCoordsY = clickCoords.y;\n\n    const modalWith = linkModal.innerWidth();\n    const modalHeight = linkModal.outerHeight(true);\n\n    const windowWidth = padInner.innerWidth();\n    const windowHeight = padInner.outerHeight(true);\n\n    const windoPaddingTop = parseInt(padInner.css('padding-top'));\n    const linkElementTop = parseInt($(e.target).offset().top);\n    const linkElementHeight = parseInt($(e.target).outerHeight(true));\n\n    let newL = e.clientX + padInner.offset().left;\n    let newT = linkElementTop + linkElementHeight + (windoPaddingTop / 2);\n\n    if ((windowWidth - clickCoordsX) < modalWith) {\n      newL = windowWidth - modalWith - 16;\n    }\n\n    if ((windowHeight - clickCoordsY) < modalHeight) {\n      newT = windowHeight - modalHeight;\n    }\n\n    if (!$('body').hasClass('mobileView')) {\n      newT += 35;\n    }\n\n    if ($('body').hasClass('mobileView')) {\n      linkModal.css({\n        left: '50%',\n        top: `${newT}px`,\n        transform: 'translateX(-50%)',\n        width: '96vw',\n      });\n      linkModal.find('a.ep_hyperlink_title').css({\n        'margin-left': '4px',\n      });\n\n      linkModal.find('.ep_hyperlink_docs_bubble_button_container').css({\n        'margin-left': 'auto',\n      });\n    } else {\n      linkModal.css({left: `${newL}px`, top: `${newT}px`});\n    }\n  };\n\n\n  const showLinkModal = (e, linkObj, socket) => {\n    const padOuter = $('iframe[name=\"ace_outer\"]').contents();\n    const padInner = getPadOuter().find('iframe[name=\"ace_inner\"]');\n    const linkId = linkObj.linkId;\n    const linkModalAppended =\n\t\t\tgetLinksContainer().find(`#${linkId}`).length === 0 ? false : true;\n\n    hideAllLinks();\n\n    if (!linkObj.hyperlink) {\n      console.error('[hyperlink]: link does not exist', linkObj);\n      return false;\n    }\n\n    // find link modal, if does not exist create a link modal\n    let linkModal = getLinksContainer().find(`#${linkId}`);\n    if (!linkModalAppended) linkModal = $('#linkBoxTemplate').tmpl({...linkObj});\n\n    const loaded = linkModal.attr('data-loaded');\n\n    // if the linkModal was not appended, create a modal and append it to #linkBoxWrapper\n    if (!linkModalAppended) {\n      padOuter.find('#linkBoxWrapper').append(linkModal);\n    } else {\n      // if the modal was exist update text and hypertext\n      linkModal.show();\n      // if the old hyperlink was not same as new hyperlink\n      if (linkObj.hyperlink !== linkModal.find('a.ep_hyperlink_title').attr('href')) {\n        linkModal.attr('data-loaded', 'false');\n      }\n\n      linkModal.attr('data-hyperlink', linkObj.hyperlink);\n      linkModal.find('input#hyperlink-url').val(linkObj.hyperlink);\n\n      linkModal.find('a.ep_hyperlink_title').attr({\n        title: linkObj.hyperlink,\n        href: linkObj.hyperlink,\n      });\n    }\n\n    // If the text we saved has changed and is different from the contents of the pad\n    const text = padInner.contents().find(`.${linkId}`).text();\n    linkModal.find('input#hyperlink-text-hidden').val(text);\n    linkModal.find('input#hyperlink-text').val(text);\n\n    // TODO: 1/ hyperlink for social and\n    // TODO: 2/ inside link\n    if (loaded != 'true') {\n      let hyperlink = linkObj.hyperlink || linkModal.attr('data-hyperlink');\n      let dividedUrl;\n\n      try {\n        dividedUrl = new URL(hyperlink);\n      } catch (error) {\n        console.error(`[hyperlink]: ${error}`);\n        linkBoxes.hideLink(linkId);\n        return;\n      }\n\n      const ep_hyperlink_img = linkModal.find('#ep_hyperlink_img');\n      const ep_hyperlink_title = linkModal.find('a.ep_hyperlink_title');\n      const card_loading_hyperlink = linkModal.find('#card_loading_hyperlink');\n      const ep_hyperlink_description = linkModal.find(\n          '#ep_hyperlink_description'\n      );\n\n      ep_hyperlink_description.text('');\n      ep_hyperlink_title.text(hyperlink);\n\n      ep_hyperlink_img.hide();\n      ep_hyperlink_title.show();\n      card_loading_hyperlink.show();\n\n      // raise for og:title resolving\n\n      if (!/^http:\\/\\//.test(hyperlink) && !/^https:\\/\\//.test(hyperlink)) {\n        hyperlink = `https://${hyperlink}`;\n      }\n\n      const changeMetaView = function (hyperlink, title, image) {\n        ep_hyperlink_img.attr('src', image);\n        ep_hyperlink_img.on('load', () => {\n          card_loading_hyperlink.fadeOut(500, () => {\n            ep_hyperlink_img.fadeIn();\n            ep_hyperlink_title.text(\n                title.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, '')\n            );\n            ep_hyperlink_description.text(\n                hyperlink.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, '')\n            );\n            linkModal.attr({'data-loaded': true});\n          });\n        });\n      };\n\n      if (!validUrl.isUri(hyperlink)) {\n        const img =\n\t\t\t\t\t'../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png';\n        changeMetaView(hyperlink, hyperlink, img);\n        return false;\n      }\n      // ........\n      const metaResolverCallBack = function (result) {\n        if (result.metadata.image && result.metadata.title) {\n          changeMetaView(\n              hyperlink,\n              result.metadata.title,\n              result.metadata.image\n          );\n        } else {\n          const editedHyperlink = `https://${dividedUrl.hostname}`;\n          if (result.last !== true) {\n            socket.emit(\n                'metaResolver',\n                {padId: clientVars.padId, editedHyperlink, last: true},\n                metaResolverCallBack\n            );\n          } else {\n            changeMetaView(\n                hyperlink,\n                result.metadata.title || hyperlink,\n                '../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png'\n            );\n          }\n        }\n      };\n      // ........\n      switch (dividedUrl.hostname) {\n        case 'twitter.com':\n          changeMetaView(\n              hyperlink,\n              hyperlink,\n              '../static/plugins/ep_full_hyperlinks/static/dist/img/twitter.png'\n          );\n          break;\n        default:\n          socket.emit(\n              'metaResolver',\n              {padId: clientVars.padId, hyperlink, last: false},\n              metaResolverCallBack\n          );\n      }\n    }\n\n    setPositionModal(e, linkModal, padInner);\n    linkModal.addClass('hyperlink-display');\n  };\n\n  // Indicates if event was on one of the elements that does not close link\n  const shouldNotCloseLink = function (e) {\n    // a link box\n    if (\n      $(e.target).closest('.link').length ||\n\t\t\t$(e.target).closest('.link-modal').length ||\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_edit').length ||\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_delete').length ||\n\t\t\t$(e.target).closest('.ep_hyperlink_docs_bubble_button_copy').length ||\n\t\t\t$(e.target).closest('.full-display-link').length ||\n\t\t\t$(e.target).closest('.link-title-wrapper').length ||\n\t\t\t$(e.target).closest('.link-edit-form').length ||\n\t\t\t$(e.target).closest('.link-text-text').length ||\n\t\t\t$(e.target).closest('.link-text-hyperlink').length\n    ) {\n      // the link modal\n      return true;\n    }\n    return false;\n  };\n\n  const isLinkInternal = (url) => {\n    const incomeURL = new URL(url);\n    let result = false;\n\n    // 1/ check the origin\n    if (incomeURL.origin !== location.origin) return false;\n\n\n    // 2/ origin the same but diff pad name\n    // check if the income url related to filter url\n    if (incomeURL.origin === location.origin) {\n      // does have p\n      const doesPInURL = location.pathname.split('/').indexOf('p') > 0;\n      const padName = clientVars.padId;\n      const padMainPathname = doesPInURL ? `/p/${padName}` : `/${padName}`;\n      // check if the income url pad name is the same current pad name\n      if (location.pathname.substring(0, padMainPathname.length) === padMainPathname) result = true;\n\n      // does single pad active\n      if (clientVars.ep_singlePad.active) result = true;\n    }\n\n    return result;\n  };\n\n  const doesLinkHaveFilter = (url) => {\n    const result = [];\n    const padName = clientVars.padId;\n\n    const currentPathname = url.pathname.split('/');\n\n    let padNameIndex = currentPathname.indexOf(padName) + 1;\n\n    if (clientVars.ep_singlePad.active) padNameIndex = 0;\n\n    const filters = [...currentPathname].splice(padNameIndex, currentPathname.length - 1);\n\n    result.push(...filters);\n\n    return result;\n  };\n\n  // internal link\n  // other plugin must listen for pushstate to get new data and excute they part.\n  const internalLinkClick = function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    const href = $(this).attr('href');\n\n    if (isLinkInternal(href)) {\n      const incomeURL = new URL(href);\n      let targetPath = `${incomeURL.search}`;\n      const filters = doesLinkHaveFilter(incomeURL);\n\n      if (filters.length > 0) {\n        const doesPInURL = location.pathname.split('/').indexOf('p') > 0;\n        targetPath = doesPInURL ? '/p' : '';\n        if (!clientVars.ep_singlePad.active) targetPath += `/${clientVars.padId}`;\n        targetPath += `/${filters.join('/')}${incomeURL.search}`;\n      }\n\n      if (incomeURL.search.length === 0) targetPath = href;\n\n      // The Target is which plugin should listen more for more functionality\n      // In this example, if we find a slug filter in your URL,\n      // the target should be the filter plugin\n      const tartge = filters.length > 0 ? 'filter' : 'other';\n\n      window.history.pushState({type: 'hyperLink', href, target: tartge}, document.title, targetPath);\n      // close all link\n      hideAllLinks();\n    } else {\n      window.open(href, '_blank');\n    }\n    return false;\n  };\n\n  return {\n    showLink,\n    hideLink,\n    hideAllLinks,\n    showLinkModal,\n    getLinksContainer,\n    shouldNotCloseLink,\n    internalLinkClick,\n  };\n})();\n","'use strict';\n\nconst newLink = (() => {\n  /**\n   * Create a link object with data filled on the given form\n   * @param {jQuery} form .link-edit-form\n   * @returns link object (vars text, oldText, hyperlink)\n   */\n  const buildLinkFrom = (form) => {\n    const text = form.find('#hyperlink-text').val();\n    const oldText = form.find('#hyperlink-text-hidden').val();\n    const hyperlink = form.find('#hyperlink-url').val();\n\n    return {\n      text,\n      oldText,\n      hyperlink,\n    };\n  };\n\n  // Callback for new link Cancel\n  const cancelNewLink = () => hideNewLinkPopup();\n\n  // Callback for new link Submit\n  const submitNewLink = (callback) => {\n    const index = 0;\n    const form = $(document).find('#newLink');\n    const link = buildLinkFrom(form);\n\n    // if scheme not present, add \"https://\"\n    if (!validUrl.splitUri(link.hyperlink).scheme) {\n      link.hyperlink = `https://${link.hyperlink}`;\n    }\n\n    if (link.text.length > 0 && validUrl.isUri(link.hyperlink)) {\n      form.find('#hyperlink-text, #hyperlink-url').removeClass('error');\n      hideNewLinkPopup();\n      callback(link, index);\n    } else {\n      if (link.text.length === 0) form.find('#hyperlink-text').addClass('error');\n      if (!validUrl.isUri(link.hyperlink)) form.find('#hyperlink-url').addClass('error');\n    }\n    return false;\n  };\n\n  /* ***** Public methods: ***** */\n\n  // Insert new Link Form\n  const insertNewLinkPopupIfDontExist = (link, callback) => {\n    $('#newLink').remove();\n    link.linkId = '';\n    const newLinkPopup = $('#newLinkTemplate').tmpl(link);\n    newLinkPopup.appendTo($('#editorcontainerbox'));\n\n    // Cancel btn\n    $('#newLink #link-cancel-btn').on('click', (e) => cancelNewLink());\n\n    // Create btn // link-create-btn\n    $('#newLink #link-create-btn').on('click', (e) => submitNewLink(callback));\n\n    $(document).on('submit', 'form.link-edit-form', (e) => {\n      e.preventDefault();\n      submitNewLink(callback);\n    });\n\n    return newLinkPopup;\n  };\n\n  const showNewLinkPopup = () => {\n    if (!$('body').hasClass('mobileView')) {\n      // position below link icon\n      $('#newLink').css('left', $('.toolbar .addLink').offset().left);\n    }\n\n\n    // Reset form to make sure it is all clear\n    $('#newLink').find('textarea').val('');\n    $('#newLink').find('.link-content, .to-value').removeClass('error');\n\n    // Show popup\n    $('#newLink').addClass('popup-show');\n\n    // mark selected text, so it is clear to user which text range the link is being applied to\n    pad.plugins.ep_full_hyperlinks.preLinkMarker.markSelectedText();\n\n    // focus on hyperlink input\n    setTimeout(() => $('#newLink #hyperlink-url').focus().select(), 500);\n  };\n\n  const hideNewLinkPopup = () => {\n    $('#newLink').removeClass('popup-show');\n\n    // force focus to be lost, so virtual keyboard is hidden on mobile devices\n    $('#newLink').find(':focus').blur();\n\n    // unmark selected text, as now there is no text being linked\n    pad.plugins.ep_full_hyperlinks.preLinkMarker.unmarkSelectedText();\n  };\n\n  return {\n    // localizenewLinkPopup,\n    insertNewLinkPopupIfDontExist,\n    showNewLinkPopup,\n    hideNewLinkPopup,\n  };\n})();\n","'use strict';\n\nconst preLinkMark = (() => {\n  const MARK_CLASS = 'pre-selected-link';\n\n  const preLinkMarker = function (ace) {\n    this.ace = ace;\n    const self = this;\n\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    // remove any existing marks, as there is no link being added on plugin initialization\n    // (we need the timeout to let the plugin be fully initialized before starting to remove\n    // marked texts)\n    setTimeout(() => {\n      self.unmarkSelectedText();\n    }, 0);\n  };\n\n  // Indicates if Etherpad is configured to highlight text\n  preLinkMarker.prototype.highlightSelectedText = function () {\n    return clientVars.highlightSelectedText;\n  };\n\n  preLinkMarker.prototype.markSelectedText = function () {\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    this.ace.callWithAce(doNothing, 'markPreSelectedTextToLink', true);\n  };\n\n  preLinkMarker.prototype.unmarkSelectedText = function () {\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    this.ace.callWithAce(doNothing, 'unmarkPreSelectedTextToLink', true);\n  };\n\n  preLinkMarker.prototype.performNonUnduableEvent = function (eventType, callstack, action) {\n    callstack.startNewEvent('nonundoable');\n    action();\n    callstack.startNewEvent(eventType);\n  };\n\n  preLinkMarker.prototype.handleMarkText = function (context) {\n    const editorInfo = context.editorInfo;\n    const rep = context.rep;\n    const callstack = context.callstack;\n\n    // first we need to unmark any existing text, otherwise we'll have 2 text ranges marked\n    this.removeMarks(editorInfo, rep, callstack);\n\n    this.addMark(editorInfo, callstack);\n  };\n\n  preLinkMarker.prototype.handleUnmarkText = function (context) {\n    const editorInfo = context.editorInfo;\n    const rep = context.rep;\n    const callstack = context.callstack;\n\n    this.removeMarks(editorInfo, rep, callstack);\n  };\n\n  preLinkMarker.prototype.addMark = function (editorInfo, callstack) {\n    const eventType = callstack.editEvent.eventType;\n\n    // we don't want the text marking to be undoable\n    this.performNonUnduableEvent(eventType, callstack, () => {\n      editorInfo.ace_setAttributeOnSelection(MARK_CLASS, clientVars.userId);\n    });\n  };\n\n  preLinkMarker.prototype.removeMarks = function (editorInfo, rep, callstack) {\n    const eventType = callstack.editEvent.eventType;\n    const originalSelStart = rep.selStart;\n    const originalSelEnd = rep.selEnd;\n\n    // we don't want the text marking to be undoable\n    this.performNonUnduableEvent(eventType, callstack, () => {\n      // remove marked text\n      const padInner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\n      const selector = `.${MARK_CLASS}`;\n      const repArr = editorInfo.ace_getRepFromSelector(selector, padInner);\n      // repArr is an array of reps\n      $.each(repArr, (index, rep) => {\n        editorInfo.ace_performSelectionChange(rep[0], rep[1], true);\n        editorInfo.ace_setAttributeOnSelection(MARK_CLASS, false);\n      });\n\n      // make sure selected text is back to original value\n      editorInfo.ace_performSelectionChange(originalSelStart, originalSelEnd, true);\n    });\n  };\n\n  // we do nothing on callWithAce; actions will be handled on aceEditEvent\n  const doNothing = () => {};\n\n  const init = (ace) => new preLinkMarker(ace);\n\n  return {\n    MARK_CLASS,\n    init,\n  };\n})();\n","'use strict';\n\nconst shared = (() => {\n  const collectContentPre = (hook, context) => {\n    const link = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(context.cls);\n    const fakeLink = /(?:^| )(fakelink-[A-Za-z0-9]*)/.exec(context.cls);\n\n    if (link && link[1]) {\n      context.cc.doAttrib(context.state, `link::${link[1]}`);\n    }\n\n    // a fake link is a link copied from this or another pad. To avoid conflicts\n    // with existing links, a fake linkId is used, so then we generate a new one\n    // when the link is saved\n    if (fakeLink) {\n      const mapFakeLinks = pad.plugins.ep_full_hyperlinks.getMapfakeLinks();\n      const fakeLinkId = fakeLink[1];\n      const linkId = mapFakeLinks[fakeLinkId];\n      context.cc.doAttrib(context.state, `link::${linkId}`);\n    }\n\n    return [];\n  };\n\n  const generateLinkId = () => `lc-${randomString(16)}`;\n\n  return {\n    collectContentPre,\n    generateLinkId,\n  };\n})();\n"]}