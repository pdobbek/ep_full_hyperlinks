{"version":3,"sources":["validUrl.js","copyPasteEvents.js","linkBoxes.js","newLink.js","preLinkMark.js","shared.js"],"names":["exports","moduleList","randomString","require","validUrl","splitUri","uri","match","is_iri","value","test","splitted","scheme","authority","path","query","fragment","out","length","toLowerCase","is_http_iri","allowHttps","port","replace","is_https_iri","is_web_iri","is_uri","is_http_uri","is_https_uri","is_web_uri","isUri","isHttpUri","isHttpsUri","isWebUri","events","addTextOnClipboard","e","padInner","removeSelection","links","preventDefault","getFormatedHrefElements","selection","contentWindow","getSelection","getRangeAt","selectedElements","document","createElement","append","cloneContents","querySelectorAll","forEach","el","cls","getAttribute","lindId","exec","newTag","innerHTML","setAttribute","data","hyperlink","querySelector","replaceWith","error","console","getSelectionFormated","originalEvent","clipboardData","setData","outerHTML","contents","execCommand","saveLinks","pastedDataHtml","getData","pastedHtmlHolderElemenet","allLinksElement","getElementsByTagName","allLinksData","element","tempHyperLink","href","tempHyperLinkText","newLinkId","shared","generateLinkId","className","id","author","linkId","timestamp","Date","getTime","text","originalLinkId","headerId","date","formattedDate","pad","plugins","ep_full_hyperlinks","saveLinkWithoutSelection","clientVars","padId","$","clone","html","makeClipboarRedyForSaveLinks","linkBoxes","padOuter","getPadOuter","getLinksContainer","find","hideAllLinks","hide","setPositionModal","linkModal","clickCoords","posx","posy","window","event","pageX","pageY","clientX","clientY","body","scrollLeft","documentElement","scrollTop","x","y","getPosition","clickCoordsX","clickCoordsY","modalWith","innerWidth","modalHeight","innerHeight","windowWidth","windowHeight","newL","offset","left","newT","css","top","parseInt","showLink","show","hideLink","showLinkModal","linkObj","socket","linkModalAppended","tmpl","loaded","attr","val","title","dividedUrl","URL","ep_hyperlink_img","ep_hyperlink_title","card_loading_hyperlink","ep_hyperlink_description","changeMetaView","image","on","fadeOut","fadeIn","data-loaded","metaResolverCallBack","result","metadata","editedHyperlink","hostname","last","emit","addClass","shouldNotCloseLink","target","closest","internalLinkClick","stopPropagation","this","url","incomeURL","origin","location","doesPInURL","pathname","split","indexOf","padName","padMainPathname","substring","ep_singlePad","active","isLinkInternal","targetPath","search","filters","currentPathname","padNameIndex","splice","push","doesLinkHaveFilter","join","tartge","history","pushState","type","open","newLink","submitNewLink","callback","form","link","oldText","buildLinkFrom","removeClass","hideNewLinkPopup","blur","preLinkMarker","unmarkSelectedText","insertNewLinkPopupIfDontExist","remove","newLinkPopup","appendTo","showNewLinkPopup","hasClass","markSelectedText","setTimeout","focus","select","preLinkMark","MARK_CLASS","ace","self","highlightSelectedText","prototype","callWithAce","doNothing","performNonUnduableEvent","eventType","callstack","action","startNewEvent","handleMarkText","context","editorInfo","rep","removeMarks","addMark","handleUnmarkText","editEvent","ace_setAttributeOnSelection","userId","originalSelStart","selStart","originalSelEnd","selEnd","repArr","ace_getRepFromSelector","each","index","ace_performSelectionChange","init","hook","fakeLink","cc","doAttrib","state","getMapfakeLinks"],"mappings":"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","file":"ep.full.hyperlinks.mini.js","sourcesContent":["// https://github.com/ogt/valid-url\n\nconst validUrl = (function () {\n  'use strict';\n\n  // private function\n  // internal URI spitter method - direct from RFC 3986\n  const splitUri = function (uri) {\n    const splitted = uri.match(/(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?/);\n    return splitted;\n  };\n\n  function is_iri(value) {\n    if (!value) {\n      return;\n    }\n\n    // check for illegal characters\n    if (/[^a-z0-9\\:\\/\\?\\#\\[\\]\\@\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=\\.\\-\\_\\~\\%]/i.test(value)) return;\n\n    // check for hex escapes that aren't complete\n    if (/%[^0-9a-f]/i.test(value)) return;\n    if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;\n\n    let splitted = [];\n    let scheme = '';\n    let authority = '';\n    let path = '';\n    let query = '';\n    let fragment = '';\n    let out = '';\n\n    // from RFC 3986\n    splitted = splitUri(value);\n    scheme = splitted[1];\n    authority = splitted[2];\n    path = splitted[3];\n    query = splitted[4];\n    fragment = splitted[5];\n\n    // scheme and path are required, though the path can be empty\n    if (!(scheme && scheme.length && path.length >= 0)) return;\n\n    // if authority is present, the path must be empty or begin with a /\n    if (authority && authority.length) {\n      if (!(path.length === 0 || /^\\//.test(path))) return;\n    } else {\n      // if authority is not present, the path must not start with //\n      if (/^\\/\\//.test(path)) return;\n    }\n\n    // scheme must begin with a letter, then consist of letters, digits, +, ., or -\n    if (!/^[a-z][a-z0-9\\+\\-\\.]*$/.test(scheme.toLowerCase())) return;\n\n    // re-assemble the URL per section 5.3 in RFC 3986\n    out += `${scheme}:`;\n    if (authority && authority.length) {\n      out += `//${authority}`;\n    }\n\n    out += path;\n\n    if (query && query.length) {\n      out += `?${query}`;\n    }\n\n    if (fragment && fragment.length) {\n      out += `#${fragment}`;\n    }\n\n    return out;\n  }\n\n  function is_http_iri(value, allowHttps) {\n    if (!is_iri(value)) {\n      return;\n    }\n\n    let splitted = [];\n    let scheme = '';\n    let authority = '';\n    let path = '';\n    let port = '';\n    let query = '';\n    let fragment = '';\n    let out = '';\n\n    // from RFC 3986\n    splitted = splitUri(value);\n    scheme = splitted[1];\n    authority = splitted[2];\n    path = splitted[3];\n    query = splitted[4];\n    fragment = splitted[5];\n\n    if (!scheme) return;\n\n    if (allowHttps) {\n      if (scheme.toLowerCase() != 'https') return;\n    } else if (scheme.toLowerCase() != 'http') { return; }\n\n    // fully-qualified URIs must have an authority section that is\n    // a valid host\n    if (!authority) {\n      return;\n    }\n\n    // enable port component\n    if (/:(\\d+)$/.test(authority)) {\n      port = authority.match(/:(\\d+)$/)[0];\n      authority = authority.replace(/:\\d+$/, '');\n    }\n\n    out += `${scheme}:`;\n    out += `//${authority}`;\n\n    if (port) {\n      out += port;\n    }\n\n    out += path;\n\n    if (query && query.length) {\n      out += `?${query}`;\n    }\n\n    if (fragment && fragment.length) {\n      out += `#${fragment}`;\n    }\n\n    return out;\n  }\n\n  function is_https_iri(value) {\n    return is_http_iri(value, true);\n  }\n\n  function is_web_iri(value) {\n    return (is_http_iri(value) || is_https_iri(value));\n  }\n\n  return {\n    is_uri: is_iri,\n    is_http_uri: is_http_iri,\n    is_https_uri: is_https_iri,\n    is_web_uri: is_web_iri,\n    isUri: is_iri,\n    isHttpUri: is_http_iri,\n    isHttpsUri: is_https_iri,\n    isWebUri: is_web_iri,\n  };\n})();\n","'use strict';\n\nconst events = (() => {\n  const getSelectionFormated = (padInner, links) => {\n    const selection = padInner[0].contentWindow.getSelection().getRangeAt(0);\n    const selectedElements = document.createElement('div');\n\n    selectedElements.append(selection.cloneContents());\n\n    try {\n      selectedElements.querySelectorAll('.link').forEach((el) => {\n        const cls = el.getAttribute('class');\n        const classLinkId = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(cls);\n        const lindId = classLinkId[1];\n\n        let newTag;\n\n        if (!links[lindId]) {\n          newTag = document.createElement('span');\n          newTag.innerHTML = el.innerHTML;\n        } else {\n        // create a tag\n          newTag = document.createElement('a');\n          newTag.innerHTML = el.innerHTML;\n          newTag.setAttribute('href', links[lindId].data.hyperlink);\n        }\n\n        // replace the current node with href node\n        const span = selectedElements.querySelector(`.${lindId}`);\n        span.replaceWith(newTag);\n      });\n    } catch (error) {\n      console.error('[ep_full_hyperlinks]: copy data has an error', error);\n    }\n\n    return selectedElements;\n  };\n\n  const addTextOnClipboard = (e, padInner, removeSelection, links) => {\n    e.preventDefault();\n    const getFormatedHrefElements = getSelectionFormated(padInner, links);\n\n    e.originalEvent.clipboardData.setData('text/html', getFormatedHrefElements.outerHTML);\n\n    // if it is a cut event we have to remove the selection\n    if (removeSelection) {\n      padInner.contents()[0].execCommand('delete');\n    }\n  };\n\n  const makeClipboarRedyForSaveLinks = (e, padInner) => {\n    const clipboardData = e.originalEvent.clipboardData;\n    const pastedDataHtml = clipboardData.getData('text/html');\n    const range = padInner.contents()[0].getSelection().getRangeAt(0);\n\n    if (!range) return false;\n\n    e.preventDefault();\n    const pastedHtmlHolderElemenet = document.createElement('div');\n    pastedHtmlHolderElemenet.innerHTML = pastedDataHtml;\n    const allLinksElement = pastedHtmlHolderElemenet.getElementsByTagName('a');\n    const allLinksData = {};\n\n    for (const element of allLinksElement) {\n      const tempHyperLink = element.href;\n      const tempHyperLinkText = element.innerHTML;\n      const newLinkId = shared.generateLinkId();\n      element.className = newLinkId;\n      element.id = newLinkId;\n      allLinksData[newLinkId] = {\n        data: {\n          author: 'empty',\n          linkId: newLinkId,\n          timestamp: new Date().getTime(),\n          text: tempHyperLinkText,\n          originalLinkId: newLinkId,\n          hyperlink: tempHyperLink,\n          headerId: null,\n          date: new Date(),\n          formattedDate: new Date(),\n        },\n      };\n    }\n\n    pad.plugins.ep_full_hyperlinks.saveLinkWithoutSelection(\n        clientVars.padId,\n        allLinksData\n    );\n\n    padInner\n        .contents()[0]\n        .execCommand(\n            'insertHTML',\n            false,\n            $('<div>').append($(pastedHtmlHolderElemenet).clone()).html()\n        );\n  };\n\n  const saveLinks = (e, padInner) => {\n    makeClipboarRedyForSaveLinks(e, padInner);\n  };\n\n  return {\n    addTextOnClipboard,\n    saveLinks,\n  };\n})();\n","'use strict'\n\n\nconst linkBoxes = (() => {\n\tlet padOuter;\n\tconst getPadOuter = () =>\n\t\t(padOuter = padOuter || $('iframe[name=\"ace_outer\"]').contents());\n\n\tconst getLinksContainer = () => getPadOuter().find(\"#linkBoxWrapper\");\n\n\t/* ***** Public methods: ***** */\n\n\tconst showLink = (linkId) => getLinksContainer().find(`#${linkId}`).show();\n\n\tconst hideLink = (linkId) => {\n\t\tgetLinksContainer().find(`#${linkId}`).hide();\n\t\tpadOuter.find(`#show-form-${linkId}`).show();\n\t\tpadOuter.find(`#edit-form-${linkId}`).hide();\n\t};\n\n\tconst hideAllLinks = () => getLinksContainer().find(`.link-container`).hide();\n\n\n\tconst getPosition = (e) => {\n\t\tlet posx = 0;\n\t\tlet posy = 0;\n\t\n\t\tif (!e) e = window.event;\n\t\t\n\t\tif (e.pageX || e.pageY) {\n\t\t\tposx = e.pageX;\n\t\t\tposy = e.pageY;\n\t\t} else if (e.clientX || e.clientY) {\n\t\t\tposx = e.clientX + document.body.scrollLeft + \n\t\t\t\t\t\t\t\t\t\t\t\t document.documentElement.scrollLeft;\n\t\t\tposy = e.clientY + document.body.scrollTop + \n\t\t\t\t\t\t\t\t\t\t\t\t document.documentElement.scrollTop;\n\t\t}\n\t\n\t\treturn { x: posx, y: posy }\n\t}\n\n\n\tconst setPositionModal = (e, linkModal, padInner) => {\n\t\tconst clickCoords = getPosition(e);\n\t\tclickCoordsX = clickCoords.x;\n\t\tclickCoordsY = clickCoords.y;\n\n\t\tconst modalWith = linkModal.innerWidth()\n\t\tconst modalHeight = linkModal.innerHeight()\n\n\t\twindowWidth = padInner.innerWidth();\n\t\twindowHeight = padInner.innerHeight();\n\n\t\tlet newL= `${e.clientX +padInner.offset().left}px`;\n\t\tlet newT = `${clickCoordsY}px`;\n\n\t\tif ((windowWidth - clickCoordsX) < modalWith) {\n\t\t\tnewL = `${(windowWidth - modalWith)}px`;\n\t\t}\n\t\n\t\tif ((windowHeight - clickCoordsY) < modalHeight) {\n\t\t\tnewT = `${windowHeight - modalHeight}px`;\n\t\t} \n\n\t\tlinkModal.css({ left: newL, top: `${parseInt(newT) + 35}px`  });\n\t}\n\n\n\tconst showLinkModal = (e, linkObj, socket) => {\n\t\tconst padOuter = $('iframe[name=\"ace_outer\"]').contents();\n\t\tconst padInner = getPadOuter().find('iframe[name=\"ace_inner\"]');\n\t\tconst linkId = linkObj.linkId;\n\t\tconst linkModalAppended =\n\t\t\tgetLinksContainer().find(`#${linkId}`).length === 0 ? false : true;\n\n\t\thideAllLinks();\n\n\t\tif(!linkObj.hyperlink){\n\t\t\tconsole.error(`[hyperlink]: link does not exist`, linkObj)\n\t\t\treturn false\n\t\t}\n\t\t\n\t\t// find link modal, if does not exist create a link modal\n\t\tlet linkModal = getLinksContainer().find(`#${linkId}`);\n\t\tif (!linkModalAppended)\n\t\t\tlinkModal = $(\"#linkBoxTemplate\").tmpl({ ...linkObj });\n\n\t\tconst loaded = linkModal.attr(\"data-loaded\");\n\n\t\t// if the linkModal was not appended, create a modal and append it to #linkBoxWrapper\n\t\tif (!linkModalAppended) {\n\t\t\tpadOuter.find(\"#linkBoxWrapper\").append(linkModal);\n\t\t} else {\n\t\t\t// if the modal was exist update text and hypertext\n\t\t\tlinkModal.show();\n\t\t\t// if the old hyperlink was not same as new hyperlink\n\t\t\tif (linkObj.hyperlink !== linkModal.find(\"a.ep_hyperlink_title\").attr(\"href\")) {\n\t\t\t\tlinkModal.attr(\"data-loaded\", \"false\");\n\t\t\t}\n\n\t\t\tlinkModal.attr(\"data-hyperlink\", linkObj.hyperlink);\n\t\t\tlinkModal.find(\"input#hyperlink-url\").val(linkObj.hyperlink);\n\n\t\t\tlinkModal.find(\"a.ep_hyperlink_title\").attr({\n\t\t\t\ttitle: linkObj.hyperlink,\n\t\t\t\thref: linkObj.hyperlink,\n\t\t\t});\n\t\t}\n\n\t\t// If the text we saved has changed and is different from the contents of the pad\n\t\tconst text = padInner.contents().find(`.${linkId}`).text()\n\t\tlinkModal.find(\"input#hyperlink-text-hidden\").val(text);\n\t\tlinkModal.find(\"input#hyperlink-text\").val(text);\n\n\t\t// TODO: 1/ hyperlink for social and\n\t\t// TODO: 2/ inside link\n\t\tif (loaded != \"true\") {\n\t\t\tlet hyperlink = linkObj.hyperlink || linkModal.attr(\"data-hyperlink\");\n\t\t\tlet dividedUrl;\n\t\t\ttry {\n\t\t\t\tdividedUrl = new URL(hyperlink);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(`[hyperlink]: ${error}`);\n\t\t\t\tlinkBoxes.hideLink(linkId);\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst ep_hyperlink_img = linkModal.find(\"#ep_hyperlink_img\");\n\t\t\tconst ep_hyperlink_title = linkModal.find(\"a.ep_hyperlink_title\");\n\t\t\tconst card_loading_hyperlink = linkModal.find(\"#card_loading_hyperlink\");\n\t\t\tconst ep_hyperlink_description = linkModal.find(\n\t\t\t\t\"#ep_hyperlink_description\"\n\t\t\t);\n\n\t\t\tep_hyperlink_description.text(\"\");\n\t\t\tep_hyperlink_title.text(hyperlink);\n\n\t\t\tep_hyperlink_img.hide();\n\t\t\tep_hyperlink_title.show();\n\t\t\tcard_loading_hyperlink.show();\n\n\t\t\t// raise for og:title resolving\n\n\t\t\tif (!/^http:\\/\\//.test(hyperlink) && !/^https:\\/\\//.test(hyperlink)) {\n\t\t\t\thyperlink = `https://${hyperlink}`;\n\t\t\t}\n\n\t\t\tconst changeMetaView = function (hyperlink, title, image) {\n\t\t\t\tep_hyperlink_img.attr(\"src\", image);\n\t\t\t\tep_hyperlink_img.on(\"load\", () => {\n\t\t\t\t\tcard_loading_hyperlink.fadeOut(500, () => {\n\t\t\t\t\t\tep_hyperlink_img.fadeIn();\n\t\t\t\t\t\tep_hyperlink_title.text(\n\t\t\t\t\t\t\ttitle.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, \"\")\n\t\t\t\t\t\t);\n\t\t\t\t\t\tep_hyperlink_description.text(\n\t\t\t\t\t\t\thyperlink.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, \"\")\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlinkModal.attr({ \"data-loaded\": true });\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t\t\n\t\t\tif (!validUrl.isUri(hyperlink)) {\n\t\t\t\tconst img =\n\t\t\t\t\t\"../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png\";\n\t\t\t\tchangeMetaView(hyperlink, hyperlink, img);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// ........\n\t\t\tconst metaResolverCallBack = function (result) {\n\n\t\t\t\tif (result.metadata.image && result.metadata.title) {\n\t\t\t\t\tchangeMetaView(\n\t\t\t\t\t\thyperlink,\n\t\t\t\t\t\tresult.metadata.title,\n\t\t\t\t\t\tresult.metadata.image\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tvar editedHyperlink = `https://${dividedUrl.hostname}`;\n\t\t\t\t\tif (result.last !== true) {\n\t\t\t\t\t\tsocket.emit(\n\t\t\t\t\t\t\t\"metaResolver\",\n\t\t\t\t\t\t\t{ padId: clientVars.padId, editedHyperlink, last: true },\n\t\t\t\t\t\t\tmetaResolverCallBack\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchangeMetaView(\n\t\t\t\t\t\t\thyperlink,\n\t\t\t\t\t\t\tresult.metadata.title || hyperlink,\n\t\t\t\t\t\t\t\"../static/plugins/ep_full_hyperlinks/static/dist/img/nometa.png\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t// ........\n\t\t\tswitch (dividedUrl.hostname) {\n\t\t\t\tcase \"twitter.com\":\n\t\t\t\t\tchangeMetaView(\n\t\t\t\t\t\thyperlink,\n\t\t\t\t\t\thyperlink,\n\t\t\t\t\t\t\"../static/plugins/ep_full_hyperlinks/static/dist/img/twitter.png\"\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tsocket.emit(\n\t\t\t\t\t\t\"metaResolver\",\n\t\t\t\t\t\t{ padId: clientVars.padId, hyperlink, last: false },\n\t\t\t\t\t\tmetaResolverCallBack\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tsetPositionModal(e, linkModal, padInner);\n\t\tlinkModal.addClass(\"hyperlink-display\");\n\t};\n\n\t// Indicates if event was on one of the elements that does not close link\n\tconst shouldNotCloseLink = function (e) {\n\t\t// a link box\n\t\tif (\n\t\t\t$(e.target).closest(\".link\").length ||\n\t\t\t$(e.target).closest(\".link-modal\").length ||\n\t\t\t$(e.target).closest(\".ep_hyperlink_docs_bubble_button_edit\").length ||\n\t\t\t$(e.target).closest(\".ep_hyperlink_docs_bubble_button_delete\").length ||\n\t\t\t$(e.target).closest(\".ep_hyperlink_docs_bubble_button_copy\").length ||\n\t\t\t$(e.target).closest(\".full-display-link\").length ||\n\t\t\t$(e.target).closest(\".link-title-wrapper\").length ||\n\t\t\t$(e.target).closest(\".link-edit-form\").length ||\n\t\t\t$(e.target).closest(\".link-text-text\").length ||\n\t\t\t$(e.target).closest(\".link-text-hyperlink\").length\n\t\t) {\n\t\t\t// the link modal\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\tconst isLinkInternal = (url) => {\n\t\tconst incomeURL = new URL(url);\n\t\tlet result = false;\n\n\t\t// 1/ check the origin\n\t\tif(incomeURL.origin !== location.origin) return false;\n\n\n\t\t// 2/ origin the same but diff pad name\n\t\t// check if the income url related to filter url\n\t\tif(incomeURL.origin === location.origin){\n\t\t\t// does have p\n\t\t\tconst doesPInURL = location.pathname.split('/').indexOf('p') > 0;\n\t\t\tconst padName = clientVars.padId;\n\t\t\tconst padMainPathname = doesPInURL ? `/p/${padName}` : `/${padName}`;\n\t\t\t// check if the income url pad name is the same current pad name\n\t\t\tif(location.pathname.substring(0, padMainPathname.length) === padMainPathname) result = true\n\n\t\t\t// does single pad active\n\t\t\tif(clientVars.ep_singlePad.active) result = true;\n\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tconst doesLinkHaveFilter = (url) => {\n\t\tconst result = [];\n\t\tconst padName = clientVars.padId;\n\n\t\tconst currentPathname = url.pathname.split(\"/\");\n\n\t\tlet padNameIndex = currentPathname.indexOf(padName) + 1;\n\n\t\tif(clientVars.ep_singlePad.active) padNameIndex = 0;\n\n\t\tconst filters = [...currentPathname].splice(padNameIndex, currentPathname.length - 1);\n\n\t\tresult.push(...filters);\n\n\t\treturn result;\n\t}\n\n\t// internal link\n\t// other plugin must listen for pushstate to get new data and excute they part.\n\tconst internalLinkClick = function (event) {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t\tconst href = $(this).attr('href');\n\n\t\tif(isLinkInternal(href)){\n\t\t\tconst incomeURL = new URL(href);\n\t\t\tlet targetPath = `${incomeURL.search}`\n\t\t\tconst filters = doesLinkHaveFilter(incomeURL);\n\n\t\t\tif(filters.length>0){\n\t\t\t\tconst doesPInURL = location.pathname.split('/').indexOf('p') > 0;\n\t\t\t\ttargetPath = doesPInURL ? '/p': '';\n\t\t\t\tif(!clientVars.ep_singlePad.active) targetPath += `/${clientVars.padId}`;\n\t\t\t\ttargetPath += `/${filters.join('/')}${incomeURL.search}`;\n\t\t\t}\n\n\t\t\tif(incomeURL.search.length===0) targetPath = href;\n\n\t\t\t// The Target is which plugin should listen more for more functionality\n\t\t\t// In this example, if we find a slug filter in your URL,\n\t\t\t// the target should be the filter plugin\n\t\t\tconst tartge = filters.length>0 ? \"filter\" : \"other\";\n\t\t\n\t\t\twindow.history.pushState({type: \"hyperLink\", href, target: tartge}, document.title, targetPath);\n\t\t\t// close all link\n\t\t\thideAllLinks();\n\t\t}else {\n\t\t\twindow.open(href, '_blank');\n\t\t}\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tshowLink,\n\t\thideLink,\n\t\thideAllLinks,\n\t\tshowLinkModal,\n\t\tgetLinksContainer,\n\t\tshouldNotCloseLink,\n\t\tinternalLinkClick,\n\t};\n})();\n","'use strict';\n\nconst newLink = (() => {\n  // Create a link object with data filled on the given form\n  const buildLinkFrom = (form) => {\n    const text = form.find('#hyperlink-text').val();\n    const oldText = form.find('#hyperlink-text-hidden').val();\n    const hyperlink = form.find('#hyperlink-url').val();\n\n    return {\n      text,\n      oldText,\n      hyperlink,\n    };\n  };\n\n  // Callback for new link Cancel\n  const cancelNewLink = () => hideNewLinkPopup();\n\n  // Callback for new link Submit\n  const submitNewLink = (callback) => {\n    const index = 0;\n    const form = $(document).find('#newLink');\n    const link = buildLinkFrom(form);\n    if (link.text.length > 0 && validUrl.isUri(link.hyperlink)) {\n      form.find('#hyperlink-text, #hyperlink-url').removeClass('error');\n      hideNewLinkPopup();\n      callback(link, index);\n    } else {\n      if (link.text.length === 0) form.find('#hyperlink-text').addClass('error');\n      if (!validUrl.isUri(link.hyperlink)) form.find('#hyperlink-url').addClass('error');\n    }\n    return false;\n  };\n\n  /* ***** Public methods: ***** */\n\n  // Insert new Link Form\n  const insertNewLinkPopupIfDontExist = (link, callback) => {\n    $('#newLink').remove();\n    link.linkId = '';\n    const newLinkPopup = $('#newLinkTemplate').tmpl(link);\n    newLinkPopup.appendTo($('#editorcontainerbox'));\n\n    // Cancel btn\n    $('#newLink #link-cancel-btn').on('click', (e) => cancelNewLink());\n\n    // Create btn // link-create-btn\n    $('#newLink #link-create-btn').on('click', (e) => submitNewLink(callback));\n\n    $(document).on('submit', 'form.link-edit-form', (e) => {\n      e.preventDefault();\n      submitNewLink(callback);\n    });\n\n    return newLinkPopup;\n  };\n\n  const showNewLinkPopup = () => {\n    if (!$('body').hasClass('mobileView')) {\n      // position below link icon\n      $('#newLink').css('left', $('.toolbar .addLink').offset().left);\n    }\n\n\n    // Reset form to make sure it is all clear\n    $('#newLink').find('textarea').val('');\n    $('#newLink').find('.link-content, .to-value').removeClass('error');\n\n    // Show popup\n    $('#newLink').addClass('popup-show');\n\n    // mark selected text, so it is clear to user which text range the link is being applied to\n    pad.plugins.ep_full_hyperlinks.preLinkMarker.markSelectedText();\n\n    // focus on hyperlink input\n    setTimeout(() => $('#newLink #hyperlink-url').focus().select(), 500);\n  };\n\n  const hideNewLinkPopup = () => {\n    $('#newLink').removeClass('popup-show');\n\n    // force focus to be lost, so virtual keyboard is hidden on mobile devices\n    $('#newLink').find(':focus').blur();\n\n    // unmark selected text, as now there is no text being linked\n    pad.plugins.ep_full_hyperlinks.preLinkMarker.unmarkSelectedText();\n  };\n\n  return {\n    // localizenewLinkPopup,\n    insertNewLinkPopupIfDontExist,\n    showNewLinkPopup,\n    hideNewLinkPopup,\n  };\n})();\n","'use strict';\n\nconst preLinkMark = (() => {\n  const MARK_CLASS = 'pre-selected-link';\n\n  const preLinkMarker = function (ace) {\n    this.ace = ace;\n    const self = this;\n\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    // remove any existing marks, as there is no link being added on plugin initialization\n    // (we need the timeout to let the plugin be fully initialized before starting to remove\n    // marked texts)\n    setTimeout(() => {\n      self.unmarkSelectedText();\n    }, 0);\n  };\n\n  // Indicates if Etherpad is configured to highlight text\n  preLinkMarker.prototype.highlightSelectedText = function () {\n    return clientVars.highlightSelectedText;\n  };\n\n  preLinkMarker.prototype.markSelectedText = function () {\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    this.ace.callWithAce(doNothing, 'markPreSelectedTextToLink', true);\n  };\n\n  preLinkMarker.prototype.unmarkSelectedText = function () {\n    // do nothing if this feature is not enabled\n    if (!this.highlightSelectedText()) return;\n\n    this.ace.callWithAce(doNothing, 'unmarkPreSelectedTextToLink', true);\n  };\n\n  preLinkMarker.prototype.performNonUnduableEvent = function (eventType, callstack, action) {\n    callstack.startNewEvent('nonundoable');\n    action();\n    callstack.startNewEvent(eventType);\n  };\n\n  preLinkMarker.prototype.handleMarkText = function (context) {\n    const editorInfo = context.editorInfo;\n    const rep = context.rep;\n    const callstack = context.callstack;\n\n    // first we need to unmark any existing text, otherwise we'll have 2 text ranges marked\n    this.removeMarks(editorInfo, rep, callstack);\n\n    this.addMark(editorInfo, callstack);\n  };\n\n  preLinkMarker.prototype.handleUnmarkText = function (context) {\n    const editorInfo = context.editorInfo;\n    const rep = context.rep;\n    const callstack = context.callstack;\n\n    this.removeMarks(editorInfo, rep, callstack);\n  };\n\n  preLinkMarker.prototype.addMark = function (editorInfo, callstack) {\n    const eventType = callstack.editEvent.eventType;\n\n    // we don't want the text marking to be undoable\n    this.performNonUnduableEvent(eventType, callstack, () => {\n      editorInfo.ace_setAttributeOnSelection(MARK_CLASS, clientVars.userId);\n    });\n  };\n\n  preLinkMarker.prototype.removeMarks = function (editorInfo, rep, callstack) {\n    const eventType = callstack.editEvent.eventType;\n    const originalSelStart = rep.selStart;\n    const originalSelEnd = rep.selEnd;\n\n    // we don't want the text marking to be undoable\n    this.performNonUnduableEvent(eventType, callstack, () => {\n      // remove marked text\n      const padInner = $('iframe[name=\"ace_outer\"]').contents().find('iframe[name=\"ace_inner\"]');\n      const selector = `.${MARK_CLASS}`;\n      const repArr = editorInfo.ace_getRepFromSelector(selector, padInner);\n      // repArr is an array of reps\n      $.each(repArr, (index, rep) => {\n        editorInfo.ace_performSelectionChange(rep[0], rep[1], true);\n        editorInfo.ace_setAttributeOnSelection(MARK_CLASS, false);\n      });\n\n      // make sure selected text is back to original value\n      editorInfo.ace_performSelectionChange(originalSelStart, originalSelEnd, true);\n    });\n  };\n\n  // we do nothing on callWithAce; actions will be handled on aceEditEvent\n  const doNothing = () => {};\n\n  const init = (ace) => new preLinkMarker(ace);\n\n  return {\n    MARK_CLASS,\n    init,\n  };\n})();\n","'use strict';\n\nconst shared = (() => {\n  const collectContentPre = (hook, context) => {\n    const link = /(?:^| )(lc-[A-Za-z0-9]*)/.exec(context.cls);\n    const fakeLink = /(?:^| )(fakelink-[A-Za-z0-9]*)/.exec(context.cls);\n\n    if (link && link[1]) {\n      context.cc.doAttrib(context.state, `link::${link[1]}`);\n    }\n\n    // a fake link is a link copied from this or another pad. To avoid conflicts\n    // with existing links, a fake linkId is used, so then we generate a new one\n    // when the link is saved\n    if (fakeLink) {\n      const mapFakeLinks = pad.plugins.ep_full_hyperlinks.getMapfakeLinks();\n      const fakeLinkId = fakeLink[1];\n      const linkId = mapFakeLinks[fakeLinkId];\n      context.cc.doAttrib(context.state, `link::${linkId}`);\n    }\n\n    return [];\n  };\n\n  const generateLinkId = () => `lc-${randomString(16)}`;\n\n  return {\n    collectContentPre,\n    generateLinkId,\n  };\n})();\n"]}